
DATN_STM32_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005820  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080059b0  080059b0  000159b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a18  08005a18  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08005a18  08005a18  00015a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a20  08005a20  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a20  08005a20  00015a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a24  08005a24  00015a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005a28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00000374  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003fc  200003fc  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f1ce  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002077  00000000  00000000  0002f2c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000dc8  00000000  00000000  00031340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ac8  00000000  00000000  00032108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021b90  00000000  00000000  00032bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010484  00000000  00000000  00054760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ce2ef  00000000  00000000  00064be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003f68  00000000  00000000  00132ed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00136e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005998 	.word	0x08005998

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08005998 	.word	0x08005998

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//===============FUNCTION INTERRUPT TIMER1 (checked)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a05      	ldr	r2, [pc, #20]	; (8000590 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d102      	bne.n	8000584 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		flag_timer1 = true;
 800057e:	4b05      	ldr	r3, [pc, #20]	; (8000594 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000580:	2201      	movs	r2, #1
 8000582:	701a      	strb	r2, [r3, #0]
	}
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	40010000 	.word	0x40010000
 8000594:	200002aa 	.word	0x200002aa

08000598 <delay_us>:
//===============FUNCTION INTERRUPT TIMER2 (checked)
void delay_us(uint16_t us)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 80005a2:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <delay_us+0x30>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2200      	movs	r2, #0
 80005a8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 80005aa:	bf00      	nop
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <delay_us+0x30>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005b2:	88fb      	ldrh	r3, [r7, #6]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d3f9      	bcc.n	80005ac <delay_us+0x14>
}
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	200001c4 	.word	0x200001c4

080005cc <HAL_UART_RxCpltCallback>:

//===============FUNCTION INTERRUPT UART (checked)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart4, Data_UART_Receive, 43);
 80005d4:	222b      	movs	r2, #43	; 0x2b
 80005d6:	491c      	ldr	r1, [pc, #112]	; (8000648 <HAL_UART_RxCpltCallback+0x7c>)
 80005d8:	481c      	ldr	r0, [pc, #112]	; (800064c <HAL_UART_RxCpltCallback+0x80>)
 80005da:	f003 fbc6 	bl	8003d6a <HAL_UART_Receive_IT>
	if(Data_UART_Receive[42] == 's')
 80005de:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <HAL_UART_RxCpltCallback+0x7c>)
 80005e0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80005e4:	2b73      	cmp	r3, #115	; 0x73
 80005e6:	d10b      	bne.n	8000600 <HAL_UART_RxCpltCallback+0x34>
	{
		HAL_GPIO_TogglePin(cam_GPIO_Port, cam_Pin);
 80005e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ec:	4818      	ldr	r0, [pc, #96]	; (8000650 <HAL_UART_RxCpltCallback+0x84>)
 80005ee:	f002 f940 	bl	8002872 <HAL_GPIO_TogglePin>
		StateUART = DATA_UART_AVAILABLE;
 80005f2:	4b18      	ldr	r3, [pc, #96]	; (8000654 <HAL_UART_RxCpltCallback+0x88>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	701a      	strb	r2, [r3, #0]
		Data_UART_Receive_Lenght = 43;
 80005f8:	4b17      	ldr	r3, [pc, #92]	; (8000658 <HAL_UART_RxCpltCallback+0x8c>)
 80005fa:	222b      	movs	r2, #43	; 0x2b
 80005fc:	701a      	strb	r2, [r3, #0]
	{
		StateUART = DATA_UART_UNAVAILABLE;
		for(int i = 0; i < 43; i++)
			Data_UART_Receive[i] = ' ';
	}
}
 80005fe:	e01e      	b.n	800063e <HAL_UART_RxCpltCallback+0x72>
	else if(Data_UART_Receive[42] == 'r') // Lenh Reset he thong
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <HAL_UART_RxCpltCallback+0x7c>)
 8000602:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000606:	2b72      	cmp	r3, #114	; 0x72
 8000608:	d108      	bne.n	800061c <HAL_UART_RxCpltCallback+0x50>
		HAL_GPIO_TogglePin(do_GPIO_Port, do_Pin);
 800060a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800060e:	4810      	ldr	r0, [pc, #64]	; (8000650 <HAL_UART_RxCpltCallback+0x84>)
 8000610:	f002 f92f 	bl	8002872 <HAL_GPIO_TogglePin>
		Flag_Reset = true;
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <HAL_UART_RxCpltCallback+0x90>)
 8000616:	2201      	movs	r2, #1
 8000618:	701a      	strb	r2, [r3, #0]
}
 800061a:	e010      	b.n	800063e <HAL_UART_RxCpltCallback+0x72>
		StateUART = DATA_UART_UNAVAILABLE;
 800061c:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <HAL_UART_RxCpltCallback+0x88>)
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 43; i++)
 8000622:	2300      	movs	r3, #0
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	e007      	b.n	8000638 <HAL_UART_RxCpltCallback+0x6c>
			Data_UART_Receive[i] = ' ';
 8000628:	4a07      	ldr	r2, [pc, #28]	; (8000648 <HAL_UART_RxCpltCallback+0x7c>)
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	4413      	add	r3, r2
 800062e:	2220      	movs	r2, #32
 8000630:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 43; i++)
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	3301      	adds	r3, #1
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	2b2a      	cmp	r3, #42	; 0x2a
 800063c:	ddf4      	ble.n	8000628 <HAL_UART_RxCpltCallback+0x5c>
}
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000250 	.word	0x20000250
 800064c:	2000020c 	.word	0x2000020c
 8000650:	40020c00 	.word	0x40020c00
 8000654:	200002a7 	.word	0x200002a7
 8000658:	2000027b 	.word	0x2000027b
 800065c:	200002a9 	.word	0x200002a9

08000660 <HAL_CAN_RxFifo0MsgPendingCallback>:
//===============FUNCTION INTERRUPT CAN MESSAGE (checked)
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RX_CAN_HEADER, Data_CAN_Rx) == HAL_OK)
 8000668:	4b81      	ldr	r3, [pc, #516]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800066a:	4a82      	ldr	r2, [pc, #520]	; (8000874 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800066c:	2100      	movs	r1, #0
 800066e:	4882      	ldr	r0, [pc, #520]	; (8000878 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8000670:	f001 fa3f 	bl	8001af2 <HAL_CAN_GetRxMessage>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	f040 80f6 	bne.w	8000868 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800067c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000680:	487e      	ldr	r0, [pc, #504]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000682:	f002 f8f6 	bl	8002872 <HAL_GPIO_TogglePin>
		switch(RX_CAN_HEADER.StdId)
 8000686:	4b7b      	ldr	r3, [pc, #492]	; (8000874 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	3b01      	subs	r3, #1
 800068c:	2b1f      	cmp	r3, #31
 800068e:	f200 80eb 	bhi.w	8000868 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
 8000692:	a201      	add	r2, pc, #4	; (adr r2, 8000698 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000698:	08000719 	.word	0x08000719
 800069c:	08000751 	.word	0x08000751
 80006a0:	08000869 	.word	0x08000869
 80006a4:	08000789 	.word	0x08000789
 80006a8:	08000869 	.word	0x08000869
 80006ac:	08000869 	.word	0x08000869
 80006b0:	08000869 	.word	0x08000869
 80006b4:	080007c1 	.word	0x080007c1
 80006b8:	08000869 	.word	0x08000869
 80006bc:	08000869 	.word	0x08000869
 80006c0:	08000869 	.word	0x08000869
 80006c4:	08000869 	.word	0x08000869
 80006c8:	08000869 	.word	0x08000869
 80006cc:	08000869 	.word	0x08000869
 80006d0:	08000869 	.word	0x08000869
 80006d4:	080007f9 	.word	0x080007f9
 80006d8:	08000869 	.word	0x08000869
 80006dc:	08000869 	.word	0x08000869
 80006e0:	08000869 	.word	0x08000869
 80006e4:	08000869 	.word	0x08000869
 80006e8:	08000869 	.word	0x08000869
 80006ec:	08000869 	.word	0x08000869
 80006f0:	08000869 	.word	0x08000869
 80006f4:	08000869 	.word	0x08000869
 80006f8:	08000869 	.word	0x08000869
 80006fc:	08000869 	.word	0x08000869
 8000700:	08000869 	.word	0x08000869
 8000704:	08000869 	.word	0x08000869
 8000708:	08000869 	.word	0x08000869
 800070c:	08000869 	.word	0x08000869
 8000710:	08000869 	.word	0x08000869
 8000714:	08000831 	.word	0x08000831
		{
		case 0x001:
			motor1.data[0] = Data_CAN_Rx[0];  motor1.data[1] = Data_CAN_Rx[1]; motor1.data[2] = Data_CAN_Rx[2];
 8000718:	4b55      	ldr	r3, [pc, #340]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800071a:	781a      	ldrb	r2, [r3, #0]
 800071c:	4b58      	ldr	r3, [pc, #352]	; (8000880 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800071e:	705a      	strb	r2, [r3, #1]
 8000720:	4b53      	ldr	r3, [pc, #332]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000722:	785a      	ldrb	r2, [r3, #1]
 8000724:	4b56      	ldr	r3, [pc, #344]	; (8000880 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000726:	709a      	strb	r2, [r3, #2]
 8000728:	4b51      	ldr	r3, [pc, #324]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800072a:	789a      	ldrb	r2, [r3, #2]
 800072c:	4b54      	ldr	r3, [pc, #336]	; (8000880 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800072e:	70da      	strb	r2, [r3, #3]
			motor1.data[3] = Data_CAN_Rx[3];  motor1.data[4] = Data_CAN_Rx[4]; motor1.data[5] = Data_CAN_Rx[5];
 8000730:	4b4f      	ldr	r3, [pc, #316]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000732:	78da      	ldrb	r2, [r3, #3]
 8000734:	4b52      	ldr	r3, [pc, #328]	; (8000880 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000736:	711a      	strb	r2, [r3, #4]
 8000738:	4b4d      	ldr	r3, [pc, #308]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800073a:	791a      	ldrb	r2, [r3, #4]
 800073c:	4b50      	ldr	r3, [pc, #320]	; (8000880 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800073e:	715a      	strb	r2, [r3, #5]
 8000740:	4b4b      	ldr	r3, [pc, #300]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000742:	795a      	ldrb	r2, [r3, #5]
 8000744:	4b4e      	ldr	r3, [pc, #312]	; (8000880 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000746:	719a      	strb	r2, [r3, #6]
			motor1.flag_motor = true;
 8000748:	4b4d      	ldr	r3, [pc, #308]	; (8000880 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800074a:	2201      	movs	r2, #1
 800074c:	721a      	strb	r2, [r3, #8]
			break;
 800074e:	e08b      	b.n	8000868 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
		case 0x002:
			motor2.data[0] = Data_CAN_Rx[0];  motor2.data[1] = Data_CAN_Rx[1]; motor2.data[2] = Data_CAN_Rx[2];
 8000750:	4b47      	ldr	r3, [pc, #284]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000752:	781a      	ldrb	r2, [r3, #0]
 8000754:	4b4b      	ldr	r3, [pc, #300]	; (8000884 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8000756:	705a      	strb	r2, [r3, #1]
 8000758:	4b45      	ldr	r3, [pc, #276]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800075a:	785a      	ldrb	r2, [r3, #1]
 800075c:	4b49      	ldr	r3, [pc, #292]	; (8000884 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 800075e:	709a      	strb	r2, [r3, #2]
 8000760:	4b43      	ldr	r3, [pc, #268]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000762:	789a      	ldrb	r2, [r3, #2]
 8000764:	4b47      	ldr	r3, [pc, #284]	; (8000884 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8000766:	70da      	strb	r2, [r3, #3]
			motor2.data[3] = Data_CAN_Rx[3];  motor2.data[4] = Data_CAN_Rx[4]; motor2.data[5] = Data_CAN_Rx[5];
 8000768:	4b41      	ldr	r3, [pc, #260]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800076a:	78da      	ldrb	r2, [r3, #3]
 800076c:	4b45      	ldr	r3, [pc, #276]	; (8000884 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 800076e:	711a      	strb	r2, [r3, #4]
 8000770:	4b3f      	ldr	r3, [pc, #252]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000772:	791a      	ldrb	r2, [r3, #4]
 8000774:	4b43      	ldr	r3, [pc, #268]	; (8000884 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8000776:	715a      	strb	r2, [r3, #5]
 8000778:	4b3d      	ldr	r3, [pc, #244]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800077a:	795a      	ldrb	r2, [r3, #5]
 800077c:	4b41      	ldr	r3, [pc, #260]	; (8000884 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 800077e:	719a      	strb	r2, [r3, #6]
			motor2.flag_motor= true;
 8000780:	4b40      	ldr	r3, [pc, #256]	; (8000884 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8000782:	2201      	movs	r2, #1
 8000784:	721a      	strb	r2, [r3, #8]
			break;
 8000786:	e06f      	b.n	8000868 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
		case 0x004:
			motor3.data[0] = Data_CAN_Rx[0];  motor3.data[1] = Data_CAN_Rx[1]; motor3.data[2] = Data_CAN_Rx[2];
 8000788:	4b39      	ldr	r3, [pc, #228]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800078a:	781a      	ldrb	r2, [r3, #0]
 800078c:	4b3e      	ldr	r3, [pc, #248]	; (8000888 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 800078e:	705a      	strb	r2, [r3, #1]
 8000790:	4b37      	ldr	r3, [pc, #220]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000792:	785a      	ldrb	r2, [r3, #1]
 8000794:	4b3c      	ldr	r3, [pc, #240]	; (8000888 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 8000796:	709a      	strb	r2, [r3, #2]
 8000798:	4b35      	ldr	r3, [pc, #212]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800079a:	789a      	ldrb	r2, [r3, #2]
 800079c:	4b3a      	ldr	r3, [pc, #232]	; (8000888 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 800079e:	70da      	strb	r2, [r3, #3]
			motor3.data[3] = Data_CAN_Rx[3];  motor3.data[4] = Data_CAN_Rx[4]; motor3.data[5] = Data_CAN_Rx[5];
 80007a0:	4b33      	ldr	r3, [pc, #204]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80007a2:	78da      	ldrb	r2, [r3, #3]
 80007a4:	4b38      	ldr	r3, [pc, #224]	; (8000888 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 80007a6:	711a      	strb	r2, [r3, #4]
 80007a8:	4b31      	ldr	r3, [pc, #196]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80007aa:	791a      	ldrb	r2, [r3, #4]
 80007ac:	4b36      	ldr	r3, [pc, #216]	; (8000888 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 80007ae:	715a      	strb	r2, [r3, #5]
 80007b0:	4b2f      	ldr	r3, [pc, #188]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80007b2:	795a      	ldrb	r2, [r3, #5]
 80007b4:	4b34      	ldr	r3, [pc, #208]	; (8000888 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 80007b6:	719a      	strb	r2, [r3, #6]
			motor3.flag_motor= true;
 80007b8:	4b33      	ldr	r3, [pc, #204]	; (8000888 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	721a      	strb	r2, [r3, #8]
			break;
 80007be:	e053      	b.n	8000868 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
		case 0x008:
			motor4.data[0] = Data_CAN_Rx[0];  motor4.data[1] = Data_CAN_Rx[1]; motor4.data[2] = Data_CAN_Rx[2];
 80007c0:	4b2b      	ldr	r3, [pc, #172]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80007c2:	781a      	ldrb	r2, [r3, #0]
 80007c4:	4b31      	ldr	r3, [pc, #196]	; (800088c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80007c6:	705a      	strb	r2, [r3, #1]
 80007c8:	4b29      	ldr	r3, [pc, #164]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80007ca:	785a      	ldrb	r2, [r3, #1]
 80007cc:	4b2f      	ldr	r3, [pc, #188]	; (800088c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80007ce:	709a      	strb	r2, [r3, #2]
 80007d0:	4b27      	ldr	r3, [pc, #156]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80007d2:	789a      	ldrb	r2, [r3, #2]
 80007d4:	4b2d      	ldr	r3, [pc, #180]	; (800088c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80007d6:	70da      	strb	r2, [r3, #3]
			motor4.data[3] = Data_CAN_Rx[3];  motor4.data[4] = Data_CAN_Rx[4]; motor4.data[5] = Data_CAN_Rx[5];
 80007d8:	4b25      	ldr	r3, [pc, #148]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80007da:	78da      	ldrb	r2, [r3, #3]
 80007dc:	4b2b      	ldr	r3, [pc, #172]	; (800088c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80007de:	711a      	strb	r2, [r3, #4]
 80007e0:	4b23      	ldr	r3, [pc, #140]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80007e2:	791a      	ldrb	r2, [r3, #4]
 80007e4:	4b29      	ldr	r3, [pc, #164]	; (800088c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80007e6:	715a      	strb	r2, [r3, #5]
 80007e8:	4b21      	ldr	r3, [pc, #132]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80007ea:	795a      	ldrb	r2, [r3, #5]
 80007ec:	4b27      	ldr	r3, [pc, #156]	; (800088c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80007ee:	719a      	strb	r2, [r3, #6]
			motor4.flag_motor = true;
 80007f0:	4b26      	ldr	r3, [pc, #152]	; (800088c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	721a      	strb	r2, [r3, #8]
			break;
 80007f6:	e037      	b.n	8000868 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
		case 0x010:
			motor5.data[0] = Data_CAN_Rx[0];  motor5.data[1] = Data_CAN_Rx[1]; motor5.data[2] = Data_CAN_Rx[2];
 80007f8:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80007fa:	781a      	ldrb	r2, [r3, #0]
 80007fc:	4b24      	ldr	r3, [pc, #144]	; (8000890 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80007fe:	705a      	strb	r2, [r3, #1]
 8000800:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000802:	785a      	ldrb	r2, [r3, #1]
 8000804:	4b22      	ldr	r3, [pc, #136]	; (8000890 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8000806:	709a      	strb	r2, [r3, #2]
 8000808:	4b19      	ldr	r3, [pc, #100]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800080a:	789a      	ldrb	r2, [r3, #2]
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800080e:	70da      	strb	r2, [r3, #3]
			motor5.data[3] = Data_CAN_Rx[3];  motor5.data[4] = Data_CAN_Rx[4]; motor5.data[5] = Data_CAN_Rx[5];
 8000810:	4b17      	ldr	r3, [pc, #92]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000812:	78da      	ldrb	r2, [r3, #3]
 8000814:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8000816:	711a      	strb	r2, [r3, #4]
 8000818:	4b15      	ldr	r3, [pc, #84]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800081a:	791a      	ldrb	r2, [r3, #4]
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800081e:	715a      	strb	r2, [r3, #5]
 8000820:	4b13      	ldr	r3, [pc, #76]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000822:	795a      	ldrb	r2, [r3, #5]
 8000824:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8000826:	719a      	strb	r2, [r3, #6]
			motor5.flag_motor= true;
 8000828:	4b19      	ldr	r3, [pc, #100]	; (8000890 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800082a:	2201      	movs	r2, #1
 800082c:	721a      	strb	r2, [r3, #8]
			break;
 800082e:	e01b      	b.n	8000868 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
		case 0x020:
			motor6.data[0] = Data_CAN_Rx[0];  motor6.data[1] = Data_CAN_Rx[1]; motor6.data[2] = Data_CAN_Rx[2];
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000832:	781a      	ldrb	r2, [r3, #0]
 8000834:	4b17      	ldr	r3, [pc, #92]	; (8000894 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8000836:	705a      	strb	r2, [r3, #1]
 8000838:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800083a:	785a      	ldrb	r2, [r3, #1]
 800083c:	4b15      	ldr	r3, [pc, #84]	; (8000894 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 800083e:	709a      	strb	r2, [r3, #2]
 8000840:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000842:	789a      	ldrb	r2, [r3, #2]
 8000844:	4b13      	ldr	r3, [pc, #76]	; (8000894 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8000846:	70da      	strb	r2, [r3, #3]
			motor6.data[3] = Data_CAN_Rx[3];  motor6.data[4] = Data_CAN_Rx[4]; motor6.data[5] = Data_CAN_Rx[5];
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800084a:	78da      	ldrb	r2, [r3, #3]
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 800084e:	711a      	strb	r2, [r3, #4]
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000852:	791a      	ldrb	r2, [r3, #4]
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8000856:	715a      	strb	r2, [r3, #5]
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800085a:	795a      	ldrb	r2, [r3, #5]
 800085c:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 800085e:	719a      	strb	r2, [r3, #6]
			motor6.flag_motor = true;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8000862:	2201      	movs	r2, #1
 8000864:	721a      	strb	r2, [r3, #8]
			break;
 8000866:	bf00      	nop
		}
	}
}
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000104 	.word	0x20000104
 8000874:	200000bc 	.word	0x200000bc
 8000878:	20000154 	.word	0x20000154
 800087c:	40020c00 	.word	0x40020c00
 8000880:	2000010c 	.word	0x2000010c
 8000884:	20000118 	.word	0x20000118
 8000888:	20000124 	.word	0x20000124
 800088c:	20000130 	.word	0x20000130
 8000890:	2000013c 	.word	0x2000013c
 8000894:	20000148 	.word	0x20000148

08000898 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b096      	sub	sp, #88	; 0x58
 800089c:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800089e:	f000 fdbb 	bl	8001418 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80008a2:	f000 f9d9 	bl	8000c58 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008a6:	f000 fb73 	bl	8000f90 <MX_GPIO_Init>
	MX_CAN1_Init();
 80008aa:	f000 fa3f 	bl	8000d2c <MX_CAN1_Init>
	MX_TIM1_Init();
 80008ae:	f000 faa9 	bl	8000e04 <MX_TIM1_Init>
	MX_TIM2_Init();
 80008b2:	f000 faf7 	bl	8000ea4 <MX_TIM2_Init>
	MX_UART4_Init();
 80008b6:	f000 fb41 	bl	8000f3c <MX_UART4_Init>
	/* USER CODE BEGIN 2 */

	//========================UART RECEIVE IT
	HAL_UART_Init(&huart4);
 80008ba:	4892      	ldr	r0, [pc, #584]	; (8000b04 <main+0x26c>)
 80008bc:	f003 f976 	bl	8003bac <HAL_UART_Init>
	HAL_UART_Receive_IT(&huart4, Data_UART_Receive, 43);
 80008c0:	222b      	movs	r2, #43	; 0x2b
 80008c2:	4991      	ldr	r1, [pc, #580]	; (8000b08 <main+0x270>)
 80008c4:	488f      	ldr	r0, [pc, #572]	; (8000b04 <main+0x26c>)
 80008c6:	f003 fa50 	bl	8003d6a <HAL_UART_Receive_IT>

	//========================CAN BUS CONFIG
	/*----------------- CAN START TX AND RX ----------*/
	HAL_CAN_Start(&hcan1);
 80008ca:	4890      	ldr	r0, [pc, #576]	; (8000b0c <main+0x274>)
 80008cc:	f000 fff2 	bl	80018b4 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); // Enable interrupts
 80008d0:	2102      	movs	r1, #2
 80008d2:	488e      	ldr	r0, [pc, #568]	; (8000b0c <main+0x274>)
 80008d4:	f001 fa1f 	bl	8001d16 <HAL_CAN_ActivateNotification>
	/*----------------- ENABLE TIMER 1----------*/
	HAL_TIM_Base_Start_IT(&htim1);
 80008d8:	488d      	ldr	r0, [pc, #564]	; (8000b10 <main+0x278>)
 80008da:	f002 fd35 	bl	8003348 <HAL_TIM_Base_Start_IT>
	/*----------------- ENABLE TIMER 2----------*/
	HAL_TIM_Base_Start(&htim2);
 80008de:	488d      	ldr	r0, [pc, #564]	; (8000b14 <main+0x27c>)
 80008e0:	f002 fcca 	bl	8003278 <HAL_TIM_Base_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	motor1.flag_motor = false;motor1.name = 'a';
 80008e4:	4b8c      	ldr	r3, [pc, #560]	; (8000b18 <main+0x280>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	721a      	strb	r2, [r3, #8]
 80008ea:	4b8b      	ldr	r3, [pc, #556]	; (8000b18 <main+0x280>)
 80008ec:	2261      	movs	r2, #97	; 0x61
 80008ee:	701a      	strb	r2, [r3, #0]
	motor2.flag_motor = false;motor2.name = 'b';
 80008f0:	4b8a      	ldr	r3, [pc, #552]	; (8000b1c <main+0x284>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	721a      	strb	r2, [r3, #8]
 80008f6:	4b89      	ldr	r3, [pc, #548]	; (8000b1c <main+0x284>)
 80008f8:	2262      	movs	r2, #98	; 0x62
 80008fa:	701a      	strb	r2, [r3, #0]
	motor3.flag_motor = false;motor3.name = 'c';
 80008fc:	4b88      	ldr	r3, [pc, #544]	; (8000b20 <main+0x288>)
 80008fe:	2200      	movs	r2, #0
 8000900:	721a      	strb	r2, [r3, #8]
 8000902:	4b87      	ldr	r3, [pc, #540]	; (8000b20 <main+0x288>)
 8000904:	2263      	movs	r2, #99	; 0x63
 8000906:	701a      	strb	r2, [r3, #0]
	motor4.flag_motor = false;motor4.name = 'd';
 8000908:	4b86      	ldr	r3, [pc, #536]	; (8000b24 <main+0x28c>)
 800090a:	2200      	movs	r2, #0
 800090c:	721a      	strb	r2, [r3, #8]
 800090e:	4b85      	ldr	r3, [pc, #532]	; (8000b24 <main+0x28c>)
 8000910:	2264      	movs	r2, #100	; 0x64
 8000912:	701a      	strb	r2, [r3, #0]
	motor5.flag_motor = false;motor5.name = 'e';
 8000914:	4b84      	ldr	r3, [pc, #528]	; (8000b28 <main+0x290>)
 8000916:	2200      	movs	r2, #0
 8000918:	721a      	strb	r2, [r3, #8]
 800091a:	4b83      	ldr	r3, [pc, #524]	; (8000b28 <main+0x290>)
 800091c:	2265      	movs	r2, #101	; 0x65
 800091e:	701a      	strb	r2, [r3, #0]
	motor6.flag_motor = false;motor6.name = 'f';
 8000920:	4b82      	ldr	r3, [pc, #520]	; (8000b2c <main+0x294>)
 8000922:	2200      	movs	r2, #0
 8000924:	721a      	strb	r2, [r3, #8]
 8000926:	4b81      	ldr	r3, [pc, #516]	; (8000b2c <main+0x294>)
 8000928:	2266      	movs	r2, #102	; 0x66
 800092a:	701a      	strb	r2, [r3, #0]
	while(1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if(flag_timer1 == true)
 800092c:	4b80      	ldr	r3, [pc, #512]	; (8000b30 <main+0x298>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	f000 8127 	beq.w	8000b84 <main+0x2ec>
		{
			uint8_t length = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			flag_timer1 = false;
 800093c:	4b7c      	ldr	r3, [pc, #496]	; (8000b30 <main+0x298>)
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]
			if(StateUART == DATA_UART_AVAILABLE)
 8000942:	4b7c      	ldr	r3, [pc, #496]	; (8000b34 <main+0x29c>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d020      	beq.n	800098c <main+0xf4>
			{
				length = Data_UART_Receive_Lenght;
 800094a:	4b7b      	ldr	r3, [pc, #492]	; (8000b38 <main+0x2a0>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				Data_UART_Receive_Lenght = 0; // Not Reset - > failed
 8000952:	4b79      	ldr	r3, [pc, #484]	; (8000b38 <main+0x2a0>)
 8000954:	2200      	movs	r2, #0
 8000956:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i <= length; i++)
 8000958:	2300      	movs	r3, #0
 800095a:	643b      	str	r3, [r7, #64]	; 0x40
 800095c:	e00b      	b.n	8000976 <main+0xde>
				{
					Data_UART_Saved[i] = Data_UART_Receive[i];
 800095e:	4a6a      	ldr	r2, [pc, #424]	; (8000b08 <main+0x270>)
 8000960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000962:	4413      	add	r3, r2
 8000964:	7819      	ldrb	r1, [r3, #0]
 8000966:	4a75      	ldr	r2, [pc, #468]	; (8000b3c <main+0x2a4>)
 8000968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800096a:	4413      	add	r3, r2
 800096c:	460a      	mov	r2, r1
 800096e:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i <= length; i++)
 8000970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000972:	3301      	adds	r3, #1
 8000974:	643b      	str	r3, [r7, #64]	; 0x40
 8000976:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800097a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800097c:	429a      	cmp	r2, r3
 800097e:	ddee      	ble.n	800095e <main+0xc6>
				}
				StateUART = DATA_UART_UNAVAILABLE;
 8000980:	4b6c      	ldr	r3, [pc, #432]	; (8000b34 <main+0x29c>)
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]
				Check_OKE = true;
 8000986:	4b6e      	ldr	r3, [pc, #440]	; (8000b40 <main+0x2a8>)
 8000988:	2201      	movs	r2, #1
 800098a:	701a      	strb	r2, [r3, #0]
				// this function return length
			}
			if(Check_OKE == true && Flag_Reset == false)
 800098c:	4b6c      	ldr	r3, [pc, #432]	; (8000b40 <main+0x2a8>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	f000 80e1 	beq.w	8000b58 <main+0x2c0>
 8000996:	4b6b      	ldr	r3, [pc, #428]	; (8000b44 <main+0x2ac>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	f083 0301 	eor.w	r3, r3, #1
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	f000 80d9 	beq.w	8000b58 <main+0x2c0>
			{
				Check_OKE = false;
 80009a6:	4b66      	ldr	r3, [pc, #408]	; (8000b40 <main+0x2a8>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
				uint8_t theta1[6] = {' ', ' ', ' ', ' ', ' ', ' '},
 80009ac:	4a66      	ldr	r2, [pc, #408]	; (8000b48 <main+0x2b0>)
 80009ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009b6:	6018      	str	r0, [r3, #0]
 80009b8:	3304      	adds	r3, #4
 80009ba:	8019      	strh	r1, [r3, #0]
						theta2[6] = {' ', ' ', ' ', ' ', ' ', ' '},
 80009bc:	4a62      	ldr	r2, [pc, #392]	; (8000b48 <main+0x2b0>)
 80009be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009c6:	6018      	str	r0, [r3, #0]
 80009c8:	3304      	adds	r3, #4
 80009ca:	8019      	strh	r1, [r3, #0]
						theta3[6] = {' ', ' ', ' ', ' ', ' ', ' '},
 80009cc:	4a5e      	ldr	r2, [pc, #376]	; (8000b48 <main+0x2b0>)
 80009ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009d6:	6018      	str	r0, [r3, #0]
 80009d8:	3304      	adds	r3, #4
 80009da:	8019      	strh	r1, [r3, #0]
						theta4[6] = {' ', ' ', ' ', ' ', ' ', ' '},
 80009dc:	4a5a      	ldr	r2, [pc, #360]	; (8000b48 <main+0x2b0>)
 80009de:	f107 0320 	add.w	r3, r7, #32
 80009e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009e6:	6018      	str	r0, [r3, #0]
 80009e8:	3304      	adds	r3, #4
 80009ea:	8019      	strh	r1, [r3, #0]
						theta5[6] = {' ', ' ', ' ', ' ', ' ', ' '},
 80009ec:	4a56      	ldr	r2, [pc, #344]	; (8000b48 <main+0x2b0>)
 80009ee:	f107 0318 	add.w	r3, r7, #24
 80009f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009f6:	6018      	str	r0, [r3, #0]
 80009f8:	3304      	adds	r3, #4
 80009fa:	8019      	strh	r1, [r3, #0]
						theta6[6] = {' ', ' ', ' ', ' ', ' ', ' '};
 80009fc:	4a52      	ldr	r2, [pc, #328]	; (8000b48 <main+0x2b0>)
 80009fe:	f107 0310 	add.w	r3, r7, #16
 8000a02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a06:	6018      	str	r0, [r3, #0]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	8019      	strh	r1, [r3, #0]
				// Function handles (checked)
				Split_String_UART(Data_UART_Saved, length, theta1, theta2, theta3, theta4, theta5, theta6);
 8000a0c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000a10:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000a14:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8000a18:	f107 0310 	add.w	r3, r7, #16
 8000a1c:	9303      	str	r3, [sp, #12]
 8000a1e:	f107 0318 	add.w	r3, r7, #24
 8000a22:	9302      	str	r3, [sp, #8]
 8000a24:	f107 0320 	add.w	r3, r7, #32
 8000a28:	9301      	str	r3, [sp, #4]
 8000a2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a2e:	9300      	str	r3, [sp, #0]
 8000a30:	4603      	mov	r3, r0
 8000a32:	4842      	ldr	r0, [pc, #264]	; (8000b3c <main+0x2a4>)
 8000a34:	f004 f932 	bl	8004c9c <Split_String_UART>

				// Send 6 massage CAN (checked)
				TX_CAN_HEADER.StdId = 0x001; // Node 1
 8000a38:	4b44      	ldr	r3, [pc, #272]	; (8000b4c <main+0x2b4>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	601a      	str	r2, [r3, #0]
				HAL_CAN_AddTxMessage(&hcan1, &TX_CAN_HEADER, theta1, &TxMailBox);
 8000a3e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000a42:	4b43      	ldr	r3, [pc, #268]	; (8000b50 <main+0x2b8>)
 8000a44:	4941      	ldr	r1, [pc, #260]	; (8000b4c <main+0x2b4>)
 8000a46:	4831      	ldr	r0, [pc, #196]	; (8000b0c <main+0x274>)
 8000a48:	f000 ff78 	bl	800193c <HAL_CAN_AddTxMessage>
				delay_us(300);
 8000a4c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a50:	f7ff fda2 	bl	8000598 <delay_us>
				TX_CAN_HEADER.StdId = 0x002;// Node 2
 8000a54:	4b3d      	ldr	r3, [pc, #244]	; (8000b4c <main+0x2b4>)
 8000a56:	2202      	movs	r2, #2
 8000a58:	601a      	str	r2, [r3, #0]
				HAL_CAN_AddTxMessage(&hcan1, &TX_CAN_HEADER, theta2, &TxMailBox);
 8000a5a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000a5e:	4b3c      	ldr	r3, [pc, #240]	; (8000b50 <main+0x2b8>)
 8000a60:	493a      	ldr	r1, [pc, #232]	; (8000b4c <main+0x2b4>)
 8000a62:	482a      	ldr	r0, [pc, #168]	; (8000b0c <main+0x274>)
 8000a64:	f000 ff6a 	bl	800193c <HAL_CAN_AddTxMessage>
				delay_us(300);
 8000a68:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a6c:	f7ff fd94 	bl	8000598 <delay_us>
				TX_CAN_HEADER.StdId = 0x004;// Node 3
 8000a70:	4b36      	ldr	r3, [pc, #216]	; (8000b4c <main+0x2b4>)
 8000a72:	2204      	movs	r2, #4
 8000a74:	601a      	str	r2, [r3, #0]
				HAL_CAN_AddTxMessage(&hcan1, &TX_CAN_HEADER, theta3, &TxMailBox);
 8000a76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000a7a:	4b35      	ldr	r3, [pc, #212]	; (8000b50 <main+0x2b8>)
 8000a7c:	4933      	ldr	r1, [pc, #204]	; (8000b4c <main+0x2b4>)
 8000a7e:	4823      	ldr	r0, [pc, #140]	; (8000b0c <main+0x274>)
 8000a80:	f000 ff5c 	bl	800193c <HAL_CAN_AddTxMessage>
				delay_us(300);
 8000a84:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a88:	f7ff fd86 	bl	8000598 <delay_us>
				TX_CAN_HEADER.StdId = 0x008;// Node 4
 8000a8c:	4b2f      	ldr	r3, [pc, #188]	; (8000b4c <main+0x2b4>)
 8000a8e:	2208      	movs	r2, #8
 8000a90:	601a      	str	r2, [r3, #0]
				HAL_CAN_AddTxMessage(&hcan1, &TX_CAN_HEADER, theta4, &TxMailBox);
 8000a92:	f107 0220 	add.w	r2, r7, #32
 8000a96:	4b2e      	ldr	r3, [pc, #184]	; (8000b50 <main+0x2b8>)
 8000a98:	492c      	ldr	r1, [pc, #176]	; (8000b4c <main+0x2b4>)
 8000a9a:	481c      	ldr	r0, [pc, #112]	; (8000b0c <main+0x274>)
 8000a9c:	f000 ff4e 	bl	800193c <HAL_CAN_AddTxMessage>
				delay_us(300);
 8000aa0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000aa4:	f7ff fd78 	bl	8000598 <delay_us>
				TX_CAN_HEADER.StdId = 0x010;// Node 5
 8000aa8:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <main+0x2b4>)
 8000aaa:	2210      	movs	r2, #16
 8000aac:	601a      	str	r2, [r3, #0]
				HAL_CAN_AddTxMessage(&hcan1, &TX_CAN_HEADER, theta5, &TxMailBox);
 8000aae:	f107 0218 	add.w	r2, r7, #24
 8000ab2:	4b27      	ldr	r3, [pc, #156]	; (8000b50 <main+0x2b8>)
 8000ab4:	4925      	ldr	r1, [pc, #148]	; (8000b4c <main+0x2b4>)
 8000ab6:	4815      	ldr	r0, [pc, #84]	; (8000b0c <main+0x274>)
 8000ab8:	f000 ff40 	bl	800193c <HAL_CAN_AddTxMessage>
				delay_us(300);
 8000abc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000ac0:	f7ff fd6a 	bl	8000598 <delay_us>
				TX_CAN_HEADER.StdId = 0x020;// Node 6
 8000ac4:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <main+0x2b4>)
 8000ac6:	2220      	movs	r2, #32
 8000ac8:	601a      	str	r2, [r3, #0]
				HAL_CAN_AddTxMessage(&hcan1, &TX_CAN_HEADER, theta6, &TxMailBox);
 8000aca:	f107 0210 	add.w	r2, r7, #16
 8000ace:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <main+0x2b8>)
 8000ad0:	491e      	ldr	r1, [pc, #120]	; (8000b4c <main+0x2b4>)
 8000ad2:	480e      	ldr	r0, [pc, #56]	; (8000b0c <main+0x274>)
 8000ad4:	f000 ff32 	bl	800193c <HAL_CAN_AddTxMessage>
				delay_us(300);
 8000ad8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000adc:	f7ff fd5c 	bl	8000598 <delay_us>

				//=======================SET RUN SYNCHRONOUS

				TX_CAN_HEADER.StdId = 0x000;
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <main+0x2b4>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
				uint8_t Start_6_motor[8] = {'s', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
 8000ae6:	4a1b      	ldr	r2, [pc, #108]	; (8000b54 <main+0x2bc>)
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000af0:	e883 0003 	stmia.w	r3, {r0, r1}
				HAL_CAN_AddTxMessage(&hcan1, &TX_CAN_HEADER, Start_6_motor, &TxMailBox);
 8000af4:	f107 0208 	add.w	r2, r7, #8
 8000af8:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <main+0x2b8>)
 8000afa:	4914      	ldr	r1, [pc, #80]	; (8000b4c <main+0x2b4>)
 8000afc:	4803      	ldr	r0, [pc, #12]	; (8000b0c <main+0x274>)
 8000afe:	f000 ff1d 	bl	800193c <HAL_CAN_AddTxMessage>
			{
 8000b02:	e03f      	b.n	8000b84 <main+0x2ec>
 8000b04:	2000020c 	.word	0x2000020c
 8000b08:	20000250 	.word	0x20000250
 8000b0c:	20000154 	.word	0x20000154
 8000b10:	2000017c 	.word	0x2000017c
 8000b14:	200001c4 	.word	0x200001c4
 8000b18:	2000010c 	.word	0x2000010c
 8000b1c:	20000118 	.word	0x20000118
 8000b20:	20000124 	.word	0x20000124
 8000b24:	20000130 	.word	0x20000130
 8000b28:	2000013c 	.word	0x2000013c
 8000b2c:	20000148 	.word	0x20000148
 8000b30:	200002aa 	.word	0x200002aa
 8000b34:	200002a7 	.word	0x200002a7
 8000b38:	2000027b 	.word	0x2000027b
 8000b3c:	2000027c 	.word	0x2000027c
 8000b40:	200002a8 	.word	0x200002a8
 8000b44:	200002a9 	.word	0x200002a9
 8000b48:	080059b0 	.word	0x080059b0
 8000b4c:	200000a4 	.word	0x200000a4
 8000b50:	20000100 	.word	0x20000100
 8000b54:	080059b8 	.word	0x080059b8
			}
			else if (Flag_Reset == true) //(checked)
 8000b58:	4b2c      	ldr	r3, [pc, #176]	; (8000c0c <main+0x374>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d011      	beq.n	8000b84 <main+0x2ec>
			{
				Flag_Reset = false;
 8000b60:	4b2a      	ldr	r3, [pc, #168]	; (8000c0c <main+0x374>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
				//----------------------------- Message reset----------------------
				TX_CAN_HEADER.StdId = 0x000;
 8000b66:	4b2a      	ldr	r3, [pc, #168]	; (8000c10 <main+0x378>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
				uint8_t Start_6_motor[8] = {'r', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
 8000b6c:	4a29      	ldr	r2, [pc, #164]	; (8000c14 <main+0x37c>)
 8000b6e:	463b      	mov	r3, r7
 8000b70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b74:	e883 0003 	stmia.w	r3, {r0, r1}
				HAL_CAN_AddTxMessage(&hcan1, &TX_CAN_HEADER, Start_6_motor, &TxMailBox);
 8000b78:	463a      	mov	r2, r7
 8000b7a:	4b27      	ldr	r3, [pc, #156]	; (8000c18 <main+0x380>)
 8000b7c:	4924      	ldr	r1, [pc, #144]	; (8000c10 <main+0x378>)
 8000b7e:	4827      	ldr	r0, [pc, #156]	; (8000c1c <main+0x384>)
 8000b80:	f000 fedc 	bl	800193c <HAL_CAN_AddTxMessage>
			}
		}
		if(motor1.flag_motor == true && motor2.flag_motor == true && motor3.flag_motor == true && motor4.flag_motor == true&& motor5.flag_motor == true && motor6.flag_motor == true)
 8000b84:	4b26      	ldr	r3, [pc, #152]	; (8000c20 <main+0x388>)
 8000b86:	7a1b      	ldrb	r3, [r3, #8]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	f43f aecf 	beq.w	800092c <main+0x94>
 8000b8e:	4b25      	ldr	r3, [pc, #148]	; (8000c24 <main+0x38c>)
 8000b90:	7a1b      	ldrb	r3, [r3, #8]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f43f aeca 	beq.w	800092c <main+0x94>
 8000b98:	4b23      	ldr	r3, [pc, #140]	; (8000c28 <main+0x390>)
 8000b9a:	7a1b      	ldrb	r3, [r3, #8]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	f43f aec5 	beq.w	800092c <main+0x94>
 8000ba2:	4b22      	ldr	r3, [pc, #136]	; (8000c2c <main+0x394>)
 8000ba4:	7a1b      	ldrb	r3, [r3, #8]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f43f aec0 	beq.w	800092c <main+0x94>
 8000bac:	4b20      	ldr	r3, [pc, #128]	; (8000c30 <main+0x398>)
 8000bae:	7a1b      	ldrb	r3, [r3, #8]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	f43f aebb 	beq.w	800092c <main+0x94>
 8000bb6:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <main+0x39c>)
 8000bb8:	7a1b      	ldrb	r3, [r3, #8]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f43f aeb6 	beq.w	800092c <main+0x94>
//		if(motor1.flag_motor == true && motor2.flag_motor == true && motor3.flag_motor == true && motor4.flag_motor == true)
		{
			motor1.flag_motor = false;
 8000bc0:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <main+0x388>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	721a      	strb	r2, [r3, #8]
			motor2.flag_motor = false;
 8000bc6:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <main+0x38c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	721a      	strb	r2, [r3, #8]
			motor3.flag_motor = false;
 8000bcc:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <main+0x390>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	721a      	strb	r2, [r3, #8]
			motor4.flag_motor = false;
 8000bd2:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <main+0x394>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	721a      	strb	r2, [r3, #8]
			motor5.flag_motor = false;
 8000bd8:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <main+0x398>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	721a      	strb	r2, [r3, #8]
			motor6.flag_motor = false;
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <main+0x39c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	721a      	strb	r2, [r3, #8]

			Handles_UART_6_motor(motor1.data, motor2.data, motor3.data, motor4.data, motor5.data, motor6.data, Data_encoder);
 8000be4:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <main+0x3a0>)
 8000be6:	9302      	str	r3, [sp, #8]
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <main+0x3a4>)
 8000bea:	9301      	str	r3, [sp, #4]
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <main+0x3a8>)
 8000bee:	9300      	str	r3, [sp, #0]
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <main+0x3ac>)
 8000bf2:	4a15      	ldr	r2, [pc, #84]	; (8000c48 <main+0x3b0>)
 8000bf4:	4915      	ldr	r1, [pc, #84]	; (8000c4c <main+0x3b4>)
 8000bf6:	4816      	ldr	r0, [pc, #88]	; (8000c50 <main+0x3b8>)
 8000bf8:	f004 f924 	bl	8004e44 <Handles_UART_6_motor>

			HAL_UART_Transmit(&huart4, Data_encoder, 43, 5);
 8000bfc:	2305      	movs	r3, #5
 8000bfe:	222b      	movs	r2, #43	; 0x2b
 8000c00:	490d      	ldr	r1, [pc, #52]	; (8000c38 <main+0x3a0>)
 8000c02:	4814      	ldr	r0, [pc, #80]	; (8000c54 <main+0x3bc>)
 8000c04:	f003 f81f 	bl	8003c46 <HAL_UART_Transmit>
		if(flag_timer1 == true)
 8000c08:	e690      	b.n	800092c <main+0x94>
 8000c0a:	bf00      	nop
 8000c0c:	200002a9 	.word	0x200002a9
 8000c10:	200000a4 	.word	0x200000a4
 8000c14:	080059c0 	.word	0x080059c0
 8000c18:	20000100 	.word	0x20000100
 8000c1c:	20000154 	.word	0x20000154
 8000c20:	2000010c 	.word	0x2000010c
 8000c24:	20000118 	.word	0x20000118
 8000c28:	20000124 	.word	0x20000124
 8000c2c:	20000130 	.word	0x20000130
 8000c30:	2000013c 	.word	0x2000013c
 8000c34:	20000148 	.word	0x20000148
 8000c38:	20000000 	.word	0x20000000
 8000c3c:	20000149 	.word	0x20000149
 8000c40:	2000013d 	.word	0x2000013d
 8000c44:	20000131 	.word	0x20000131
 8000c48:	20000125 	.word	0x20000125
 8000c4c:	20000119 	.word	0x20000119
 8000c50:	2000010d 	.word	0x2000010d
 8000c54:	2000020c 	.word	0x2000020c

08000c58 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b094      	sub	sp, #80	; 0x50
 8000c5c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5e:	f107 0320 	add.w	r3, r7, #32
 8000c62:	2230      	movs	r2, #48	; 0x30
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f004 fa12 	bl	8005090 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c6c:	f107 030c 	add.w	r3, r7, #12
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	4b28      	ldr	r3, [pc, #160]	; (8000d24 <SystemClock_Config+0xcc>)
 8000c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c84:	4a27      	ldr	r2, [pc, #156]	; (8000d24 <SystemClock_Config+0xcc>)
 8000c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8c:	4b25      	ldr	r3, [pc, #148]	; (8000d24 <SystemClock_Config+0xcc>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c98:	2300      	movs	r3, #0
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <SystemClock_Config+0xd0>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a21      	ldr	r2, [pc, #132]	; (8000d28 <SystemClock_Config+0xd0>)
 8000ca2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca6:	6013      	str	r3, [r2, #0]
 8000ca8:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <SystemClock_Config+0xd0>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cc2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000cc8:	2308      	movs	r3, #8
 8000cca:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000ccc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000cd0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cd6:	2307      	movs	r3, #7
 8000cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cda:	f107 0320 	add.w	r3, r7, #32
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f001 fde2 	bl	80028a8 <HAL_RCC_OscConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <SystemClock_Config+0x96>
	{
		Error_Handler();
 8000cea:	f000 f9bf 	bl	800106c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cee:	230f      	movs	r3, #15
 8000cf0:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cfa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cfe:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d04:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d06:	f107 030c 	add.w	r3, r7, #12
 8000d0a:	2105      	movs	r1, #5
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f002 f843 	bl	8002d98 <HAL_RCC_ClockConfig>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8000d18:	f000 f9a8 	bl	800106c <Error_Handler>
	}
}
 8000d1c:	bf00      	nop
 8000d1e:	3750      	adds	r7, #80	; 0x50
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40007000 	.word	0x40007000

08000d2c <MX_CAN1_Init>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN1_Init 0 */
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */
	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8000d30:	4b30      	ldr	r3, [pc, #192]	; (8000df4 <MX_CAN1_Init+0xc8>)
 8000d32:	4a31      	ldr	r2, [pc, #196]	; (8000df8 <MX_CAN1_Init+0xcc>)
 8000d34:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 7;
 8000d36:	4b2f      	ldr	r3, [pc, #188]	; (8000df4 <MX_CAN1_Init+0xc8>)
 8000d38:	2207      	movs	r2, #7
 8000d3a:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000d3c:	4b2d      	ldr	r3, [pc, #180]	; (8000df4 <MX_CAN1_Init+0xc8>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d42:	4b2c      	ldr	r3, [pc, #176]	; (8000df4 <MX_CAN1_Init+0xc8>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000d48:	4b2a      	ldr	r3, [pc, #168]	; (8000df4 <MX_CAN1_Init+0xc8>)
 8000d4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d4e:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000d50:	4b28      	ldr	r3, [pc, #160]	; (8000df4 <MX_CAN1_Init+0xc8>)
 8000d52:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000d56:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000d58:	4b26      	ldr	r3, [pc, #152]	; (8000df4 <MX_CAN1_Init+0xc8>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000d5e:	4b25      	ldr	r3, [pc, #148]	; (8000df4 <MX_CAN1_Init+0xc8>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000d64:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <MX_CAN1_Init+0xc8>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000d6a:	4b22      	ldr	r3, [pc, #136]	; (8000df4 <MX_CAN1_Init+0xc8>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000d70:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <MX_CAN1_Init+0xc8>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000d76:	4b1f      	ldr	r3, [pc, #124]	; (8000df4 <MX_CAN1_Init+0xc8>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000d7c:	481d      	ldr	r0, [pc, #116]	; (8000df4 <MX_CAN1_Init+0xc8>)
 8000d7e:	f000 fbbd 	bl	80014fc <HAL_CAN_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_CAN1_Init+0x60>
	{
		Error_Handler();
 8000d88:	f000 f970 	bl	800106c <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */
	/*----------------------- Configuration CAN Filter---------------
	 * */
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <MX_CAN1_Init+0xd0>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	621a      	str	r2, [r3, #32]
	canfilterconfig.FilterBank = 1; // which filter bank to use from the assigned ones
 8000d92:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <MX_CAN1_Init+0xd0>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	615a      	str	r2, [r3, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000d98:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <MX_CAN1_Init+0xd0>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	611a      	str	r2, [r3, #16]
	canfilterconfig.FilterIdHigh = 0x0000 << 5;
 8000d9e:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <MX_CAN1_Init+0xd0>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 8000da4:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <MX_CAN1_Init+0xd0>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	605a      	str	r2, [r3, #4]
	canfilterconfig.FilterMaskIdHigh = 0xff00 << 5;
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_CAN1_Init+0xd0>)
 8000dac:	f44f 12ff 	mov.w	r2, #2088960	; 0x1fe000
 8000db0:	609a      	str	r2, [r3, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8000db2:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <MX_CAN1_Init+0xd0>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	60da      	str	r2, [r3, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000db8:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <MX_CAN1_Init+0xd0>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	619a      	str	r2, [r3, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_CAN1_Init+0xd0>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	61da      	str	r2, [r3, #28]
	canfilterconfig.SlaveStartFilterBank = 14;
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <MX_CAN1_Init+0xd0>)
 8000dc6:	220e      	movs	r2, #14
 8000dc8:	625a      	str	r2, [r3, #36]	; 0x24
	if(HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig) != HAL_OK) // add
 8000dca:	490c      	ldr	r1, [pc, #48]	; (8000dfc <MX_CAN1_Init+0xd0>)
 8000dcc:	4809      	ldr	r0, [pc, #36]	; (8000df4 <MX_CAN1_Init+0xc8>)
 8000dce:	f000 fc91 	bl	80016f4 <HAL_CAN_ConfigFilter>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_CAN1_Init+0xb0>
	{
		Error_Handler();
 8000dd8:	f000 f948 	bl	800106c <Error_Handler>
	}
	/* -----------------------------CAN Transmit and Interrrupts ----------------------------- */
	TX_CAN_HEADER.RTR=CAN_RTR_DATA; //Remote transmission request = Data frame
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <MX_CAN1_Init+0xd4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
	TX_CAN_HEADER.IDE=CAN_ID_STD; 	 //Standard Id (11 bits for the identifier)
 8000de2:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <MX_CAN1_Init+0xd4>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
	TX_CAN_HEADER.DLC=6;
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <MX_CAN1_Init+0xd4>)
 8000dea:	2206      	movs	r2, #6
 8000dec:	611a      	str	r2, [r3, #16]
	/* USER CODE END CAN1_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000154 	.word	0x20000154
 8000df8:	40006400 	.word	0x40006400
 8000dfc:	200000d8 	.word	0x200000d8
 8000e00:	200000a4 	.word	0x200000a4

08000e04 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e0a:	f107 0308 	add.w	r3, r7, #8
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e18:	463b      	mov	r3, r7
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000e20:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <MX_TIM1_Init+0x98>)
 8000e22:	4a1f      	ldr	r2, [pc, #124]	; (8000ea0 <MX_TIM1_Init+0x9c>)
 8000e24:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 83;
 8000e26:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <MX_TIM1_Init+0x98>)
 8000e28:	2253      	movs	r2, #83	; 0x53
 8000e2a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2c:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <MX_TIM1_Init+0x98>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 19999;
 8000e32:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <MX_TIM1_Init+0x98>)
 8000e34:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000e38:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3a:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <MX_TIM1_Init+0x98>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000e40:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <MX_TIM1_Init+0x98>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <MX_TIM1_Init+0x98>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e4c:	4813      	ldr	r0, [pc, #76]	; (8000e9c <MX_TIM1_Init+0x98>)
 8000e4e:	f002 f9c3 	bl	80031d8 <HAL_TIM_Base_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM1_Init+0x58>
	{
		Error_Handler();
 8000e58:	f000 f908 	bl	800106c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e60:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e62:	f107 0308 	add.w	r3, r7, #8
 8000e66:	4619      	mov	r1, r3
 8000e68:	480c      	ldr	r0, [pc, #48]	; (8000e9c <MX_TIM1_Init+0x98>)
 8000e6a:	f002 fbe5 	bl	8003638 <HAL_TIM_ConfigClockSource>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM1_Init+0x74>
	{
		Error_Handler();
 8000e74:	f000 f8fa 	bl	800106c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e80:	463b      	mov	r3, r7
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_TIM1_Init+0x98>)
 8000e86:	f002 fe01 	bl	8003a8c <HAL_TIMEx_MasterConfigSynchronization>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM1_Init+0x90>
	{
		Error_Handler();
 8000e90:	f000 f8ec 	bl	800106c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000e94:	bf00      	nop
 8000e96:	3718      	adds	r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	2000017c 	.word	0x2000017c
 8000ea0:	40010000 	.word	0x40010000

08000ea4 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eaa:	f107 0308 	add.w	r3, r7, #8
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb8:	463b      	mov	r3, r7
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000ec0:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <MX_TIM2_Init+0x94>)
 8000ec2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ec6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 167;
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <MX_TIM2_Init+0x94>)
 8000eca:	22a7      	movs	r2, #167	; 0xa7
 8000ecc:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ece:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <MX_TIM2_Init+0x94>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8000ed4:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <MX_TIM2_Init+0x94>)
 8000ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8000eda:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000edc:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <MX_TIM2_Init+0x94>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <MX_TIM2_Init+0x94>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ee8:	4813      	ldr	r0, [pc, #76]	; (8000f38 <MX_TIM2_Init+0x94>)
 8000eea:	f002 f975 	bl	80031d8 <HAL_TIM_Base_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM2_Init+0x54>
	{
		Error_Handler();
 8000ef4:	f000 f8ba 	bl	800106c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000efc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000efe:	f107 0308 	add.w	r3, r7, #8
 8000f02:	4619      	mov	r1, r3
 8000f04:	480c      	ldr	r0, [pc, #48]	; (8000f38 <MX_TIM2_Init+0x94>)
 8000f06:	f002 fb97 	bl	8003638 <HAL_TIM_ConfigClockSource>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM2_Init+0x70>
	{
		Error_Handler();
 8000f10:	f000 f8ac 	bl	800106c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f14:	2300      	movs	r3, #0
 8000f16:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_TIM2_Init+0x94>)
 8000f22:	f002 fdb3 	bl	8003a8c <HAL_TIMEx_MasterConfigSynchronization>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM2_Init+0x8c>
	{
		Error_Handler();
 8000f2c:	f000 f89e 	bl	800106c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000f30:	bf00      	nop
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200001c4 	.word	0x200001c4

08000f3c <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_UART4_Init+0x4c>)
 8000f42:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <MX_UART4_Init+0x50>)
 8000f44:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <MX_UART4_Init+0x4c>)
 8000f48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f4c:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <MX_UART4_Init+0x4c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <MX_UART4_Init+0x4c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <MX_UART4_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <MX_UART4_Init+0x4c>)
 8000f62:	220c      	movs	r2, #12
 8000f64:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <MX_UART4_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <MX_UART4_Init+0x4c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_UART4_Init+0x4c>)
 8000f74:	f002 fe1a 	bl	8003bac <HAL_UART_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_UART4_Init+0x46>
	{
		Error_Handler();
 8000f7e:	f000 f875 	bl	800106c <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	2000020c 	.word	0x2000020c
 8000f8c:	40004c00 	.word	0x40004c00

08000f90 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	4b2e      	ldr	r3, [pc, #184]	; (8001064 <MX_GPIO_Init+0xd4>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a2d      	ldr	r2, [pc, #180]	; (8001064 <MX_GPIO_Init+0xd4>)
 8000fb0:	f043 0304 	orr.w	r3, r3, #4
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b2b      	ldr	r3, [pc, #172]	; (8001064 <MX_GPIO_Init+0xd4>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0304 	and.w	r3, r3, #4
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b27      	ldr	r3, [pc, #156]	; (8001064 <MX_GPIO_Init+0xd4>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a26      	ldr	r2, [pc, #152]	; (8001064 <MX_GPIO_Init+0xd4>)
 8000fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b24      	ldr	r3, [pc, #144]	; (8001064 <MX_GPIO_Init+0xd4>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	4b20      	ldr	r3, [pc, #128]	; (8001064 <MX_GPIO_Init+0xd4>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a1f      	ldr	r2, [pc, #124]	; (8001064 <MX_GPIO_Init+0xd4>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <MX_GPIO_Init+0xd4>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	4b19      	ldr	r3, [pc, #100]	; (8001064 <MX_GPIO_Init+0xd4>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a18      	ldr	r2, [pc, #96]	; (8001064 <MX_GPIO_Init+0xd4>)
 8001004:	f043 0308 	orr.w	r3, r3, #8
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b16      	ldr	r3, [pc, #88]	; (8001064 <MX_GPIO_Init+0xd4>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0308 	and.w	r3, r3, #8
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	603b      	str	r3, [r7, #0]
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_GPIO_Init+0xd4>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a11      	ldr	r2, [pc, #68]	; (8001064 <MX_GPIO_Init+0xd4>)
 8001020:	f043 0302 	orr.w	r3, r3, #2
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_GPIO_Init+0xd4>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, xanhl_Pin|cam_Pin|do_Pin|xanhd_Pin, GPIO_PIN_RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001038:	480b      	ldr	r0, [pc, #44]	; (8001068 <MX_GPIO_Init+0xd8>)
 800103a:	f001 fc01 	bl	8002840 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : xanhl_Pin cam_Pin do_Pin xanhd_Pin */
	GPIO_InitStruct.Pin = xanhl_Pin|cam_Pin|do_Pin|xanhd_Pin;
 800103e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001042:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	2301      	movs	r3, #1
 8001046:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4619      	mov	r1, r3
 8001056:	4804      	ldr	r0, [pc, #16]	; (8001068 <MX_GPIO_Init+0xd8>)
 8001058:	f001 fa56 	bl	8002508 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800105c:	bf00      	nop
 800105e:	3728      	adds	r7, #40	; 0x28
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40023800 	.word	0x40023800
 8001068:	40020c00 	.word	0x40020c00

0800106c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* USER CODE END Error_Handler_Debug */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <HAL_MspInit+0x5c>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	4a13      	ldr	r2, [pc, #76]	; (80010d8 <HAL_MspInit+0x5c>)
 800108c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001090:	6453      	str	r3, [r2, #68]	; 0x44
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <HAL_MspInit+0x5c>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	603b      	str	r3, [r7, #0]
 80010a2:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <HAL_MspInit+0x5c>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	4a0c      	ldr	r2, [pc, #48]	; (80010d8 <HAL_MspInit+0x5c>)
 80010a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ac:	6413      	str	r3, [r2, #64]	; 0x40
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <HAL_MspInit+0x5c>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 80010ba:	2006      	movs	r0, #6
 80010bc:	f001 f950 	bl	8002360 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 1, 0);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2101      	movs	r1, #1
 80010c4:	2005      	movs	r0, #5
 80010c6:	f001 f956 	bl	8002376 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80010ca:	2005      	movs	r0, #5
 80010cc:	f001 f96f 	bl	80023ae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40023800 	.word	0x40023800

080010dc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a1d      	ldr	r2, [pc, #116]	; (8001170 <HAL_CAN_MspInit+0x94>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d134      	bne.n	8001168 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <HAL_CAN_MspInit+0x98>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	4a1b      	ldr	r2, [pc, #108]	; (8001174 <HAL_CAN_MspInit+0x98>)
 8001108:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800110c:	6413      	str	r3, [r2, #64]	; 0x40
 800110e:	4b19      	ldr	r3, [pc, #100]	; (8001174 <HAL_CAN_MspInit+0x98>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <HAL_CAN_MspInit+0x98>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a14      	ldr	r2, [pc, #80]	; (8001174 <HAL_CAN_MspInit+0x98>)
 8001124:	f043 0302 	orr.w	r3, r3, #2
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_CAN_MspInit+0x98>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001136:	f44f 7340 	mov.w	r3, #768	; 0x300
 800113a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001140:	2301      	movs	r3, #1
 8001142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001144:	2303      	movs	r3, #3
 8001146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001148:	2309      	movs	r3, #9
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	4809      	ldr	r0, [pc, #36]	; (8001178 <HAL_CAN_MspInit+0x9c>)
 8001154:	f001 f9d8 	bl	8002508 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 8001158:	2200      	movs	r2, #0
 800115a:	2101      	movs	r1, #1
 800115c:	2014      	movs	r0, #20
 800115e:	f001 f90a 	bl	8002376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001162:	2014      	movs	r0, #20
 8001164:	f001 f923 	bl	80023ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001168:	bf00      	nop
 800116a:	3728      	adds	r7, #40	; 0x28
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40006400 	.word	0x40006400
 8001174:	40023800 	.word	0x40023800
 8001178:	40020400 	.word	0x40020400

0800117c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a18      	ldr	r2, [pc, #96]	; (80011ec <HAL_TIM_Base_MspInit+0x70>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d116      	bne.n	80011bc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <HAL_TIM_Base_MspInit+0x74>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	4a16      	ldr	r2, [pc, #88]	; (80011f0 <HAL_TIM_Base_MspInit+0x74>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6453      	str	r3, [r2, #68]	; 0x44
 800119e:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <HAL_TIM_Base_MspInit+0x74>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2101      	movs	r1, #1
 80011ae:	2019      	movs	r0, #25
 80011b0:	f001 f8e1 	bl	8002376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80011b4:	2019      	movs	r0, #25
 80011b6:	f001 f8fa 	bl	80023ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011ba:	e012      	b.n	80011e2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011c4:	d10d      	bne.n	80011e2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <HAL_TIM_Base_MspInit+0x74>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	4a08      	ldr	r2, [pc, #32]	; (80011f0 <HAL_TIM_Base_MspInit+0x74>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6413      	str	r3, [r2, #64]	; 0x40
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_TIM_Base_MspInit+0x74>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
}
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40010000 	.word	0x40010000
 80011f0:	40023800 	.word	0x40023800

080011f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a1d      	ldr	r2, [pc, #116]	; (8001288 <HAL_UART_MspInit+0x94>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d134      	bne.n	8001280 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	4b1c      	ldr	r3, [pc, #112]	; (800128c <HAL_UART_MspInit+0x98>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	4a1b      	ldr	r2, [pc, #108]	; (800128c <HAL_UART_MspInit+0x98>)
 8001220:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
 8001226:	4b19      	ldr	r3, [pc, #100]	; (800128c <HAL_UART_MspInit+0x98>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <HAL_UART_MspInit+0x98>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a14      	ldr	r2, [pc, #80]	; (800128c <HAL_UART_MspInit+0x98>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_UART_MspInit+0x98>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800124e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001260:	2308      	movs	r3, #8
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4619      	mov	r1, r3
 800126a:	4809      	ldr	r0, [pc, #36]	; (8001290 <HAL_UART_MspInit+0x9c>)
 800126c:	f001 f94c 	bl	8002508 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001270:	2200      	movs	r2, #0
 8001272:	2100      	movs	r1, #0
 8001274:	2034      	movs	r0, #52	; 0x34
 8001276:	f001 f87e 	bl	8002376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800127a:	2034      	movs	r0, #52	; 0x34
 800127c:	f001 f897 	bl	80023ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001280:	bf00      	nop
 8001282:	3728      	adds	r7, #40	; 0x28
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40004c00 	.word	0x40004c00
 800128c:	40023800 	.word	0x40023800
 8001290:	40020800 	.word	0x40020800

08001294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <NMI_Handler+0x4>

0800129a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129e:	e7fe      	b.n	800129e <HardFault_Handler+0x4>

080012a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <MemManage_Handler+0x4>

080012a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012aa:	e7fe      	b.n	80012aa <BusFault_Handler+0x4>

080012ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <UsageFault_Handler+0x4>

080012b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e0:	f000 f8ec 	bl	80014bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012fc:	4802      	ldr	r0, [pc, #8]	; (8001308 <CAN1_RX0_IRQHandler+0x10>)
 80012fe:	f000 fd30 	bl	8001d62 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000154 	.word	0x20000154

0800130c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001310:	4802      	ldr	r0, [pc, #8]	; (800131c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001312:	f002 f889 	bl	8003428 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	2000017c 	.word	0x2000017c

08001320 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001324:	4802      	ldr	r0, [pc, #8]	; (8001330 <UART4_IRQHandler+0x10>)
 8001326:	f002 fd51 	bl	8003dcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	2000020c 	.word	0x2000020c

08001334 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800133c:	4a14      	ldr	r2, [pc, #80]	; (8001390 <_sbrk+0x5c>)
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <_sbrk+0x60>)
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001348:	4b13      	ldr	r3, [pc, #76]	; (8001398 <_sbrk+0x64>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d102      	bne.n	8001356 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <_sbrk+0x64>)
 8001352:	4a12      	ldr	r2, [pc, #72]	; (800139c <_sbrk+0x68>)
 8001354:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <_sbrk+0x64>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	429a      	cmp	r2, r3
 8001362:	d207      	bcs.n	8001374 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001364:	f003 fe9c 	bl	80050a0 <__errno>
 8001368:	4603      	mov	r3, r0
 800136a:	220c      	movs	r2, #12
 800136c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800136e:	f04f 33ff 	mov.w	r3, #4294967295
 8001372:	e009      	b.n	8001388 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <_sbrk+0x64>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800137a:	4b07      	ldr	r3, [pc, #28]	; (8001398 <_sbrk+0x64>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	4a05      	ldr	r2, [pc, #20]	; (8001398 <_sbrk+0x64>)
 8001384:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001386:	68fb      	ldr	r3, [r7, #12]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20020000 	.word	0x20020000
 8001394:	00000400 	.word	0x00000400
 8001398:	200002ac 	.word	0x200002ac
 800139c:	20000400 	.word	0x20000400

080013a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <SystemInit+0x20>)
 80013a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013aa:	4a05      	ldr	r2, [pc, #20]	; (80013c0 <SystemInit+0x20>)
 80013ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013c8:	480d      	ldr	r0, [pc, #52]	; (8001400 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013ca:	490e      	ldr	r1, [pc, #56]	; (8001404 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013cc:	4a0e      	ldr	r2, [pc, #56]	; (8001408 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d0:	e002      	b.n	80013d8 <LoopCopyDataInit>

080013d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013d6:	3304      	adds	r3, #4

080013d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013dc:	d3f9      	bcc.n	80013d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013de:	4a0b      	ldr	r2, [pc, #44]	; (800140c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013e0:	4c0b      	ldr	r4, [pc, #44]	; (8001410 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e4:	e001      	b.n	80013ea <LoopFillZerobss>

080013e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e8:	3204      	adds	r2, #4

080013ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013ec:	d3fb      	bcc.n	80013e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013ee:	f7ff ffd7 	bl	80013a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013f2:	f003 fe5b 	bl	80050ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013f6:	f7ff fa4f 	bl	8000898 <main>
  bx  lr    
 80013fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001404:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001408:	08005a28 	.word	0x08005a28
  ldr r2, =_sbss
 800140c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001410:	200003fc 	.word	0x200003fc

08001414 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001414:	e7fe      	b.n	8001414 <ADC_IRQHandler>
	...

08001418 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800141c:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <HAL_Init+0x40>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a0d      	ldr	r2, [pc, #52]	; (8001458 <HAL_Init+0x40>)
 8001422:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001426:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <HAL_Init+0x40>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <HAL_Init+0x40>)
 800142e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001432:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <HAL_Init+0x40>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a07      	ldr	r2, [pc, #28]	; (8001458 <HAL_Init+0x40>)
 800143a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800143e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001440:	2003      	movs	r0, #3
 8001442:	f000 ff8d 	bl	8002360 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001446:	2000      	movs	r0, #0
 8001448:	f000 f808 	bl	800145c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800144c:	f7ff fe16 	bl	800107c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40023c00 	.word	0x40023c00

0800145c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <HAL_InitTick+0x54>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <HAL_InitTick+0x58>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4619      	mov	r1, r3
 800146e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001472:	fbb3 f3f1 	udiv	r3, r3, r1
 8001476:	fbb2 f3f3 	udiv	r3, r2, r3
 800147a:	4618      	mov	r0, r3
 800147c:	f000 ffa5 	bl	80023ca <HAL_SYSTICK_Config>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e00e      	b.n	80014a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b0f      	cmp	r3, #15
 800148e:	d80a      	bhi.n	80014a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001490:	2200      	movs	r2, #0
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	f000 ff6d 	bl	8002376 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800149c:	4a06      	ldr	r2, [pc, #24]	; (80014b8 <HAL_InitTick+0x5c>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	e000      	b.n	80014a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	2000002c 	.word	0x2000002c
 80014b4:	20000034 	.word	0x20000034
 80014b8:	20000030 	.word	0x20000030

080014bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_IncTick+0x20>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_IncTick+0x24>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <HAL_IncTick+0x24>)
 80014ce:	6013      	str	r3, [r2, #0]
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	20000034 	.word	0x20000034
 80014e0:	200002b0 	.word	0x200002b0

080014e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return uwTick;
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <HAL_GetTick+0x14>)
 80014ea:	681b      	ldr	r3, [r3, #0]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	200002b0 	.word	0x200002b0

080014fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e0ed      	b.n	80016ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d102      	bne.n	8001520 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff fdde 	bl	80010dc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f042 0201 	orr.w	r2, r2, #1
 800152e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001530:	f7ff ffd8 	bl	80014e4 <HAL_GetTick>
 8001534:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001536:	e012      	b.n	800155e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001538:	f7ff ffd4 	bl	80014e4 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b0a      	cmp	r3, #10
 8001544:	d90b      	bls.n	800155e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2205      	movs	r2, #5
 8001556:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e0c5      	b.n	80016ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0e5      	beq.n	8001538 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 0202 	bic.w	r2, r2, #2
 800157a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800157c:	f7ff ffb2 	bl	80014e4 <HAL_GetTick>
 8001580:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001582:	e012      	b.n	80015aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001584:	f7ff ffae 	bl	80014e4 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b0a      	cmp	r3, #10
 8001590:	d90b      	bls.n	80015aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001596:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2205      	movs	r2, #5
 80015a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e09f      	b.n	80016ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1e5      	bne.n	8001584 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	7e1b      	ldrb	r3, [r3, #24]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d108      	bne.n	80015d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	e007      	b.n	80015e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	7e5b      	ldrb	r3, [r3, #25]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d108      	bne.n	80015fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	e007      	b.n	800160c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800160a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	7e9b      	ldrb	r3, [r3, #26]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d108      	bne.n	8001626 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f042 0220 	orr.w	r2, r2, #32
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	e007      	b.n	8001636 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0220 	bic.w	r2, r2, #32
 8001634:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	7edb      	ldrb	r3, [r3, #27]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d108      	bne.n	8001650 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 0210 	bic.w	r2, r2, #16
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	e007      	b.n	8001660 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 0210 	orr.w	r2, r2, #16
 800165e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	7f1b      	ldrb	r3, [r3, #28]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d108      	bne.n	800167a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f042 0208 	orr.w	r2, r2, #8
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	e007      	b.n	800168a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 0208 	bic.w	r2, r2, #8
 8001688:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	7f5b      	ldrb	r3, [r3, #29]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d108      	bne.n	80016a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f042 0204 	orr.w	r2, r2, #4
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	e007      	b.n	80016b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0204 	bic.w	r2, r2, #4
 80016b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	431a      	orrs	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	ea42 0103 	orr.w	r1, r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	1e5a      	subs	r2, r3, #1
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	430a      	orrs	r2, r1
 80016d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b087      	sub	sp, #28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 3020 	ldrb.w	r3, [r3, #32]
 800170a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800170c:	7cfb      	ldrb	r3, [r7, #19]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d003      	beq.n	800171a <HAL_CAN_ConfigFilter+0x26>
 8001712:	7cfb      	ldrb	r3, [r7, #19]
 8001714:	2b02      	cmp	r3, #2
 8001716:	f040 80be 	bne.w	8001896 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800171a:	4b65      	ldr	r3, [pc, #404]	; (80018b0 <HAL_CAN_ConfigFilter+0x1bc>)
 800171c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001724:	f043 0201 	orr.w	r2, r3, #1
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001734:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001748:	021b      	lsls	r3, r3, #8
 800174a:	431a      	orrs	r2, r3
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	f003 031f 	and.w	r3, r3, #31
 800175a:	2201      	movs	r2, #1
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	43db      	mvns	r3, r3
 800176c:	401a      	ands	r2, r3
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d123      	bne.n	80017c4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43db      	mvns	r3, r3
 8001786:	401a      	ands	r2, r3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800179e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	3248      	adds	r2, #72	; 0x48
 80017a4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017b8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017ba:	6979      	ldr	r1, [r7, #20]
 80017bc:	3348      	adds	r3, #72	; 0x48
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	440b      	add	r3, r1
 80017c2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d122      	bne.n	8001812 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	431a      	orrs	r2, r3
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80017ec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	3248      	adds	r2, #72	; 0x48
 80017f2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001806:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001808:	6979      	ldr	r1, [r7, #20]
 800180a:	3348      	adds	r3, #72	; 0x48
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	440b      	add	r3, r1
 8001810:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d109      	bne.n	800182e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	43db      	mvns	r3, r3
 8001824:	401a      	ands	r2, r3
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800182c:	e007      	b.n	800183e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	431a      	orrs	r2, r3
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d109      	bne.n	800185a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	43db      	mvns	r3, r3
 8001850:	401a      	ands	r2, r3
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001858:	e007      	b.n	800186a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	431a      	orrs	r2, r3
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d107      	bne.n	8001882 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	431a      	orrs	r2, r3
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001888:	f023 0201 	bic.w	r2, r3, #1
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001892:	2300      	movs	r3, #0
 8001894:	e006      	b.n	80018a4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
  }
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	371c      	adds	r7, #28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	40006400 	.word	0x40006400

080018b4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d12e      	bne.n	8001926 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2202      	movs	r2, #2
 80018cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 0201 	bic.w	r2, r2, #1
 80018de:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80018e0:	f7ff fe00 	bl	80014e4 <HAL_GetTick>
 80018e4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80018e6:	e012      	b.n	800190e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018e8:	f7ff fdfc 	bl	80014e4 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b0a      	cmp	r3, #10
 80018f4:	d90b      	bls.n	800190e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2205      	movs	r2, #5
 8001906:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e012      	b.n	8001934 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1e5      	bne.n	80018e8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	e006      	b.n	8001934 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
  }
}
 8001934:	4618      	mov	r0, r3
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	; 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
 8001948:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001950:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800195a:	7ffb      	ldrb	r3, [r7, #31]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d003      	beq.n	8001968 <HAL_CAN_AddTxMessage+0x2c>
 8001960:	7ffb      	ldrb	r3, [r7, #31]
 8001962:	2b02      	cmp	r3, #2
 8001964:	f040 80b8 	bne.w	8001ad8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10a      	bne.n	8001988 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001978:	2b00      	cmp	r3, #0
 800197a:	d105      	bne.n	8001988 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 80a0 	beq.w	8001ac8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	0e1b      	lsrs	r3, r3, #24
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	2b02      	cmp	r3, #2
 8001996:	d907      	bls.n	80019a8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e09e      	b.n	8001ae6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80019a8:	2201      	movs	r2, #1
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	409a      	lsls	r2, r3
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10d      	bne.n	80019d6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80019c4:	68f9      	ldr	r1, [r7, #12]
 80019c6:	6809      	ldr	r1, [r1, #0]
 80019c8:	431a      	orrs	r2, r3
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	3318      	adds	r3, #24
 80019ce:	011b      	lsls	r3, r3, #4
 80019d0:	440b      	add	r3, r1
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	e00f      	b.n	80019f6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019e0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019e6:	68f9      	ldr	r1, [r7, #12]
 80019e8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80019ea:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	3318      	adds	r3, #24
 80019f0:	011b      	lsls	r3, r3, #4
 80019f2:	440b      	add	r3, r1
 80019f4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6819      	ldr	r1, [r3, #0]
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	691a      	ldr	r2, [r3, #16]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	3318      	adds	r3, #24
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	440b      	add	r3, r1
 8001a06:	3304      	adds	r3, #4
 8001a08:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	7d1b      	ldrb	r3, [r3, #20]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d111      	bne.n	8001a36 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	3318      	adds	r3, #24
 8001a1a:	011b      	lsls	r3, r3, #4
 8001a1c:	4413      	add	r3, r2
 8001a1e:	3304      	adds	r3, #4
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	6811      	ldr	r1, [r2, #0]
 8001a26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	3318      	adds	r3, #24
 8001a2e:	011b      	lsls	r3, r3, #4
 8001a30:	440b      	add	r3, r1
 8001a32:	3304      	adds	r3, #4
 8001a34:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3307      	adds	r3, #7
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	061a      	lsls	r2, r3, #24
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3306      	adds	r3, #6
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	041b      	lsls	r3, r3, #16
 8001a46:	431a      	orrs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3305      	adds	r3, #5
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	021b      	lsls	r3, r3, #8
 8001a50:	4313      	orrs	r3, r2
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	3204      	adds	r2, #4
 8001a56:	7812      	ldrb	r2, [r2, #0]
 8001a58:	4610      	mov	r0, r2
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	6811      	ldr	r1, [r2, #0]
 8001a5e:	ea43 0200 	orr.w	r2, r3, r0
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	011b      	lsls	r3, r3, #4
 8001a66:	440b      	add	r3, r1
 8001a68:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001a6c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3303      	adds	r3, #3
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	061a      	lsls	r2, r3, #24
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	3302      	adds	r3, #2
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	041b      	lsls	r3, r3, #16
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3301      	adds	r3, #1
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	021b      	lsls	r3, r3, #8
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	7812      	ldrb	r2, [r2, #0]
 8001a8e:	4610      	mov	r0, r2
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	6811      	ldr	r1, [r2, #0]
 8001a94:	ea43 0200 	orr.w	r2, r3, r0
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	011b      	lsls	r3, r3, #4
 8001a9c:	440b      	add	r3, r1
 8001a9e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001aa2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	3318      	adds	r3, #24
 8001aac:	011b      	lsls	r3, r3, #4
 8001aae:	4413      	add	r3, r2
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	6811      	ldr	r1, [r2, #0]
 8001ab6:	f043 0201 	orr.w	r2, r3, #1
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	3318      	adds	r3, #24
 8001abe:	011b      	lsls	r3, r3, #4
 8001ac0:	440b      	add	r3, r1
 8001ac2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	e00e      	b.n	8001ae6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e006      	b.n	8001ae6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
  }
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3724      	adds	r7, #36	; 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001af2:	b480      	push	{r7}
 8001af4:	b087      	sub	sp, #28
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b06:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b08:	7dfb      	ldrb	r3, [r7, #23]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d003      	beq.n	8001b16 <HAL_CAN_GetRxMessage+0x24>
 8001b0e:	7dfb      	ldrb	r3, [r7, #23]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	f040 80f3 	bne.w	8001cfc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d10e      	bne.n	8001b3a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d116      	bne.n	8001b58 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e0e7      	b.n	8001d0a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d107      	bne.n	8001b58 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e0d8      	b.n	8001d0a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	331b      	adds	r3, #27
 8001b60:	011b      	lsls	r3, r3, #4
 8001b62:	4413      	add	r3, r2
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0204 	and.w	r2, r3, #4
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10c      	bne.n	8001b90 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	331b      	adds	r3, #27
 8001b7e:	011b      	lsls	r3, r3, #4
 8001b80:	4413      	add	r3, r2
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	0d5b      	lsrs	r3, r3, #21
 8001b86:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	e00b      	b.n	8001ba8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	331b      	adds	r3, #27
 8001b98:	011b      	lsls	r3, r3, #4
 8001b9a:	4413      	add	r3, r2
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	08db      	lsrs	r3, r3, #3
 8001ba0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	331b      	adds	r3, #27
 8001bb0:	011b      	lsls	r3, r3, #4
 8001bb2:	4413      	add	r3, r2
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0202 	and.w	r2, r3, #2
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	331b      	adds	r3, #27
 8001bc6:	011b      	lsls	r3, r3, #4
 8001bc8:	4413      	add	r3, r2
 8001bca:	3304      	adds	r3, #4
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 020f 	and.w	r2, r3, #15
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	331b      	adds	r3, #27
 8001bde:	011b      	lsls	r3, r3, #4
 8001be0:	4413      	add	r3, r2
 8001be2:	3304      	adds	r3, #4
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	0a1b      	lsrs	r3, r3, #8
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	331b      	adds	r3, #27
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	0c1b      	lsrs	r3, r3, #16
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	4413      	add	r3, r2
 8001c10:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	011b      	lsls	r3, r3, #4
 8001c24:	4413      	add	r3, r2
 8001c26:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	0a1a      	lsrs	r2, r3, #8
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	3301      	adds	r3, #1
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	011b      	lsls	r3, r3, #4
 8001c3e:	4413      	add	r3, r2
 8001c40:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	0c1a      	lsrs	r2, r3, #16
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	3302      	adds	r3, #2
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	011b      	lsls	r3, r3, #4
 8001c58:	4413      	add	r3, r2
 8001c5a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	0e1a      	lsrs	r2, r3, #24
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	3303      	adds	r3, #3
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	011b      	lsls	r3, r3, #4
 8001c72:	4413      	add	r3, r2
 8001c74:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	011b      	lsls	r3, r3, #4
 8001c8a:	4413      	add	r3, r2
 8001c8c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	0a1a      	lsrs	r2, r3, #8
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	3305      	adds	r3, #5
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	011b      	lsls	r3, r3, #4
 8001ca4:	4413      	add	r3, r2
 8001ca6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	0c1a      	lsrs	r2, r3, #16
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	3306      	adds	r3, #6
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	011b      	lsls	r3, r3, #4
 8001cbe:	4413      	add	r3, r2
 8001cc0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	0e1a      	lsrs	r2, r3, #24
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	3307      	adds	r3, #7
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d108      	bne.n	8001ce8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68da      	ldr	r2, [r3, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f042 0220 	orr.w	r2, r2, #32
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	e007      	b.n	8001cf8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691a      	ldr	r2, [r3, #16]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0220 	orr.w	r2, r2, #32
 8001cf6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	e006      	b.n	8001d0a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
  }
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	371c      	adds	r7, #28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b085      	sub	sp, #20
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d26:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d002      	beq.n	8001d34 <HAL_CAN_ActivateNotification+0x1e>
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d109      	bne.n	8001d48 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6959      	ldr	r1, [r3, #20]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001d44:	2300      	movs	r3, #0
 8001d46:	e006      	b.n	8001d56 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
  }
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b08a      	sub	sp, #40	; 0x28
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d07c      	beq.n	8001ea2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d023      	beq.n	8001dfa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2201      	movs	r2, #1
 8001db8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f983 	bl	80020d0 <HAL_CAN_TxMailbox0CompleteCallback>
 8001dca:	e016      	b.n	8001dfa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d004      	beq.n	8001de0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dde:	e00c      	b.n	8001dfa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d004      	beq.n	8001df4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
 8001df2:	e002      	b.n	8001dfa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f989 	bl	800210c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d024      	beq.n	8001e4e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e0c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f963 	bl	80020e4 <HAL_CAN_TxMailbox1CompleteCallback>
 8001e1e:	e016      	b.n	8001e4e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d004      	beq.n	8001e34 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
 8001e32:	e00c      	b.n	8001e4e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d004      	beq.n	8001e48 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
 8001e46:	e002      	b.n	8001e4e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f969 	bl	8002120 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d024      	beq.n	8001ea2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e60:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f943 	bl	80020f8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001e72:	e016      	b.n	8001ea2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d004      	beq.n	8001e88 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
 8001e86:	e00c      	b.n	8001ea2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d004      	beq.n	8001e9c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9a:	e002      	b.n	8001ea2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f949 	bl	8002134 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00c      	beq.n	8001ec6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	f003 0310 	and.w	r3, r3, #16
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d007      	beq.n	8001ec6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2210      	movs	r2, #16
 8001ec4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00b      	beq.n	8001ee8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d006      	beq.n	8001ee8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2208      	movs	r2, #8
 8001ee0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f930 	bl	8002148 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001ee8:	6a3b      	ldr	r3, [r7, #32]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d009      	beq.n	8001f06 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d002      	beq.n	8001f06 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7fe fbad 	bl	8000660 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001f06:	6a3b      	ldr	r3, [r7, #32]
 8001f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00c      	beq.n	8001f2a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	f003 0310 	and.w	r3, r3, #16
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d007      	beq.n	8001f2a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2210      	movs	r2, #16
 8001f28:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001f2a:	6a3b      	ldr	r3, [r7, #32]
 8001f2c:	f003 0320 	and.w	r3, r3, #32
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00b      	beq.n	8001f4c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d006      	beq.n	8001f4c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2208      	movs	r2, #8
 8001f44:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f912 	bl	8002170 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
 8001f4e:	f003 0310 	and.w	r3, r3, #16
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d009      	beq.n	8001f6a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d002      	beq.n	8001f6a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f8f9 	bl	800215c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00b      	beq.n	8001f8c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d006      	beq.n	8001f8c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2210      	movs	r2, #16
 8001f84:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f8fc 	bl	8002184 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00b      	beq.n	8001fae <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	f003 0308 	and.w	r3, r3, #8
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d006      	beq.n	8001fae <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2208      	movs	r2, #8
 8001fa6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f8f5 	bl	8002198 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001fae:	6a3b      	ldr	r3, [r7, #32]
 8001fb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d07b      	beq.n	80020b0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d072      	beq.n	80020a8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d008      	beq.n	8001fde <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001fde:	6a3b      	ldr	r3, [r7, #32]
 8001fe0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d008      	beq.n	8001ffa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	f043 0302 	orr.w	r3, r3, #2
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ffa:	6a3b      	ldr	r3, [r7, #32]
 8001ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002000:	2b00      	cmp	r3, #0
 8002002:	d008      	beq.n	8002016 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	f043 0304 	orr.w	r3, r3, #4
 8002014:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800201c:	2b00      	cmp	r3, #0
 800201e:	d043      	beq.n	80020a8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002026:	2b00      	cmp	r3, #0
 8002028:	d03e      	beq.n	80020a8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002030:	2b60      	cmp	r3, #96	; 0x60
 8002032:	d02b      	beq.n	800208c <HAL_CAN_IRQHandler+0x32a>
 8002034:	2b60      	cmp	r3, #96	; 0x60
 8002036:	d82e      	bhi.n	8002096 <HAL_CAN_IRQHandler+0x334>
 8002038:	2b50      	cmp	r3, #80	; 0x50
 800203a:	d022      	beq.n	8002082 <HAL_CAN_IRQHandler+0x320>
 800203c:	2b50      	cmp	r3, #80	; 0x50
 800203e:	d82a      	bhi.n	8002096 <HAL_CAN_IRQHandler+0x334>
 8002040:	2b40      	cmp	r3, #64	; 0x40
 8002042:	d019      	beq.n	8002078 <HAL_CAN_IRQHandler+0x316>
 8002044:	2b40      	cmp	r3, #64	; 0x40
 8002046:	d826      	bhi.n	8002096 <HAL_CAN_IRQHandler+0x334>
 8002048:	2b30      	cmp	r3, #48	; 0x30
 800204a:	d010      	beq.n	800206e <HAL_CAN_IRQHandler+0x30c>
 800204c:	2b30      	cmp	r3, #48	; 0x30
 800204e:	d822      	bhi.n	8002096 <HAL_CAN_IRQHandler+0x334>
 8002050:	2b10      	cmp	r3, #16
 8002052:	d002      	beq.n	800205a <HAL_CAN_IRQHandler+0x2f8>
 8002054:	2b20      	cmp	r3, #32
 8002056:	d005      	beq.n	8002064 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002058:	e01d      	b.n	8002096 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	f043 0308 	orr.w	r3, r3, #8
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002062:	e019      	b.n	8002098 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	f043 0310 	orr.w	r3, r3, #16
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800206c:	e014      	b.n	8002098 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	f043 0320 	orr.w	r3, r3, #32
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002076:	e00f      	b.n	8002098 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002080:	e00a      	b.n	8002098 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800208a:	e005      	b.n	8002098 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002094:	e000      	b.n	8002098 <HAL_CAN_IRQHandler+0x336>
            break;
 8002096:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699a      	ldr	r2, [r3, #24]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80020a6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2204      	movs	r2, #4
 80020ae:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d008      	beq.n	80020c8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f872 	bl	80021ac <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80020c8:	bf00      	nop
 80020ca:	3728      	adds	r7, #40	; 0x28
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021d0:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <__NVIC_SetPriorityGrouping+0x44>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021dc:	4013      	ands	r3, r2
 80021de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021f2:	4a04      	ldr	r2, [pc, #16]	; (8002204 <__NVIC_SetPriorityGrouping+0x44>)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	60d3      	str	r3, [r2, #12]
}
 80021f8:	bf00      	nop
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800220c:	4b04      	ldr	r3, [pc, #16]	; (8002220 <__NVIC_GetPriorityGrouping+0x18>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	0a1b      	lsrs	r3, r3, #8
 8002212:	f003 0307 	and.w	r3, r3, #7
}
 8002216:	4618      	mov	r0, r3
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800222e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002232:	2b00      	cmp	r3, #0
 8002234:	db0b      	blt.n	800224e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	f003 021f 	and.w	r2, r3, #31
 800223c:	4907      	ldr	r1, [pc, #28]	; (800225c <__NVIC_EnableIRQ+0x38>)
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	095b      	lsrs	r3, r3, #5
 8002244:	2001      	movs	r0, #1
 8002246:	fa00 f202 	lsl.w	r2, r0, r2
 800224a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	e000e100 	.word	0xe000e100

08002260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	6039      	str	r1, [r7, #0]
 800226a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800226c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002270:	2b00      	cmp	r3, #0
 8002272:	db0a      	blt.n	800228a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	b2da      	uxtb	r2, r3
 8002278:	490c      	ldr	r1, [pc, #48]	; (80022ac <__NVIC_SetPriority+0x4c>)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	0112      	lsls	r2, r2, #4
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	440b      	add	r3, r1
 8002284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002288:	e00a      	b.n	80022a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4908      	ldr	r1, [pc, #32]	; (80022b0 <__NVIC_SetPriority+0x50>)
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	3b04      	subs	r3, #4
 8002298:	0112      	lsls	r2, r2, #4
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	440b      	add	r3, r1
 800229e:	761a      	strb	r2, [r3, #24]
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	e000e100 	.word	0xe000e100
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b089      	sub	sp, #36	; 0x24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f1c3 0307 	rsb	r3, r3, #7
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	bf28      	it	cs
 80022d2:	2304      	movcs	r3, #4
 80022d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3304      	adds	r3, #4
 80022da:	2b06      	cmp	r3, #6
 80022dc:	d902      	bls.n	80022e4 <NVIC_EncodePriority+0x30>
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	3b03      	subs	r3, #3
 80022e2:	e000      	b.n	80022e6 <NVIC_EncodePriority+0x32>
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43da      	mvns	r2, r3
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	401a      	ands	r2, r3
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	fa01 f303 	lsl.w	r3, r1, r3
 8002306:	43d9      	mvns	r1, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800230c:	4313      	orrs	r3, r2
         );
}
 800230e:	4618      	mov	r0, r3
 8002310:	3724      	adds	r7, #36	; 0x24
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
	...

0800231c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3b01      	subs	r3, #1
 8002328:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800232c:	d301      	bcc.n	8002332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800232e:	2301      	movs	r3, #1
 8002330:	e00f      	b.n	8002352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002332:	4a0a      	ldr	r2, [pc, #40]	; (800235c <SysTick_Config+0x40>)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3b01      	subs	r3, #1
 8002338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800233a:	210f      	movs	r1, #15
 800233c:	f04f 30ff 	mov.w	r0, #4294967295
 8002340:	f7ff ff8e 	bl	8002260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002344:	4b05      	ldr	r3, [pc, #20]	; (800235c <SysTick_Config+0x40>)
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800234a:	4b04      	ldr	r3, [pc, #16]	; (800235c <SysTick_Config+0x40>)
 800234c:	2207      	movs	r2, #7
 800234e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	e000e010 	.word	0xe000e010

08002360 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff ff29 	bl	80021c0 <__NVIC_SetPriorityGrouping>
}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002376:	b580      	push	{r7, lr}
 8002378:	b086      	sub	sp, #24
 800237a:	af00      	add	r7, sp, #0
 800237c:	4603      	mov	r3, r0
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
 8002382:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002388:	f7ff ff3e 	bl	8002208 <__NVIC_GetPriorityGrouping>
 800238c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68b9      	ldr	r1, [r7, #8]
 8002392:	6978      	ldr	r0, [r7, #20]
 8002394:	f7ff ff8e 	bl	80022b4 <NVIC_EncodePriority>
 8002398:	4602      	mov	r2, r0
 800239a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800239e:	4611      	mov	r1, r2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff ff5d 	bl	8002260 <__NVIC_SetPriority>
}
 80023a6:	bf00      	nop
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ff31 	bl	8002224 <__NVIC_EnableIRQ>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff ffa2 	bl	800231c <SysTick_Config>
 80023d8:	4603      	mov	r3, r0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b084      	sub	sp, #16
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023f0:	f7ff f878 	bl	80014e4 <HAL_GetTick>
 80023f4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d008      	beq.n	8002414 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2280      	movs	r2, #128	; 0x80
 8002406:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e052      	b.n	80024ba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0216 	bic.w	r2, r2, #22
 8002422:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	695a      	ldr	r2, [r3, #20]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002432:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	2b00      	cmp	r3, #0
 800243a:	d103      	bne.n	8002444 <HAL_DMA_Abort+0x62>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002440:	2b00      	cmp	r3, #0
 8002442:	d007      	beq.n	8002454 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0208 	bic.w	r2, r2, #8
 8002452:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0201 	bic.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002464:	e013      	b.n	800248e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002466:	f7ff f83d 	bl	80014e4 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b05      	cmp	r3, #5
 8002472:	d90c      	bls.n	800248e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2220      	movs	r2, #32
 8002478:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2203      	movs	r2, #3
 800247e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e015      	b.n	80024ba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1e4      	bne.n	8002466 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a0:	223f      	movs	r2, #63	; 0x3f
 80024a2:	409a      	lsls	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d004      	beq.n	80024e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2280      	movs	r2, #128	; 0x80
 80024da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e00c      	b.n	80024fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2205      	movs	r2, #5
 80024e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0201 	bic.w	r2, r2, #1
 80024f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
	...

08002508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002508:	b480      	push	{r7}
 800250a:	b089      	sub	sp, #36	; 0x24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002516:	2300      	movs	r3, #0
 8002518:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800251a:	2300      	movs	r3, #0
 800251c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
 8002522:	e16b      	b.n	80027fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002524:	2201      	movs	r2, #1
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4013      	ands	r3, r2
 8002536:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	429a      	cmp	r2, r3
 800253e:	f040 815a 	bne.w	80027f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	2b01      	cmp	r3, #1
 800254c:	d005      	beq.n	800255a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002556:	2b02      	cmp	r3, #2
 8002558:	d130      	bne.n	80025bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	2203      	movs	r2, #3
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002590:	2201      	movs	r2, #1
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 0201 	and.w	r2, r3, #1
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 0303 	and.w	r3, r3, #3
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	d017      	beq.n	80025f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	2203      	movs	r2, #3
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d123      	bne.n	800264c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	08da      	lsrs	r2, r3, #3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3208      	adds	r2, #8
 800260c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002610:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	220f      	movs	r2, #15
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	08da      	lsrs	r2, r3, #3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3208      	adds	r2, #8
 8002646:	69b9      	ldr	r1, [r7, #24]
 8002648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	2203      	movs	r2, #3
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 0203 	and.w	r2, r3, #3
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80b4 	beq.w	80027f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	4b60      	ldr	r3, [pc, #384]	; (8002814 <HAL_GPIO_Init+0x30c>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	4a5f      	ldr	r2, [pc, #380]	; (8002814 <HAL_GPIO_Init+0x30c>)
 8002698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800269c:	6453      	str	r3, [r2, #68]	; 0x44
 800269e:	4b5d      	ldr	r3, [pc, #372]	; (8002814 <HAL_GPIO_Init+0x30c>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026aa:	4a5b      	ldr	r2, [pc, #364]	; (8002818 <HAL_GPIO_Init+0x310>)
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	089b      	lsrs	r3, r3, #2
 80026b0:	3302      	adds	r3, #2
 80026b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	220f      	movs	r2, #15
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a52      	ldr	r2, [pc, #328]	; (800281c <HAL_GPIO_Init+0x314>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d02b      	beq.n	800272e <HAL_GPIO_Init+0x226>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a51      	ldr	r2, [pc, #324]	; (8002820 <HAL_GPIO_Init+0x318>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d025      	beq.n	800272a <HAL_GPIO_Init+0x222>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a50      	ldr	r2, [pc, #320]	; (8002824 <HAL_GPIO_Init+0x31c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d01f      	beq.n	8002726 <HAL_GPIO_Init+0x21e>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a4f      	ldr	r2, [pc, #316]	; (8002828 <HAL_GPIO_Init+0x320>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d019      	beq.n	8002722 <HAL_GPIO_Init+0x21a>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a4e      	ldr	r2, [pc, #312]	; (800282c <HAL_GPIO_Init+0x324>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d013      	beq.n	800271e <HAL_GPIO_Init+0x216>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a4d      	ldr	r2, [pc, #308]	; (8002830 <HAL_GPIO_Init+0x328>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d00d      	beq.n	800271a <HAL_GPIO_Init+0x212>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a4c      	ldr	r2, [pc, #304]	; (8002834 <HAL_GPIO_Init+0x32c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d007      	beq.n	8002716 <HAL_GPIO_Init+0x20e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a4b      	ldr	r2, [pc, #300]	; (8002838 <HAL_GPIO_Init+0x330>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d101      	bne.n	8002712 <HAL_GPIO_Init+0x20a>
 800270e:	2307      	movs	r3, #7
 8002710:	e00e      	b.n	8002730 <HAL_GPIO_Init+0x228>
 8002712:	2308      	movs	r3, #8
 8002714:	e00c      	b.n	8002730 <HAL_GPIO_Init+0x228>
 8002716:	2306      	movs	r3, #6
 8002718:	e00a      	b.n	8002730 <HAL_GPIO_Init+0x228>
 800271a:	2305      	movs	r3, #5
 800271c:	e008      	b.n	8002730 <HAL_GPIO_Init+0x228>
 800271e:	2304      	movs	r3, #4
 8002720:	e006      	b.n	8002730 <HAL_GPIO_Init+0x228>
 8002722:	2303      	movs	r3, #3
 8002724:	e004      	b.n	8002730 <HAL_GPIO_Init+0x228>
 8002726:	2302      	movs	r3, #2
 8002728:	e002      	b.n	8002730 <HAL_GPIO_Init+0x228>
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <HAL_GPIO_Init+0x228>
 800272e:	2300      	movs	r3, #0
 8002730:	69fa      	ldr	r2, [r7, #28]
 8002732:	f002 0203 	and.w	r2, r2, #3
 8002736:	0092      	lsls	r2, r2, #2
 8002738:	4093      	lsls	r3, r2
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4313      	orrs	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002740:	4935      	ldr	r1, [pc, #212]	; (8002818 <HAL_GPIO_Init+0x310>)
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	089b      	lsrs	r3, r3, #2
 8002746:	3302      	adds	r3, #2
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800274e:	4b3b      	ldr	r3, [pc, #236]	; (800283c <HAL_GPIO_Init+0x334>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	43db      	mvns	r3, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4013      	ands	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002772:	4a32      	ldr	r2, [pc, #200]	; (800283c <HAL_GPIO_Init+0x334>)
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002778:	4b30      	ldr	r3, [pc, #192]	; (800283c <HAL_GPIO_Init+0x334>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800279c:	4a27      	ldr	r2, [pc, #156]	; (800283c <HAL_GPIO_Init+0x334>)
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027a2:	4b26      	ldr	r3, [pc, #152]	; (800283c <HAL_GPIO_Init+0x334>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	43db      	mvns	r3, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4013      	ands	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027c6:	4a1d      	ldr	r2, [pc, #116]	; (800283c <HAL_GPIO_Init+0x334>)
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027cc:	4b1b      	ldr	r3, [pc, #108]	; (800283c <HAL_GPIO_Init+0x334>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	43db      	mvns	r3, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4013      	ands	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027f0:	4a12      	ldr	r2, [pc, #72]	; (800283c <HAL_GPIO_Init+0x334>)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	3301      	adds	r3, #1
 80027fa:	61fb      	str	r3, [r7, #28]
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	2b0f      	cmp	r3, #15
 8002800:	f67f ae90 	bls.w	8002524 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002804:	bf00      	nop
 8002806:	bf00      	nop
 8002808:	3724      	adds	r7, #36	; 0x24
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	40023800 	.word	0x40023800
 8002818:	40013800 	.word	0x40013800
 800281c:	40020000 	.word	0x40020000
 8002820:	40020400 	.word	0x40020400
 8002824:	40020800 	.word	0x40020800
 8002828:	40020c00 	.word	0x40020c00
 800282c:	40021000 	.word	0x40021000
 8002830:	40021400 	.word	0x40021400
 8002834:	40021800 	.word	0x40021800
 8002838:	40021c00 	.word	0x40021c00
 800283c:	40013c00 	.word	0x40013c00

08002840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	807b      	strh	r3, [r7, #2]
 800284c:	4613      	mov	r3, r2
 800284e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002850:	787b      	ldrb	r3, [r7, #1]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002856:	887a      	ldrh	r2, [r7, #2]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800285c:	e003      	b.n	8002866 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800285e:	887b      	ldrh	r3, [r7, #2]
 8002860:	041a      	lsls	r2, r3, #16
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	619a      	str	r2, [r3, #24]
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002872:	b480      	push	{r7}
 8002874:	b085      	sub	sp, #20
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	460b      	mov	r3, r1
 800287c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002884:	887a      	ldrh	r2, [r7, #2]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	4013      	ands	r3, r2
 800288a:	041a      	lsls	r2, r3, #16
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	43d9      	mvns	r1, r3
 8002890:	887b      	ldrh	r3, [r7, #2]
 8002892:	400b      	ands	r3, r1
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	619a      	str	r2, [r3, #24]
}
 800289a:	bf00      	nop
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
	...

080028a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e267      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d075      	beq.n	80029b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028c6:	4b88      	ldr	r3, [pc, #544]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 030c 	and.w	r3, r3, #12
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d00c      	beq.n	80028ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028d2:	4b85      	ldr	r3, [pc, #532]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d112      	bne.n	8002904 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028de:	4b82      	ldr	r3, [pc, #520]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028ea:	d10b      	bne.n	8002904 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ec:	4b7e      	ldr	r3, [pc, #504]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d05b      	beq.n	80029b0 <HAL_RCC_OscConfig+0x108>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d157      	bne.n	80029b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e242      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800290c:	d106      	bne.n	800291c <HAL_RCC_OscConfig+0x74>
 800290e:	4b76      	ldr	r3, [pc, #472]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a75      	ldr	r2, [pc, #468]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	e01d      	b.n	8002958 <HAL_RCC_OscConfig+0xb0>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002924:	d10c      	bne.n	8002940 <HAL_RCC_OscConfig+0x98>
 8002926:	4b70      	ldr	r3, [pc, #448]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a6f      	ldr	r2, [pc, #444]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 800292c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	4b6d      	ldr	r3, [pc, #436]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a6c      	ldr	r2, [pc, #432]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	e00b      	b.n	8002958 <HAL_RCC_OscConfig+0xb0>
 8002940:	4b69      	ldr	r3, [pc, #420]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a68      	ldr	r2, [pc, #416]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	4b66      	ldr	r3, [pc, #408]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a65      	ldr	r2, [pc, #404]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d013      	beq.n	8002988 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002960:	f7fe fdc0 	bl	80014e4 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002968:	f7fe fdbc 	bl	80014e4 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b64      	cmp	r3, #100	; 0x64
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e207      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297a:	4b5b      	ldr	r3, [pc, #364]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0xc0>
 8002986:	e014      	b.n	80029b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002988:	f7fe fdac 	bl	80014e4 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002990:	f7fe fda8 	bl	80014e4 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b64      	cmp	r3, #100	; 0x64
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e1f3      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a2:	4b51      	ldr	r3, [pc, #324]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0xe8>
 80029ae:	e000      	b.n	80029b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d063      	beq.n	8002a86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029be:	4b4a      	ldr	r3, [pc, #296]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 030c 	and.w	r3, r3, #12
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00b      	beq.n	80029e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ca:	4b47      	ldr	r3, [pc, #284]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d11c      	bne.n	8002a10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029d6:	4b44      	ldr	r3, [pc, #272]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d116      	bne.n	8002a10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e2:	4b41      	ldr	r3, [pc, #260]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d005      	beq.n	80029fa <HAL_RCC_OscConfig+0x152>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d001      	beq.n	80029fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e1c7      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fa:	4b3b      	ldr	r3, [pc, #236]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	4937      	ldr	r1, [pc, #220]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a0e:	e03a      	b.n	8002a86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d020      	beq.n	8002a5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a18:	4b34      	ldr	r3, [pc, #208]	; (8002aec <HAL_RCC_OscConfig+0x244>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1e:	f7fe fd61 	bl	80014e4 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a26:	f7fe fd5d 	bl	80014e4 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e1a8      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a38:	4b2b      	ldr	r3, [pc, #172]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f0      	beq.n	8002a26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a44:	4b28      	ldr	r3, [pc, #160]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	4925      	ldr	r1, [pc, #148]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	600b      	str	r3, [r1, #0]
 8002a58:	e015      	b.n	8002a86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a5a:	4b24      	ldr	r3, [pc, #144]	; (8002aec <HAL_RCC_OscConfig+0x244>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a60:	f7fe fd40 	bl	80014e4 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a68:	f7fe fd3c 	bl	80014e4 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e187      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a7a:	4b1b      	ldr	r3, [pc, #108]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d036      	beq.n	8002b00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d016      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a9a:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <HAL_RCC_OscConfig+0x248>)
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa0:	f7fe fd20 	bl	80014e4 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa8:	f7fe fd1c 	bl	80014e4 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e167      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aba:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x200>
 8002ac6:	e01b      	b.n	8002b00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ac8:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <HAL_RCC_OscConfig+0x248>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ace:	f7fe fd09 	bl	80014e4 <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad4:	e00e      	b.n	8002af4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ad6:	f7fe fd05 	bl	80014e4 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d907      	bls.n	8002af4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e150      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	42470000 	.word	0x42470000
 8002af0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af4:	4b88      	ldr	r3, [pc, #544]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1ea      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 8097 	beq.w	8002c3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b12:	4b81      	ldr	r3, [pc, #516]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10f      	bne.n	8002b3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60bb      	str	r3, [r7, #8]
 8002b22:	4b7d      	ldr	r3, [pc, #500]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	4a7c      	ldr	r2, [pc, #496]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b2e:	4b7a      	ldr	r3, [pc, #488]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3e:	4b77      	ldr	r3, [pc, #476]	; (8002d1c <HAL_RCC_OscConfig+0x474>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d118      	bne.n	8002b7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b4a:	4b74      	ldr	r3, [pc, #464]	; (8002d1c <HAL_RCC_OscConfig+0x474>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a73      	ldr	r2, [pc, #460]	; (8002d1c <HAL_RCC_OscConfig+0x474>)
 8002b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b56:	f7fe fcc5 	bl	80014e4 <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b5e:	f7fe fcc1 	bl	80014e4 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e10c      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b70:	4b6a      	ldr	r3, [pc, #424]	; (8002d1c <HAL_RCC_OscConfig+0x474>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0f0      	beq.n	8002b5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d106      	bne.n	8002b92 <HAL_RCC_OscConfig+0x2ea>
 8002b84:	4b64      	ldr	r3, [pc, #400]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b88:	4a63      	ldr	r2, [pc, #396]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b90:	e01c      	b.n	8002bcc <HAL_RCC_OscConfig+0x324>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2b05      	cmp	r3, #5
 8002b98:	d10c      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x30c>
 8002b9a:	4b5f      	ldr	r3, [pc, #380]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9e:	4a5e      	ldr	r2, [pc, #376]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002ba0:	f043 0304 	orr.w	r3, r3, #4
 8002ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba6:	4b5c      	ldr	r3, [pc, #368]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002baa:	4a5b      	ldr	r2, [pc, #364]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb2:	e00b      	b.n	8002bcc <HAL_RCC_OscConfig+0x324>
 8002bb4:	4b58      	ldr	r3, [pc, #352]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb8:	4a57      	ldr	r2, [pc, #348]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002bba:	f023 0301 	bic.w	r3, r3, #1
 8002bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc0:	4b55      	ldr	r3, [pc, #340]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc4:	4a54      	ldr	r2, [pc, #336]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002bc6:	f023 0304 	bic.w	r3, r3, #4
 8002bca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d015      	beq.n	8002c00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd4:	f7fe fc86 	bl	80014e4 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bda:	e00a      	b.n	8002bf2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bdc:	f7fe fc82 	bl	80014e4 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e0cb      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf2:	4b49      	ldr	r3, [pc, #292]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0ee      	beq.n	8002bdc <HAL_RCC_OscConfig+0x334>
 8002bfe:	e014      	b.n	8002c2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c00:	f7fe fc70 	bl	80014e4 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c06:	e00a      	b.n	8002c1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c08:	f7fe fc6c 	bl	80014e4 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e0b5      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c1e:	4b3e      	ldr	r3, [pc, #248]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1ee      	bne.n	8002c08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c2a:	7dfb      	ldrb	r3, [r7, #23]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d105      	bne.n	8002c3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c30:	4b39      	ldr	r3, [pc, #228]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	4a38      	ldr	r2, [pc, #224]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002c36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 80a1 	beq.w	8002d88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c46:	4b34      	ldr	r3, [pc, #208]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 030c 	and.w	r3, r3, #12
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d05c      	beq.n	8002d0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d141      	bne.n	8002cde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5a:	4b31      	ldr	r3, [pc, #196]	; (8002d20 <HAL_RCC_OscConfig+0x478>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c60:	f7fe fc40 	bl	80014e4 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c68:	f7fe fc3c 	bl	80014e4 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e087      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7a:	4b27      	ldr	r3, [pc, #156]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69da      	ldr	r2, [r3, #28]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	019b      	lsls	r3, r3, #6
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9c:	085b      	lsrs	r3, r3, #1
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	041b      	lsls	r3, r3, #16
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca8:	061b      	lsls	r3, r3, #24
 8002caa:	491b      	ldr	r1, [pc, #108]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cb0:	4b1b      	ldr	r3, [pc, #108]	; (8002d20 <HAL_RCC_OscConfig+0x478>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb6:	f7fe fc15 	bl	80014e4 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cbe:	f7fe fc11 	bl	80014e4 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e05c      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd0:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0f0      	beq.n	8002cbe <HAL_RCC_OscConfig+0x416>
 8002cdc:	e054      	b.n	8002d88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cde:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <HAL_RCC_OscConfig+0x478>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fbfe 	bl	80014e4 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cec:	f7fe fbfa 	bl	80014e4 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e045      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cfe:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0x444>
 8002d0a:	e03d      	b.n	8002d88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d107      	bne.n	8002d24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e038      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40007000 	.word	0x40007000
 8002d20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d24:	4b1b      	ldr	r3, [pc, #108]	; (8002d94 <HAL_RCC_OscConfig+0x4ec>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d028      	beq.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d121      	bne.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d11a      	bne.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d54:	4013      	ands	r3, r2
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d111      	bne.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6a:	085b      	lsrs	r3, r3, #1
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d107      	bne.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d001      	beq.n	8002d88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e000      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40023800 	.word	0x40023800

08002d98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0cc      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dac:	4b68      	ldr	r3, [pc, #416]	; (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d90c      	bls.n	8002dd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dba:	4b65      	ldr	r3, [pc, #404]	; (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc2:	4b63      	ldr	r3, [pc, #396]	; (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d001      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e0b8      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d020      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d005      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dec:	4b59      	ldr	r3, [pc, #356]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	4a58      	ldr	r2, [pc, #352]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002df6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e04:	4b53      	ldr	r3, [pc, #332]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	4a52      	ldr	r2, [pc, #328]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e10:	4b50      	ldr	r3, [pc, #320]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	494d      	ldr	r1, [pc, #308]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d044      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d107      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e36:	4b47      	ldr	r3, [pc, #284]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d119      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e07f      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d003      	beq.n	8002e56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d107      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e56:	4b3f      	ldr	r3, [pc, #252]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d109      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e06f      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e66:	4b3b      	ldr	r3, [pc, #236]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e067      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e76:	4b37      	ldr	r3, [pc, #220]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f023 0203 	bic.w	r2, r3, #3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	4934      	ldr	r1, [pc, #208]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e88:	f7fe fb2c 	bl	80014e4 <HAL_GetTick>
 8002e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e90:	f7fe fb28 	bl	80014e4 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e04f      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea6:	4b2b      	ldr	r3, [pc, #172]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 020c 	and.w	r2, r3, #12
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d1eb      	bne.n	8002e90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eb8:	4b25      	ldr	r3, [pc, #148]	; (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d20c      	bcs.n	8002ee0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec6:	4b22      	ldr	r3, [pc, #136]	; (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ece:	4b20      	ldr	r3, [pc, #128]	; (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d001      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e032      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eec:	4b19      	ldr	r3, [pc, #100]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	4916      	ldr	r1, [pc, #88]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d009      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f0a:	4b12      	ldr	r3, [pc, #72]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	490e      	ldr	r1, [pc, #56]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f1e:	f000 f821 	bl	8002f64 <HAL_RCC_GetSysClockFreq>
 8002f22:	4602      	mov	r2, r0
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	091b      	lsrs	r3, r3, #4
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	490a      	ldr	r1, [pc, #40]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002f30:	5ccb      	ldrb	r3, [r1, r3]
 8002f32:	fa22 f303 	lsr.w	r3, r2, r3
 8002f36:	4a09      	ldr	r2, [pc, #36]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f3a:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <HAL_RCC_ClockConfig+0x1c8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fe fa8c 	bl	800145c <HAL_InitTick>

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40023c00 	.word	0x40023c00
 8002f54:	40023800 	.word	0x40023800
 8002f58:	080059cc 	.word	0x080059cc
 8002f5c:	2000002c 	.word	0x2000002c
 8002f60:	20000030 	.word	0x20000030

08002f64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f68:	b094      	sub	sp, #80	; 0x50
 8002f6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	647b      	str	r3, [r7, #68]	; 0x44
 8002f70:	2300      	movs	r3, #0
 8002f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f74:	2300      	movs	r3, #0
 8002f76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f7c:	4b79      	ldr	r3, [pc, #484]	; (8003164 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f003 030c 	and.w	r3, r3, #12
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	d00d      	beq.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x40>
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	f200 80e1 	bhi.w	8003150 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <HAL_RCC_GetSysClockFreq+0x34>
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d003      	beq.n	8002f9e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f96:	e0db      	b.n	8003150 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f98:	4b73      	ldr	r3, [pc, #460]	; (8003168 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f9a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f9c:	e0db      	b.n	8003156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f9e:	4b73      	ldr	r3, [pc, #460]	; (800316c <HAL_RCC_GetSysClockFreq+0x208>)
 8002fa0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fa2:	e0d8      	b.n	8003156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fa4:	4b6f      	ldr	r3, [pc, #444]	; (8003164 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fae:	4b6d      	ldr	r3, [pc, #436]	; (8003164 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d063      	beq.n	8003082 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fba:	4b6a      	ldr	r3, [pc, #424]	; (8003164 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	099b      	lsrs	r3, r3, #6
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fc4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fcc:	633b      	str	r3, [r7, #48]	; 0x30
 8002fce:	2300      	movs	r3, #0
 8002fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8002fd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fd6:	4622      	mov	r2, r4
 8002fd8:	462b      	mov	r3, r5
 8002fda:	f04f 0000 	mov.w	r0, #0
 8002fde:	f04f 0100 	mov.w	r1, #0
 8002fe2:	0159      	lsls	r1, r3, #5
 8002fe4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fe8:	0150      	lsls	r0, r2, #5
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4621      	mov	r1, r4
 8002ff0:	1a51      	subs	r1, r2, r1
 8002ff2:	6139      	str	r1, [r7, #16]
 8002ff4:	4629      	mov	r1, r5
 8002ff6:	eb63 0301 	sbc.w	r3, r3, r1
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	f04f 0300 	mov.w	r3, #0
 8003004:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003008:	4659      	mov	r1, fp
 800300a:	018b      	lsls	r3, r1, #6
 800300c:	4651      	mov	r1, sl
 800300e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003012:	4651      	mov	r1, sl
 8003014:	018a      	lsls	r2, r1, #6
 8003016:	4651      	mov	r1, sl
 8003018:	ebb2 0801 	subs.w	r8, r2, r1
 800301c:	4659      	mov	r1, fp
 800301e:	eb63 0901 	sbc.w	r9, r3, r1
 8003022:	f04f 0200 	mov.w	r2, #0
 8003026:	f04f 0300 	mov.w	r3, #0
 800302a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800302e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003032:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003036:	4690      	mov	r8, r2
 8003038:	4699      	mov	r9, r3
 800303a:	4623      	mov	r3, r4
 800303c:	eb18 0303 	adds.w	r3, r8, r3
 8003040:	60bb      	str	r3, [r7, #8]
 8003042:	462b      	mov	r3, r5
 8003044:	eb49 0303 	adc.w	r3, r9, r3
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003056:	4629      	mov	r1, r5
 8003058:	024b      	lsls	r3, r1, #9
 800305a:	4621      	mov	r1, r4
 800305c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003060:	4621      	mov	r1, r4
 8003062:	024a      	lsls	r2, r1, #9
 8003064:	4610      	mov	r0, r2
 8003066:	4619      	mov	r1, r3
 8003068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800306a:	2200      	movs	r2, #0
 800306c:	62bb      	str	r3, [r7, #40]	; 0x28
 800306e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003070:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003074:	f7fd f8fc 	bl	8000270 <__aeabi_uldivmod>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4613      	mov	r3, r2
 800307e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003080:	e058      	b.n	8003134 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003082:	4b38      	ldr	r3, [pc, #224]	; (8003164 <HAL_RCC_GetSysClockFreq+0x200>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	099b      	lsrs	r3, r3, #6
 8003088:	2200      	movs	r2, #0
 800308a:	4618      	mov	r0, r3
 800308c:	4611      	mov	r1, r2
 800308e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003092:	623b      	str	r3, [r7, #32]
 8003094:	2300      	movs	r3, #0
 8003096:	627b      	str	r3, [r7, #36]	; 0x24
 8003098:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800309c:	4642      	mov	r2, r8
 800309e:	464b      	mov	r3, r9
 80030a0:	f04f 0000 	mov.w	r0, #0
 80030a4:	f04f 0100 	mov.w	r1, #0
 80030a8:	0159      	lsls	r1, r3, #5
 80030aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030ae:	0150      	lsls	r0, r2, #5
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4641      	mov	r1, r8
 80030b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80030ba:	4649      	mov	r1, r9
 80030bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	f04f 0300 	mov.w	r3, #0
 80030c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030d4:	ebb2 040a 	subs.w	r4, r2, sl
 80030d8:	eb63 050b 	sbc.w	r5, r3, fp
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	f04f 0300 	mov.w	r3, #0
 80030e4:	00eb      	lsls	r3, r5, #3
 80030e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030ea:	00e2      	lsls	r2, r4, #3
 80030ec:	4614      	mov	r4, r2
 80030ee:	461d      	mov	r5, r3
 80030f0:	4643      	mov	r3, r8
 80030f2:	18e3      	adds	r3, r4, r3
 80030f4:	603b      	str	r3, [r7, #0]
 80030f6:	464b      	mov	r3, r9
 80030f8:	eb45 0303 	adc.w	r3, r5, r3
 80030fc:	607b      	str	r3, [r7, #4]
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	f04f 0300 	mov.w	r3, #0
 8003106:	e9d7 4500 	ldrd	r4, r5, [r7]
 800310a:	4629      	mov	r1, r5
 800310c:	028b      	lsls	r3, r1, #10
 800310e:	4621      	mov	r1, r4
 8003110:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003114:	4621      	mov	r1, r4
 8003116:	028a      	lsls	r2, r1, #10
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800311e:	2200      	movs	r2, #0
 8003120:	61bb      	str	r3, [r7, #24]
 8003122:	61fa      	str	r2, [r7, #28]
 8003124:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003128:	f7fd f8a2 	bl	8000270 <__aeabi_uldivmod>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4613      	mov	r3, r2
 8003132:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003134:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <HAL_RCC_GetSysClockFreq+0x200>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	0c1b      	lsrs	r3, r3, #16
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	3301      	adds	r3, #1
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003144:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003148:	fbb2 f3f3 	udiv	r3, r2, r3
 800314c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800314e:	e002      	b.n	8003156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003150:	4b05      	ldr	r3, [pc, #20]	; (8003168 <HAL_RCC_GetSysClockFreq+0x204>)
 8003152:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003154:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003158:	4618      	mov	r0, r3
 800315a:	3750      	adds	r7, #80	; 0x50
 800315c:	46bd      	mov	sp, r7
 800315e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003162:	bf00      	nop
 8003164:	40023800 	.word	0x40023800
 8003168:	00f42400 	.word	0x00f42400
 800316c:	007a1200 	.word	0x007a1200

08003170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003174:	4b03      	ldr	r3, [pc, #12]	; (8003184 <HAL_RCC_GetHCLKFreq+0x14>)
 8003176:	681b      	ldr	r3, [r3, #0]
}
 8003178:	4618      	mov	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	2000002c 	.word	0x2000002c

08003188 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800318c:	f7ff fff0 	bl	8003170 <HAL_RCC_GetHCLKFreq>
 8003190:	4602      	mov	r2, r0
 8003192:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	0a9b      	lsrs	r3, r3, #10
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	4903      	ldr	r1, [pc, #12]	; (80031ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800319e:	5ccb      	ldrb	r3, [r1, r3]
 80031a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40023800 	.word	0x40023800
 80031ac:	080059dc 	.word	0x080059dc

080031b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031b4:	f7ff ffdc 	bl	8003170 <HAL_RCC_GetHCLKFreq>
 80031b8:	4602      	mov	r2, r0
 80031ba:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	0b5b      	lsrs	r3, r3, #13
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	4903      	ldr	r1, [pc, #12]	; (80031d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031c6:	5ccb      	ldrb	r3, [r1, r3]
 80031c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40023800 	.word	0x40023800
 80031d4:	080059dc 	.word	0x080059dc

080031d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e041      	b.n	800326e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7fd ffbc 	bl	800117c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3304      	adds	r3, #4
 8003214:	4619      	mov	r1, r3
 8003216:	4610      	mov	r0, r2
 8003218:	f000 fafe 	bl	8003818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
	...

08003278 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b01      	cmp	r3, #1
 800328a:	d001      	beq.n	8003290 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e046      	b.n	800331e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2202      	movs	r2, #2
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a23      	ldr	r2, [pc, #140]	; (800332c <HAL_TIM_Base_Start+0xb4>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d022      	beq.n	80032e8 <HAL_TIM_Base_Start+0x70>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032aa:	d01d      	beq.n	80032e8 <HAL_TIM_Base_Start+0x70>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a1f      	ldr	r2, [pc, #124]	; (8003330 <HAL_TIM_Base_Start+0xb8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d018      	beq.n	80032e8 <HAL_TIM_Base_Start+0x70>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a1e      	ldr	r2, [pc, #120]	; (8003334 <HAL_TIM_Base_Start+0xbc>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d013      	beq.n	80032e8 <HAL_TIM_Base_Start+0x70>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a1c      	ldr	r2, [pc, #112]	; (8003338 <HAL_TIM_Base_Start+0xc0>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d00e      	beq.n	80032e8 <HAL_TIM_Base_Start+0x70>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a1b      	ldr	r2, [pc, #108]	; (800333c <HAL_TIM_Base_Start+0xc4>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d009      	beq.n	80032e8 <HAL_TIM_Base_Start+0x70>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a19      	ldr	r2, [pc, #100]	; (8003340 <HAL_TIM_Base_Start+0xc8>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d004      	beq.n	80032e8 <HAL_TIM_Base_Start+0x70>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a18      	ldr	r2, [pc, #96]	; (8003344 <HAL_TIM_Base_Start+0xcc>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d111      	bne.n	800330c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b06      	cmp	r3, #6
 80032f8:	d010      	beq.n	800331c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 0201 	orr.w	r2, r2, #1
 8003308:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800330a:	e007      	b.n	800331c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0201 	orr.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	40010000 	.word	0x40010000
 8003330:	40000400 	.word	0x40000400
 8003334:	40000800 	.word	0x40000800
 8003338:	40000c00 	.word	0x40000c00
 800333c:	40010400 	.word	0x40010400
 8003340:	40014000 	.word	0x40014000
 8003344:	40001800 	.word	0x40001800

08003348 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b01      	cmp	r3, #1
 800335a:	d001      	beq.n	8003360 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e04e      	b.n	80033fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 0201 	orr.w	r2, r2, #1
 8003376:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a23      	ldr	r2, [pc, #140]	; (800340c <HAL_TIM_Base_Start_IT+0xc4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d022      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x80>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800338a:	d01d      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x80>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a1f      	ldr	r2, [pc, #124]	; (8003410 <HAL_TIM_Base_Start_IT+0xc8>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d018      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x80>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a1e      	ldr	r2, [pc, #120]	; (8003414 <HAL_TIM_Base_Start_IT+0xcc>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d013      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x80>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a1c      	ldr	r2, [pc, #112]	; (8003418 <HAL_TIM_Base_Start_IT+0xd0>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d00e      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x80>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a1b      	ldr	r2, [pc, #108]	; (800341c <HAL_TIM_Base_Start_IT+0xd4>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d009      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x80>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a19      	ldr	r2, [pc, #100]	; (8003420 <HAL_TIM_Base_Start_IT+0xd8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d004      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x80>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a18      	ldr	r2, [pc, #96]	; (8003424 <HAL_TIM_Base_Start_IT+0xdc>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d111      	bne.n	80033ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2b06      	cmp	r3, #6
 80033d8:	d010      	beq.n	80033fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f042 0201 	orr.w	r2, r2, #1
 80033e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ea:	e007      	b.n	80033fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40010000 	.word	0x40010000
 8003410:	40000400 	.word	0x40000400
 8003414:	40000800 	.word	0x40000800
 8003418:	40000c00 	.word	0x40000c00
 800341c:	40010400 	.word	0x40010400
 8003420:	40014000 	.word	0x40014000
 8003424:	40001800 	.word	0x40001800

08003428 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b02      	cmp	r3, #2
 800343c:	d122      	bne.n	8003484 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b02      	cmp	r3, #2
 800344a:	d11b      	bne.n	8003484 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f06f 0202 	mvn.w	r2, #2
 8003454:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f9b5 	bl	80037da <HAL_TIM_IC_CaptureCallback>
 8003470:	e005      	b.n	800347e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f9a7 	bl	80037c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 f9b8 	bl	80037ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b04      	cmp	r3, #4
 8003490:	d122      	bne.n	80034d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b04      	cmp	r3, #4
 800349e:	d11b      	bne.n	80034d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f06f 0204 	mvn.w	r2, #4
 80034a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2202      	movs	r2, #2
 80034ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f98b 	bl	80037da <HAL_TIM_IC_CaptureCallback>
 80034c4:	e005      	b.n	80034d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f97d 	bl	80037c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f98e 	bl	80037ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d122      	bne.n	800352c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f003 0308 	and.w	r3, r3, #8
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d11b      	bne.n	800352c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f06f 0208 	mvn.w	r2, #8
 80034fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2204      	movs	r2, #4
 8003502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f961 	bl	80037da <HAL_TIM_IC_CaptureCallback>
 8003518:	e005      	b.n	8003526 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f953 	bl	80037c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f964 	bl	80037ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	f003 0310 	and.w	r3, r3, #16
 8003536:	2b10      	cmp	r3, #16
 8003538:	d122      	bne.n	8003580 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f003 0310 	and.w	r3, r3, #16
 8003544:	2b10      	cmp	r3, #16
 8003546:	d11b      	bne.n	8003580 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f06f 0210 	mvn.w	r2, #16
 8003550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2208      	movs	r2, #8
 8003556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f937 	bl	80037da <HAL_TIM_IC_CaptureCallback>
 800356c:	e005      	b.n	800357a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f929 	bl	80037c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f93a 	bl	80037ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b01      	cmp	r3, #1
 800358c:	d10e      	bne.n	80035ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b01      	cmp	r3, #1
 800359a:	d107      	bne.n	80035ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f06f 0201 	mvn.w	r2, #1
 80035a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7fc ffe0 	bl	800056c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b6:	2b80      	cmp	r3, #128	; 0x80
 80035b8:	d10e      	bne.n	80035d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c4:	2b80      	cmp	r3, #128	; 0x80
 80035c6:	d107      	bne.n	80035d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 fae0 	bl	8003b98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e2:	2b40      	cmp	r3, #64	; 0x40
 80035e4:	d10e      	bne.n	8003604 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f0:	2b40      	cmp	r3, #64	; 0x40
 80035f2:	d107      	bne.n	8003604 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f8ff 	bl	8003802 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	f003 0320 	and.w	r3, r3, #32
 800360e:	2b20      	cmp	r3, #32
 8003610:	d10e      	bne.n	8003630 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f003 0320 	and.w	r3, r3, #32
 800361c:	2b20      	cmp	r3, #32
 800361e:	d107      	bne.n	8003630 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f06f 0220 	mvn.w	r2, #32
 8003628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 faaa 	bl	8003b84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003630:	bf00      	nop
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800364c:	2b01      	cmp	r3, #1
 800364e:	d101      	bne.n	8003654 <HAL_TIM_ConfigClockSource+0x1c>
 8003650:	2302      	movs	r3, #2
 8003652:	e0b4      	b.n	80037be <HAL_TIM_ConfigClockSource+0x186>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003672:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800367a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800368c:	d03e      	beq.n	800370c <HAL_TIM_ConfigClockSource+0xd4>
 800368e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003692:	f200 8087 	bhi.w	80037a4 <HAL_TIM_ConfigClockSource+0x16c>
 8003696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800369a:	f000 8086 	beq.w	80037aa <HAL_TIM_ConfigClockSource+0x172>
 800369e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a2:	d87f      	bhi.n	80037a4 <HAL_TIM_ConfigClockSource+0x16c>
 80036a4:	2b70      	cmp	r3, #112	; 0x70
 80036a6:	d01a      	beq.n	80036de <HAL_TIM_ConfigClockSource+0xa6>
 80036a8:	2b70      	cmp	r3, #112	; 0x70
 80036aa:	d87b      	bhi.n	80037a4 <HAL_TIM_ConfigClockSource+0x16c>
 80036ac:	2b60      	cmp	r3, #96	; 0x60
 80036ae:	d050      	beq.n	8003752 <HAL_TIM_ConfigClockSource+0x11a>
 80036b0:	2b60      	cmp	r3, #96	; 0x60
 80036b2:	d877      	bhi.n	80037a4 <HAL_TIM_ConfigClockSource+0x16c>
 80036b4:	2b50      	cmp	r3, #80	; 0x50
 80036b6:	d03c      	beq.n	8003732 <HAL_TIM_ConfigClockSource+0xfa>
 80036b8:	2b50      	cmp	r3, #80	; 0x50
 80036ba:	d873      	bhi.n	80037a4 <HAL_TIM_ConfigClockSource+0x16c>
 80036bc:	2b40      	cmp	r3, #64	; 0x40
 80036be:	d058      	beq.n	8003772 <HAL_TIM_ConfigClockSource+0x13a>
 80036c0:	2b40      	cmp	r3, #64	; 0x40
 80036c2:	d86f      	bhi.n	80037a4 <HAL_TIM_ConfigClockSource+0x16c>
 80036c4:	2b30      	cmp	r3, #48	; 0x30
 80036c6:	d064      	beq.n	8003792 <HAL_TIM_ConfigClockSource+0x15a>
 80036c8:	2b30      	cmp	r3, #48	; 0x30
 80036ca:	d86b      	bhi.n	80037a4 <HAL_TIM_ConfigClockSource+0x16c>
 80036cc:	2b20      	cmp	r3, #32
 80036ce:	d060      	beq.n	8003792 <HAL_TIM_ConfigClockSource+0x15a>
 80036d0:	2b20      	cmp	r3, #32
 80036d2:	d867      	bhi.n	80037a4 <HAL_TIM_ConfigClockSource+0x16c>
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d05c      	beq.n	8003792 <HAL_TIM_ConfigClockSource+0x15a>
 80036d8:	2b10      	cmp	r3, #16
 80036da:	d05a      	beq.n	8003792 <HAL_TIM_ConfigClockSource+0x15a>
 80036dc:	e062      	b.n	80037a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6818      	ldr	r0, [r3, #0]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	6899      	ldr	r1, [r3, #8]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f000 f9ad 	bl	8003a4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003700:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	609a      	str	r2, [r3, #8]
      break;
 800370a:	e04f      	b.n	80037ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	6899      	ldr	r1, [r3, #8]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f000 f996 	bl	8003a4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800372e:	609a      	str	r2, [r3, #8]
      break;
 8003730:	e03c      	b.n	80037ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6818      	ldr	r0, [r3, #0]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	6859      	ldr	r1, [r3, #4]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	461a      	mov	r2, r3
 8003740:	f000 f90a 	bl	8003958 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2150      	movs	r1, #80	; 0x50
 800374a:	4618      	mov	r0, r3
 800374c:	f000 f963 	bl	8003a16 <TIM_ITRx_SetConfig>
      break;
 8003750:	e02c      	b.n	80037ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6818      	ldr	r0, [r3, #0]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	6859      	ldr	r1, [r3, #4]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	461a      	mov	r2, r3
 8003760:	f000 f929 	bl	80039b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2160      	movs	r1, #96	; 0x60
 800376a:	4618      	mov	r0, r3
 800376c:	f000 f953 	bl	8003a16 <TIM_ITRx_SetConfig>
      break;
 8003770:	e01c      	b.n	80037ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6818      	ldr	r0, [r3, #0]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	6859      	ldr	r1, [r3, #4]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	461a      	mov	r2, r3
 8003780:	f000 f8ea 	bl	8003958 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2140      	movs	r1, #64	; 0x40
 800378a:	4618      	mov	r0, r3
 800378c:	f000 f943 	bl	8003a16 <TIM_ITRx_SetConfig>
      break;
 8003790:	e00c      	b.n	80037ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4619      	mov	r1, r3
 800379c:	4610      	mov	r0, r2
 800379e:	f000 f93a 	bl	8003a16 <TIM_ITRx_SetConfig>
      break;
 80037a2:	e003      	b.n	80037ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	73fb      	strb	r3, [r7, #15]
      break;
 80037a8:	e000      	b.n	80037ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80037aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b083      	sub	sp, #12
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037ce:	bf00      	nop
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b083      	sub	sp, #12
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
	...

08003818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a40      	ldr	r2, [pc, #256]	; (800392c <TIM_Base_SetConfig+0x114>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d013      	beq.n	8003858 <TIM_Base_SetConfig+0x40>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003836:	d00f      	beq.n	8003858 <TIM_Base_SetConfig+0x40>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a3d      	ldr	r2, [pc, #244]	; (8003930 <TIM_Base_SetConfig+0x118>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d00b      	beq.n	8003858 <TIM_Base_SetConfig+0x40>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a3c      	ldr	r2, [pc, #240]	; (8003934 <TIM_Base_SetConfig+0x11c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d007      	beq.n	8003858 <TIM_Base_SetConfig+0x40>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a3b      	ldr	r2, [pc, #236]	; (8003938 <TIM_Base_SetConfig+0x120>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d003      	beq.n	8003858 <TIM_Base_SetConfig+0x40>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a3a      	ldr	r2, [pc, #232]	; (800393c <TIM_Base_SetConfig+0x124>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d108      	bne.n	800386a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a2f      	ldr	r2, [pc, #188]	; (800392c <TIM_Base_SetConfig+0x114>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d02b      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003878:	d027      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a2c      	ldr	r2, [pc, #176]	; (8003930 <TIM_Base_SetConfig+0x118>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d023      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a2b      	ldr	r2, [pc, #172]	; (8003934 <TIM_Base_SetConfig+0x11c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d01f      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a2a      	ldr	r2, [pc, #168]	; (8003938 <TIM_Base_SetConfig+0x120>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d01b      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a29      	ldr	r2, [pc, #164]	; (800393c <TIM_Base_SetConfig+0x124>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d017      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a28      	ldr	r2, [pc, #160]	; (8003940 <TIM_Base_SetConfig+0x128>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d013      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a27      	ldr	r2, [pc, #156]	; (8003944 <TIM_Base_SetConfig+0x12c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d00f      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a26      	ldr	r2, [pc, #152]	; (8003948 <TIM_Base_SetConfig+0x130>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d00b      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a25      	ldr	r2, [pc, #148]	; (800394c <TIM_Base_SetConfig+0x134>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d007      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a24      	ldr	r2, [pc, #144]	; (8003950 <TIM_Base_SetConfig+0x138>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d003      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a23      	ldr	r2, [pc, #140]	; (8003954 <TIM_Base_SetConfig+0x13c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d108      	bne.n	80038dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4313      	orrs	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a0a      	ldr	r2, [pc, #40]	; (800392c <TIM_Base_SetConfig+0x114>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d003      	beq.n	8003910 <TIM_Base_SetConfig+0xf8>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a0c      	ldr	r2, [pc, #48]	; (800393c <TIM_Base_SetConfig+0x124>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d103      	bne.n	8003918 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	615a      	str	r2, [r3, #20]
}
 800391e:	bf00      	nop
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	40010000 	.word	0x40010000
 8003930:	40000400 	.word	0x40000400
 8003934:	40000800 	.word	0x40000800
 8003938:	40000c00 	.word	0x40000c00
 800393c:	40010400 	.word	0x40010400
 8003940:	40014000 	.word	0x40014000
 8003944:	40014400 	.word	0x40014400
 8003948:	40014800 	.word	0x40014800
 800394c:	40001800 	.word	0x40001800
 8003950:	40001c00 	.word	0x40001c00
 8003954:	40002000 	.word	0x40002000

08003958 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003958:	b480      	push	{r7}
 800395a:	b087      	sub	sp, #28
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	f023 0201 	bic.w	r2, r3, #1
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003982:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f023 030a 	bic.w	r3, r3, #10
 8003994:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	4313      	orrs	r3, r2
 800399c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	621a      	str	r2, [r3, #32]
}
 80039aa:	bf00      	nop
 80039ac:	371c      	adds	r7, #28
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b087      	sub	sp, #28
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	60f8      	str	r0, [r7, #12]
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	f023 0210 	bic.w	r2, r3, #16
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	031b      	lsls	r3, r3, #12
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	621a      	str	r2, [r3, #32]
}
 8003a0a:	bf00      	nop
 8003a0c:	371c      	adds	r7, #28
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b085      	sub	sp, #20
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f043 0307 	orr.w	r3, r3, #7
 8003a38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	609a      	str	r2, [r3, #8]
}
 8003a40:	bf00      	nop
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
 8003a58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	021a      	lsls	r2, r3, #8
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	609a      	str	r2, [r3, #8]
}
 8003a80:	bf00      	nop
 8003a82:	371c      	adds	r7, #28
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d101      	bne.n	8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	e05a      	b.n	8003b5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a21      	ldr	r2, [pc, #132]	; (8003b68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d022      	beq.n	8003b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af0:	d01d      	beq.n	8003b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a1d      	ldr	r2, [pc, #116]	; (8003b6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d018      	beq.n	8003b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a1b      	ldr	r2, [pc, #108]	; (8003b70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d013      	beq.n	8003b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a1a      	ldr	r2, [pc, #104]	; (8003b74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d00e      	beq.n	8003b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a18      	ldr	r2, [pc, #96]	; (8003b78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d009      	beq.n	8003b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a17      	ldr	r2, [pc, #92]	; (8003b7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d004      	beq.n	8003b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a15      	ldr	r2, [pc, #84]	; (8003b80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d10c      	bne.n	8003b48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	40010000 	.word	0x40010000
 8003b6c:	40000400 	.word	0x40000400
 8003b70:	40000800 	.word	0x40000800
 8003b74:	40000c00 	.word	0x40000c00
 8003b78:	40010400 	.word	0x40010400
 8003b7c:	40014000 	.word	0x40014000
 8003b80:	40001800 	.word	0x40001800

08003b84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e03f      	b.n	8003c3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d106      	bne.n	8003bd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7fd fb0e 	bl	80011f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2224      	movs	r2, #36	; 0x24
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68da      	ldr	r2, [r3, #12]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 fddf 	bl	80047b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	691a      	ldr	r2, [r3, #16]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	695a      	ldr	r2, [r3, #20]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68da      	ldr	r2, [r3, #12]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2220      	movs	r2, #32
 8003c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b08a      	sub	sp, #40	; 0x28
 8003c4a:	af02      	add	r7, sp, #8
 8003c4c:	60f8      	str	r0, [r7, #12]
 8003c4e:	60b9      	str	r1, [r7, #8]
 8003c50:	603b      	str	r3, [r7, #0]
 8003c52:	4613      	mov	r3, r2
 8003c54:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b20      	cmp	r3, #32
 8003c64:	d17c      	bne.n	8003d60 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d002      	beq.n	8003c72 <HAL_UART_Transmit+0x2c>
 8003c6c:	88fb      	ldrh	r3, [r7, #6]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e075      	b.n	8003d62 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d101      	bne.n	8003c84 <HAL_UART_Transmit+0x3e>
 8003c80:	2302      	movs	r3, #2
 8003c82:	e06e      	b.n	8003d62 <HAL_UART_Transmit+0x11c>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2221      	movs	r2, #33	; 0x21
 8003c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c9a:	f7fd fc23 	bl	80014e4 <HAL_GetTick>
 8003c9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	88fa      	ldrh	r2, [r7, #6]
 8003ca4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	88fa      	ldrh	r2, [r7, #6]
 8003caa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb4:	d108      	bne.n	8003cc8 <HAL_UART_Transmit+0x82>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d104      	bne.n	8003cc8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	61bb      	str	r3, [r7, #24]
 8003cc6:	e003      	b.n	8003cd0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003cd8:	e02a      	b.n	8003d30 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	2180      	movs	r1, #128	; 0x80
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 fb1f 	bl	8004328 <UART_WaitOnFlagUntilTimeout>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e036      	b.n	8003d62 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10b      	bne.n	8003d12 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	881b      	ldrh	r3, [r3, #0]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	3302      	adds	r3, #2
 8003d0e:	61bb      	str	r3, [r7, #24]
 8003d10:	e007      	b.n	8003d22 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	781a      	ldrb	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1cf      	bne.n	8003cda <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	2200      	movs	r2, #0
 8003d42:	2140      	movs	r1, #64	; 0x40
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 faef 	bl	8004328 <UART_WaitOnFlagUntilTimeout>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e006      	b.n	8003d62 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	e000      	b.n	8003d62 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d60:	2302      	movs	r3, #2
  }
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3720      	adds	r7, #32
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b084      	sub	sp, #16
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	60f8      	str	r0, [r7, #12]
 8003d72:	60b9      	str	r1, [r7, #8]
 8003d74:	4613      	mov	r3, r2
 8003d76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b20      	cmp	r3, #32
 8003d82:	d11d      	bne.n	8003dc0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d002      	beq.n	8003d90 <HAL_UART_Receive_IT+0x26>
 8003d8a:	88fb      	ldrh	r3, [r7, #6]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e016      	b.n	8003dc2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d101      	bne.n	8003da2 <HAL_UART_Receive_IT+0x38>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	e00f      	b.n	8003dc2 <HAL_UART_Receive_IT+0x58>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003db0:	88fb      	ldrh	r3, [r7, #6]
 8003db2:	461a      	mov	r2, r3
 8003db4:	68b9      	ldr	r1, [r7, #8]
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 fb24 	bl	8004404 <UART_Start_Receive_IT>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	e000      	b.n	8003dc2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003dc0:	2302      	movs	r3, #2
  }
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
	...

08003dcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b0ba      	sub	sp, #232	; 0xe8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003e0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10f      	bne.n	8003e32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e16:	f003 0320 	and.w	r3, r3, #32
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d009      	beq.n	8003e32 <HAL_UART_IRQHandler+0x66>
 8003e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e22:	f003 0320 	and.w	r3, r3, #32
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 fc07 	bl	800463e <UART_Receive_IT>
      return;
 8003e30:	e256      	b.n	80042e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 80de 	beq.w	8003ff8 <HAL_UART_IRQHandler+0x22c>
 8003e3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d106      	bne.n	8003e56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 80d1 	beq.w	8003ff8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00b      	beq.n	8003e7a <HAL_UART_IRQHandler+0xae>
 8003e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d005      	beq.n	8003e7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	f043 0201 	orr.w	r2, r3, #1
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e7e:	f003 0304 	and.w	r3, r3, #4
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00b      	beq.n	8003e9e <HAL_UART_IRQHandler+0xd2>
 8003e86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d005      	beq.n	8003e9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	f043 0202 	orr.w	r2, r3, #2
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00b      	beq.n	8003ec2 <HAL_UART_IRQHandler+0xf6>
 8003eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d005      	beq.n	8003ec2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f043 0204 	orr.w	r2, r3, #4
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ec6:	f003 0308 	and.w	r3, r3, #8
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d011      	beq.n	8003ef2 <HAL_UART_IRQHandler+0x126>
 8003ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ed2:	f003 0320 	and.w	r3, r3, #32
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d105      	bne.n	8003ee6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d005      	beq.n	8003ef2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	f043 0208 	orr.w	r2, r3, #8
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 81ed 	beq.w	80042d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f00:	f003 0320 	and.w	r3, r3, #32
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d008      	beq.n	8003f1a <HAL_UART_IRQHandler+0x14e>
 8003f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f0c:	f003 0320 	and.w	r3, r3, #32
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 fb92 	bl	800463e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f24:	2b40      	cmp	r3, #64	; 0x40
 8003f26:	bf0c      	ite	eq
 8003f28:	2301      	moveq	r3, #1
 8003f2a:	2300      	movne	r3, #0
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d103      	bne.n	8003f46 <HAL_UART_IRQHandler+0x17a>
 8003f3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d04f      	beq.n	8003fe6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 fa9a 	bl	8004480 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f56:	2b40      	cmp	r3, #64	; 0x40
 8003f58:	d141      	bne.n	8003fde <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3314      	adds	r3, #20
 8003f60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f68:	e853 3f00 	ldrex	r3, [r3]
 8003f6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	3314      	adds	r3, #20
 8003f82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f96:	e841 2300 	strex	r3, r2, [r1]
 8003f9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1d9      	bne.n	8003f5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d013      	beq.n	8003fd6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb2:	4a7d      	ldr	r2, [pc, #500]	; (80041a8 <HAL_UART_IRQHandler+0x3dc>)
 8003fb4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7fe fa81 	bl	80024c2 <HAL_DMA_Abort_IT>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d016      	beq.n	8003ff4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd4:	e00e      	b.n	8003ff4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f990 	bl	80042fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fdc:	e00a      	b.n	8003ff4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f98c 	bl	80042fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe4:	e006      	b.n	8003ff4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f988 	bl	80042fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003ff2:	e170      	b.n	80042d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff4:	bf00      	nop
    return;
 8003ff6:	e16e      	b.n	80042d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	f040 814a 	bne.w	8004296 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004006:	f003 0310 	and.w	r3, r3, #16
 800400a:	2b00      	cmp	r3, #0
 800400c:	f000 8143 	beq.w	8004296 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004014:	f003 0310 	and.w	r3, r3, #16
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 813c 	beq.w	8004296 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800401e:	2300      	movs	r3, #0
 8004020:	60bb      	str	r3, [r7, #8]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	60bb      	str	r3, [r7, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	60bb      	str	r3, [r7, #8]
 8004032:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403e:	2b40      	cmp	r3, #64	; 0x40
 8004040:	f040 80b4 	bne.w	80041ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004050:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 8140 	beq.w	80042da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800405e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004062:	429a      	cmp	r2, r3
 8004064:	f080 8139 	bcs.w	80042da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800406e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800407a:	f000 8088 	beq.w	800418e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	330c      	adds	r3, #12
 8004084:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004088:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800408c:	e853 3f00 	ldrex	r3, [r3]
 8004090:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004094:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800409c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	330c      	adds	r3, #12
 80040a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80040aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80040b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80040ba:	e841 2300 	strex	r3, r2, [r1]
 80040be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80040c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1d9      	bne.n	800407e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3314      	adds	r3, #20
 80040d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040d4:	e853 3f00 	ldrex	r3, [r3]
 80040d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80040da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040dc:	f023 0301 	bic.w	r3, r3, #1
 80040e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3314      	adds	r3, #20
 80040ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80040f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80040f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80040fa:	e841 2300 	strex	r3, r2, [r1]
 80040fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004100:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1e1      	bne.n	80040ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	3314      	adds	r3, #20
 800410c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004110:	e853 3f00 	ldrex	r3, [r3]
 8004114:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800411c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3314      	adds	r3, #20
 8004126:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800412a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800412c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004130:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004132:	e841 2300 	strex	r3, r2, [r1]
 8004136:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004138:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1e3      	bne.n	8004106 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2220      	movs	r2, #32
 8004142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	330c      	adds	r3, #12
 8004152:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004156:	e853 3f00 	ldrex	r3, [r3]
 800415a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800415c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800415e:	f023 0310 	bic.w	r3, r3, #16
 8004162:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	330c      	adds	r3, #12
 800416c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004170:	65ba      	str	r2, [r7, #88]	; 0x58
 8004172:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004174:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004176:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004178:	e841 2300 	strex	r3, r2, [r1]
 800417c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800417e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1e3      	bne.n	800414c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004188:	4618      	mov	r0, r3
 800418a:	f7fe f92a 	bl	80023e2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004196:	b29b      	uxth	r3, r3
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	b29b      	uxth	r3, r3
 800419c:	4619      	mov	r1, r3
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f8b6 	bl	8004310 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041a4:	e099      	b.n	80042da <HAL_UART_IRQHandler+0x50e>
 80041a6:	bf00      	nop
 80041a8:	08004547 	.word	0x08004547
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 808b 	beq.w	80042de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80041c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 8086 	beq.w	80042de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	330c      	adds	r3, #12
 80041d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041dc:	e853 3f00 	ldrex	r3, [r3]
 80041e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	330c      	adds	r3, #12
 80041f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80041f6:	647a      	str	r2, [r7, #68]	; 0x44
 80041f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041fe:	e841 2300 	strex	r3, r2, [r1]
 8004202:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1e3      	bne.n	80041d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3314      	adds	r3, #20
 8004210:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	e853 3f00 	ldrex	r3, [r3]
 8004218:	623b      	str	r3, [r7, #32]
   return(result);
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	f023 0301 	bic.w	r3, r3, #1
 8004220:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	3314      	adds	r3, #20
 800422a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800422e:	633a      	str	r2, [r7, #48]	; 0x30
 8004230:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004232:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004236:	e841 2300 	strex	r3, r2, [r1]
 800423a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800423c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1e3      	bne.n	800420a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2220      	movs	r2, #32
 8004246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	330c      	adds	r3, #12
 8004256:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	e853 3f00 	ldrex	r3, [r3]
 800425e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f023 0310 	bic.w	r3, r3, #16
 8004266:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	330c      	adds	r3, #12
 8004270:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004274:	61fa      	str	r2, [r7, #28]
 8004276:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004278:	69b9      	ldr	r1, [r7, #24]
 800427a:	69fa      	ldr	r2, [r7, #28]
 800427c:	e841 2300 	strex	r3, r2, [r1]
 8004280:	617b      	str	r3, [r7, #20]
   return(result);
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1e3      	bne.n	8004250 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004288:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800428c:	4619      	mov	r1, r3
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f83e 	bl	8004310 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004294:	e023      	b.n	80042de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800429a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d009      	beq.n	80042b6 <HAL_UART_IRQHandler+0x4ea>
 80042a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f95d 	bl	800456e <UART_Transmit_IT>
    return;
 80042b4:	e014      	b.n	80042e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80042b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00e      	beq.n	80042e0 <HAL_UART_IRQHandler+0x514>
 80042c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d008      	beq.n	80042e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f99d 	bl	800460e <UART_EndTransmit_IT>
    return;
 80042d4:	e004      	b.n	80042e0 <HAL_UART_IRQHandler+0x514>
    return;
 80042d6:	bf00      	nop
 80042d8:	e002      	b.n	80042e0 <HAL_UART_IRQHandler+0x514>
      return;
 80042da:	bf00      	nop
 80042dc:	e000      	b.n	80042e0 <HAL_UART_IRQHandler+0x514>
      return;
 80042de:	bf00      	nop
  }
}
 80042e0:	37e8      	adds	r7, #232	; 0xe8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop

080042e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	460b      	mov	r3, r1
 800431a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b090      	sub	sp, #64	; 0x40
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	603b      	str	r3, [r7, #0]
 8004334:	4613      	mov	r3, r2
 8004336:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004338:	e050      	b.n	80043dc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800433a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800433c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004340:	d04c      	beq.n	80043dc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004344:	2b00      	cmp	r3, #0
 8004346:	d007      	beq.n	8004358 <UART_WaitOnFlagUntilTimeout+0x30>
 8004348:	f7fd f8cc 	bl	80014e4 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004354:	429a      	cmp	r2, r3
 8004356:	d241      	bcs.n	80043dc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	330c      	adds	r3, #12
 800435e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004362:	e853 3f00 	ldrex	r3, [r3]
 8004366:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800436e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	330c      	adds	r3, #12
 8004376:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004378:	637a      	str	r2, [r7, #52]	; 0x34
 800437a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800437e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004380:	e841 2300 	strex	r3, r2, [r1]
 8004384:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e5      	bne.n	8004358 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3314      	adds	r3, #20
 8004392:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	e853 3f00 	ldrex	r3, [r3]
 800439a:	613b      	str	r3, [r7, #16]
   return(result);
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	f023 0301 	bic.w	r3, r3, #1
 80043a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3314      	adds	r3, #20
 80043aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043ac:	623a      	str	r2, [r7, #32]
 80043ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b0:	69f9      	ldr	r1, [r7, #28]
 80043b2:	6a3a      	ldr	r2, [r7, #32]
 80043b4:	e841 2300 	strex	r3, r2, [r1]
 80043b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1e5      	bne.n	800438c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e00f      	b.n	80043fc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	4013      	ands	r3, r2
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	bf0c      	ite	eq
 80043ec:	2301      	moveq	r3, #1
 80043ee:	2300      	movne	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	461a      	mov	r2, r3
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d09f      	beq.n	800433a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3740      	adds	r7, #64	; 0x40
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	4613      	mov	r3, r2
 8004410:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	88fa      	ldrh	r2, [r7, #6]
 800441c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	88fa      	ldrh	r2, [r7, #6]
 8004422:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2222      	movs	r2, #34	; 0x22
 800442e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d007      	beq.n	8004452 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68da      	ldr	r2, [r3, #12]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004450:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	695a      	ldr	r2, [r3, #20]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f042 0201 	orr.w	r2, r2, #1
 8004460:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68da      	ldr	r2, [r3, #12]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f042 0220 	orr.w	r2, r2, #32
 8004470:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004480:	b480      	push	{r7}
 8004482:	b095      	sub	sp, #84	; 0x54
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	330c      	adds	r3, #12
 800448e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004492:	e853 3f00 	ldrex	r3, [r3]
 8004496:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800449e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	330c      	adds	r3, #12
 80044a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044a8:	643a      	str	r2, [r7, #64]	; 0x40
 80044aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044b0:	e841 2300 	strex	r3, r2, [r1]
 80044b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1e5      	bne.n	8004488 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	3314      	adds	r3, #20
 80044c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	e853 3f00 	ldrex	r3, [r3]
 80044ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	f023 0301 	bic.w	r3, r3, #1
 80044d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	3314      	adds	r3, #20
 80044da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044e4:	e841 2300 	strex	r3, r2, [r1]
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e5      	bne.n	80044bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d119      	bne.n	800452c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	330c      	adds	r3, #12
 80044fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	e853 3f00 	ldrex	r3, [r3]
 8004506:	60bb      	str	r3, [r7, #8]
   return(result);
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f023 0310 	bic.w	r3, r3, #16
 800450e:	647b      	str	r3, [r7, #68]	; 0x44
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	330c      	adds	r3, #12
 8004516:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004518:	61ba      	str	r2, [r7, #24]
 800451a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451c:	6979      	ldr	r1, [r7, #20]
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	e841 2300 	strex	r3, r2, [r1]
 8004524:	613b      	str	r3, [r7, #16]
   return(result);
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1e5      	bne.n	80044f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2220      	movs	r2, #32
 8004530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	631a      	str	r2, [r3, #48]	; 0x30
}
 800453a:	bf00      	nop
 800453c:	3754      	adds	r7, #84	; 0x54
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b084      	sub	sp, #16
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004552:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f7ff fecb 	bl	80042fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004566:	bf00      	nop
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800456e:	b480      	push	{r7}
 8004570:	b085      	sub	sp, #20
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b21      	cmp	r3, #33	; 0x21
 8004580:	d13e      	bne.n	8004600 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800458a:	d114      	bne.n	80045b6 <UART_Transmit_IT+0x48>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d110      	bne.n	80045b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	881b      	ldrh	r3, [r3, #0]
 800459e:	461a      	mov	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	1c9a      	adds	r2, r3, #2
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	621a      	str	r2, [r3, #32]
 80045b4:	e008      	b.n	80045c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	1c59      	adds	r1, r3, #1
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6211      	str	r1, [r2, #32]
 80045c0:	781a      	ldrb	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	3b01      	subs	r3, #1
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	4619      	mov	r1, r3
 80045d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10f      	bne.n	80045fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68da      	ldr	r2, [r3, #12]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045fc:	2300      	movs	r3, #0
 80045fe:	e000      	b.n	8004602 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004600:	2302      	movs	r3, #2
  }
}
 8004602:	4618      	mov	r0, r3
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b082      	sub	sp, #8
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68da      	ldr	r2, [r3, #12]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004624:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2220      	movs	r2, #32
 800462a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7ff fe5a 	bl	80042e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b08c      	sub	sp, #48	; 0x30
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b22      	cmp	r3, #34	; 0x22
 8004650:	f040 80ab 	bne.w	80047aa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800465c:	d117      	bne.n	800468e <UART_Receive_IT+0x50>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d113      	bne.n	800468e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004666:	2300      	movs	r3, #0
 8004668:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	b29b      	uxth	r3, r3
 8004678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800467c:	b29a      	uxth	r2, r3
 800467e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004680:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004686:	1c9a      	adds	r2, r3, #2
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	629a      	str	r2, [r3, #40]	; 0x28
 800468c:	e026      	b.n	80046dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004692:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004694:	2300      	movs	r3, #0
 8004696:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a0:	d007      	beq.n	80046b2 <UART_Receive_IT+0x74>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10a      	bne.n	80046c0 <UART_Receive_IT+0x82>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046bc:	701a      	strb	r2, [r3, #0]
 80046be:	e008      	b.n	80046d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d6:	1c5a      	adds	r2, r3, #1
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	3b01      	subs	r3, #1
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	4619      	mov	r1, r3
 80046ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d15a      	bne.n	80047a6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 0220 	bic.w	r2, r2, #32
 80046fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68da      	ldr	r2, [r3, #12]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800470e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695a      	ldr	r2, [r3, #20]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0201 	bic.w	r2, r2, #1
 800471e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2220      	movs	r2, #32
 8004724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472c:	2b01      	cmp	r3, #1
 800472e:	d135      	bne.n	800479c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	330c      	adds	r3, #12
 800473c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	e853 3f00 	ldrex	r3, [r3]
 8004744:	613b      	str	r3, [r7, #16]
   return(result);
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	f023 0310 	bic.w	r3, r3, #16
 800474c:	627b      	str	r3, [r7, #36]	; 0x24
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	330c      	adds	r3, #12
 8004754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004756:	623a      	str	r2, [r7, #32]
 8004758:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475a:	69f9      	ldr	r1, [r7, #28]
 800475c:	6a3a      	ldr	r2, [r7, #32]
 800475e:	e841 2300 	strex	r3, r2, [r1]
 8004762:	61bb      	str	r3, [r7, #24]
   return(result);
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1e5      	bne.n	8004736 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0310 	and.w	r3, r3, #16
 8004774:	2b10      	cmp	r3, #16
 8004776:	d10a      	bne.n	800478e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004778:	2300      	movs	r3, #0
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004792:	4619      	mov	r1, r3
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7ff fdbb 	bl	8004310 <HAL_UARTEx_RxEventCallback>
 800479a:	e002      	b.n	80047a2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7fb ff15 	bl	80005cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	e002      	b.n	80047ac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e000      	b.n	80047ac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80047aa:	2302      	movs	r3, #2
  }
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3730      	adds	r7, #48	; 0x30
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047b8:	b0c0      	sub	sp, #256	; 0x100
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80047cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d0:	68d9      	ldr	r1, [r3, #12]
 80047d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	ea40 0301 	orr.w	r3, r0, r1
 80047dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	431a      	orrs	r2, r3
 80047ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	431a      	orrs	r2, r3
 80047f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800480c:	f021 010c 	bic.w	r1, r1, #12
 8004810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800481a:	430b      	orrs	r3, r1
 800481c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800481e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800482a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800482e:	6999      	ldr	r1, [r3, #24]
 8004830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	ea40 0301 	orr.w	r3, r0, r1
 800483a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800483c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	4b8f      	ldr	r3, [pc, #572]	; (8004a80 <UART_SetConfig+0x2cc>)
 8004844:	429a      	cmp	r2, r3
 8004846:	d005      	beq.n	8004854 <UART_SetConfig+0xa0>
 8004848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	4b8d      	ldr	r3, [pc, #564]	; (8004a84 <UART_SetConfig+0x2d0>)
 8004850:	429a      	cmp	r2, r3
 8004852:	d104      	bne.n	800485e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004854:	f7fe fcac 	bl	80031b0 <HAL_RCC_GetPCLK2Freq>
 8004858:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800485c:	e003      	b.n	8004866 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800485e:	f7fe fc93 	bl	8003188 <HAL_RCC_GetPCLK1Freq>
 8004862:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004870:	f040 810c 	bne.w	8004a8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004874:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004878:	2200      	movs	r2, #0
 800487a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800487e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004882:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004886:	4622      	mov	r2, r4
 8004888:	462b      	mov	r3, r5
 800488a:	1891      	adds	r1, r2, r2
 800488c:	65b9      	str	r1, [r7, #88]	; 0x58
 800488e:	415b      	adcs	r3, r3
 8004890:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004892:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004896:	4621      	mov	r1, r4
 8004898:	eb12 0801 	adds.w	r8, r2, r1
 800489c:	4629      	mov	r1, r5
 800489e:	eb43 0901 	adc.w	r9, r3, r1
 80048a2:	f04f 0200 	mov.w	r2, #0
 80048a6:	f04f 0300 	mov.w	r3, #0
 80048aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048b6:	4690      	mov	r8, r2
 80048b8:	4699      	mov	r9, r3
 80048ba:	4623      	mov	r3, r4
 80048bc:	eb18 0303 	adds.w	r3, r8, r3
 80048c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048c4:	462b      	mov	r3, r5
 80048c6:	eb49 0303 	adc.w	r3, r9, r3
 80048ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80048de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80048e2:	460b      	mov	r3, r1
 80048e4:	18db      	adds	r3, r3, r3
 80048e6:	653b      	str	r3, [r7, #80]	; 0x50
 80048e8:	4613      	mov	r3, r2
 80048ea:	eb42 0303 	adc.w	r3, r2, r3
 80048ee:	657b      	str	r3, [r7, #84]	; 0x54
 80048f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80048f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80048f8:	f7fb fcba 	bl	8000270 <__aeabi_uldivmod>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	4b61      	ldr	r3, [pc, #388]	; (8004a88 <UART_SetConfig+0x2d4>)
 8004902:	fba3 2302 	umull	r2, r3, r3, r2
 8004906:	095b      	lsrs	r3, r3, #5
 8004908:	011c      	lsls	r4, r3, #4
 800490a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800490e:	2200      	movs	r2, #0
 8004910:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004914:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004918:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800491c:	4642      	mov	r2, r8
 800491e:	464b      	mov	r3, r9
 8004920:	1891      	adds	r1, r2, r2
 8004922:	64b9      	str	r1, [r7, #72]	; 0x48
 8004924:	415b      	adcs	r3, r3
 8004926:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004928:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800492c:	4641      	mov	r1, r8
 800492e:	eb12 0a01 	adds.w	sl, r2, r1
 8004932:	4649      	mov	r1, r9
 8004934:	eb43 0b01 	adc.w	fp, r3, r1
 8004938:	f04f 0200 	mov.w	r2, #0
 800493c:	f04f 0300 	mov.w	r3, #0
 8004940:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004944:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004948:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800494c:	4692      	mov	sl, r2
 800494e:	469b      	mov	fp, r3
 8004950:	4643      	mov	r3, r8
 8004952:	eb1a 0303 	adds.w	r3, sl, r3
 8004956:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800495a:	464b      	mov	r3, r9
 800495c:	eb4b 0303 	adc.w	r3, fp, r3
 8004960:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004970:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004974:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004978:	460b      	mov	r3, r1
 800497a:	18db      	adds	r3, r3, r3
 800497c:	643b      	str	r3, [r7, #64]	; 0x40
 800497e:	4613      	mov	r3, r2
 8004980:	eb42 0303 	adc.w	r3, r2, r3
 8004984:	647b      	str	r3, [r7, #68]	; 0x44
 8004986:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800498a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800498e:	f7fb fc6f 	bl	8000270 <__aeabi_uldivmod>
 8004992:	4602      	mov	r2, r0
 8004994:	460b      	mov	r3, r1
 8004996:	4611      	mov	r1, r2
 8004998:	4b3b      	ldr	r3, [pc, #236]	; (8004a88 <UART_SetConfig+0x2d4>)
 800499a:	fba3 2301 	umull	r2, r3, r3, r1
 800499e:	095b      	lsrs	r3, r3, #5
 80049a0:	2264      	movs	r2, #100	; 0x64
 80049a2:	fb02 f303 	mul.w	r3, r2, r3
 80049a6:	1acb      	subs	r3, r1, r3
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80049ae:	4b36      	ldr	r3, [pc, #216]	; (8004a88 <UART_SetConfig+0x2d4>)
 80049b0:	fba3 2302 	umull	r2, r3, r3, r2
 80049b4:	095b      	lsrs	r3, r3, #5
 80049b6:	005b      	lsls	r3, r3, #1
 80049b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049bc:	441c      	add	r4, r3
 80049be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049c2:	2200      	movs	r2, #0
 80049c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80049cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80049d0:	4642      	mov	r2, r8
 80049d2:	464b      	mov	r3, r9
 80049d4:	1891      	adds	r1, r2, r2
 80049d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80049d8:	415b      	adcs	r3, r3
 80049da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049e0:	4641      	mov	r1, r8
 80049e2:	1851      	adds	r1, r2, r1
 80049e4:	6339      	str	r1, [r7, #48]	; 0x30
 80049e6:	4649      	mov	r1, r9
 80049e8:	414b      	adcs	r3, r1
 80049ea:	637b      	str	r3, [r7, #52]	; 0x34
 80049ec:	f04f 0200 	mov.w	r2, #0
 80049f0:	f04f 0300 	mov.w	r3, #0
 80049f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80049f8:	4659      	mov	r1, fp
 80049fa:	00cb      	lsls	r3, r1, #3
 80049fc:	4651      	mov	r1, sl
 80049fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a02:	4651      	mov	r1, sl
 8004a04:	00ca      	lsls	r2, r1, #3
 8004a06:	4610      	mov	r0, r2
 8004a08:	4619      	mov	r1, r3
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	4642      	mov	r2, r8
 8004a0e:	189b      	adds	r3, r3, r2
 8004a10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a14:	464b      	mov	r3, r9
 8004a16:	460a      	mov	r2, r1
 8004a18:	eb42 0303 	adc.w	r3, r2, r3
 8004a1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a34:	460b      	mov	r3, r1
 8004a36:	18db      	adds	r3, r3, r3
 8004a38:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	eb42 0303 	adc.w	r3, r2, r3
 8004a40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a4a:	f7fb fc11 	bl	8000270 <__aeabi_uldivmod>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	460b      	mov	r3, r1
 8004a52:	4b0d      	ldr	r3, [pc, #52]	; (8004a88 <UART_SetConfig+0x2d4>)
 8004a54:	fba3 1302 	umull	r1, r3, r3, r2
 8004a58:	095b      	lsrs	r3, r3, #5
 8004a5a:	2164      	movs	r1, #100	; 0x64
 8004a5c:	fb01 f303 	mul.w	r3, r1, r3
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	3332      	adds	r3, #50	; 0x32
 8004a66:	4a08      	ldr	r2, [pc, #32]	; (8004a88 <UART_SetConfig+0x2d4>)
 8004a68:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6c:	095b      	lsrs	r3, r3, #5
 8004a6e:	f003 0207 	and.w	r2, r3, #7
 8004a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4422      	add	r2, r4
 8004a7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a7c:	e106      	b.n	8004c8c <UART_SetConfig+0x4d8>
 8004a7e:	bf00      	nop
 8004a80:	40011000 	.word	0x40011000
 8004a84:	40011400 	.word	0x40011400
 8004a88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a90:	2200      	movs	r2, #0
 8004a92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a9e:	4642      	mov	r2, r8
 8004aa0:	464b      	mov	r3, r9
 8004aa2:	1891      	adds	r1, r2, r2
 8004aa4:	6239      	str	r1, [r7, #32]
 8004aa6:	415b      	adcs	r3, r3
 8004aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aaa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004aae:	4641      	mov	r1, r8
 8004ab0:	1854      	adds	r4, r2, r1
 8004ab2:	4649      	mov	r1, r9
 8004ab4:	eb43 0501 	adc.w	r5, r3, r1
 8004ab8:	f04f 0200 	mov.w	r2, #0
 8004abc:	f04f 0300 	mov.w	r3, #0
 8004ac0:	00eb      	lsls	r3, r5, #3
 8004ac2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ac6:	00e2      	lsls	r2, r4, #3
 8004ac8:	4614      	mov	r4, r2
 8004aca:	461d      	mov	r5, r3
 8004acc:	4643      	mov	r3, r8
 8004ace:	18e3      	adds	r3, r4, r3
 8004ad0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ad4:	464b      	mov	r3, r9
 8004ad6:	eb45 0303 	adc.w	r3, r5, r3
 8004ada:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004aea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004aee:	f04f 0200 	mov.w	r2, #0
 8004af2:	f04f 0300 	mov.w	r3, #0
 8004af6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004afa:	4629      	mov	r1, r5
 8004afc:	008b      	lsls	r3, r1, #2
 8004afe:	4621      	mov	r1, r4
 8004b00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b04:	4621      	mov	r1, r4
 8004b06:	008a      	lsls	r2, r1, #2
 8004b08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b0c:	f7fb fbb0 	bl	8000270 <__aeabi_uldivmod>
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	4b60      	ldr	r3, [pc, #384]	; (8004c98 <UART_SetConfig+0x4e4>)
 8004b16:	fba3 2302 	umull	r2, r3, r3, r2
 8004b1a:	095b      	lsrs	r3, r3, #5
 8004b1c:	011c      	lsls	r4, r3, #4
 8004b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b22:	2200      	movs	r2, #0
 8004b24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b30:	4642      	mov	r2, r8
 8004b32:	464b      	mov	r3, r9
 8004b34:	1891      	adds	r1, r2, r2
 8004b36:	61b9      	str	r1, [r7, #24]
 8004b38:	415b      	adcs	r3, r3
 8004b3a:	61fb      	str	r3, [r7, #28]
 8004b3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b40:	4641      	mov	r1, r8
 8004b42:	1851      	adds	r1, r2, r1
 8004b44:	6139      	str	r1, [r7, #16]
 8004b46:	4649      	mov	r1, r9
 8004b48:	414b      	adcs	r3, r1
 8004b4a:	617b      	str	r3, [r7, #20]
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	f04f 0300 	mov.w	r3, #0
 8004b54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b58:	4659      	mov	r1, fp
 8004b5a:	00cb      	lsls	r3, r1, #3
 8004b5c:	4651      	mov	r1, sl
 8004b5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b62:	4651      	mov	r1, sl
 8004b64:	00ca      	lsls	r2, r1, #3
 8004b66:	4610      	mov	r0, r2
 8004b68:	4619      	mov	r1, r3
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	4642      	mov	r2, r8
 8004b6e:	189b      	adds	r3, r3, r2
 8004b70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b74:	464b      	mov	r3, r9
 8004b76:	460a      	mov	r2, r1
 8004b78:	eb42 0303 	adc.w	r3, r2, r3
 8004b7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b98:	4649      	mov	r1, r9
 8004b9a:	008b      	lsls	r3, r1, #2
 8004b9c:	4641      	mov	r1, r8
 8004b9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ba2:	4641      	mov	r1, r8
 8004ba4:	008a      	lsls	r2, r1, #2
 8004ba6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004baa:	f7fb fb61 	bl	8000270 <__aeabi_uldivmod>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4611      	mov	r1, r2
 8004bb4:	4b38      	ldr	r3, [pc, #224]	; (8004c98 <UART_SetConfig+0x4e4>)
 8004bb6:	fba3 2301 	umull	r2, r3, r3, r1
 8004bba:	095b      	lsrs	r3, r3, #5
 8004bbc:	2264      	movs	r2, #100	; 0x64
 8004bbe:	fb02 f303 	mul.w	r3, r2, r3
 8004bc2:	1acb      	subs	r3, r1, r3
 8004bc4:	011b      	lsls	r3, r3, #4
 8004bc6:	3332      	adds	r3, #50	; 0x32
 8004bc8:	4a33      	ldr	r2, [pc, #204]	; (8004c98 <UART_SetConfig+0x4e4>)
 8004bca:	fba2 2303 	umull	r2, r3, r2, r3
 8004bce:	095b      	lsrs	r3, r3, #5
 8004bd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bd4:	441c      	add	r4, r3
 8004bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bda:	2200      	movs	r2, #0
 8004bdc:	673b      	str	r3, [r7, #112]	; 0x70
 8004bde:	677a      	str	r2, [r7, #116]	; 0x74
 8004be0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004be4:	4642      	mov	r2, r8
 8004be6:	464b      	mov	r3, r9
 8004be8:	1891      	adds	r1, r2, r2
 8004bea:	60b9      	str	r1, [r7, #8]
 8004bec:	415b      	adcs	r3, r3
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bf4:	4641      	mov	r1, r8
 8004bf6:	1851      	adds	r1, r2, r1
 8004bf8:	6039      	str	r1, [r7, #0]
 8004bfa:	4649      	mov	r1, r9
 8004bfc:	414b      	adcs	r3, r1
 8004bfe:	607b      	str	r3, [r7, #4]
 8004c00:	f04f 0200 	mov.w	r2, #0
 8004c04:	f04f 0300 	mov.w	r3, #0
 8004c08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c0c:	4659      	mov	r1, fp
 8004c0e:	00cb      	lsls	r3, r1, #3
 8004c10:	4651      	mov	r1, sl
 8004c12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c16:	4651      	mov	r1, sl
 8004c18:	00ca      	lsls	r2, r1, #3
 8004c1a:	4610      	mov	r0, r2
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4603      	mov	r3, r0
 8004c20:	4642      	mov	r2, r8
 8004c22:	189b      	adds	r3, r3, r2
 8004c24:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c26:	464b      	mov	r3, r9
 8004c28:	460a      	mov	r2, r1
 8004c2a:	eb42 0303 	adc.w	r3, r2, r3
 8004c2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	663b      	str	r3, [r7, #96]	; 0x60
 8004c3a:	667a      	str	r2, [r7, #100]	; 0x64
 8004c3c:	f04f 0200 	mov.w	r2, #0
 8004c40:	f04f 0300 	mov.w	r3, #0
 8004c44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c48:	4649      	mov	r1, r9
 8004c4a:	008b      	lsls	r3, r1, #2
 8004c4c:	4641      	mov	r1, r8
 8004c4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c52:	4641      	mov	r1, r8
 8004c54:	008a      	lsls	r2, r1, #2
 8004c56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c5a:	f7fb fb09 	bl	8000270 <__aeabi_uldivmod>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	4b0d      	ldr	r3, [pc, #52]	; (8004c98 <UART_SetConfig+0x4e4>)
 8004c64:	fba3 1302 	umull	r1, r3, r3, r2
 8004c68:	095b      	lsrs	r3, r3, #5
 8004c6a:	2164      	movs	r1, #100	; 0x64
 8004c6c:	fb01 f303 	mul.w	r3, r1, r3
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	3332      	adds	r3, #50	; 0x32
 8004c76:	4a08      	ldr	r2, [pc, #32]	; (8004c98 <UART_SetConfig+0x4e4>)
 8004c78:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7c:	095b      	lsrs	r3, r3, #5
 8004c7e:	f003 020f 	and.w	r2, r3, #15
 8004c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4422      	add	r2, r4
 8004c8a:	609a      	str	r2, [r3, #8]
}
 8004c8c:	bf00      	nop
 8004c8e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c92:	46bd      	mov	sp, r7
 8004c94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c98:	51eb851f 	.word	0x51eb851f

08004c9c <Split_String_UART>:
#define END_6_MOTOR 40

#define byteSign 5

void Split_String_UART(uint8_t data_in[], uint8_t len, uint8_t t1[], uint8_t t2[], uint8_t t3[], uint8_t t4[], uint8_t t5[], uint8_t t6[])
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b093      	sub	sp, #76	; 0x4c
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	607a      	str	r2, [r7, #4]
 8004ca6:	603b      	str	r3, [r7, #0]
 8004ca8:	460b      	mov	r3, r1
 8004caa:	72fb      	strb	r3, [r7, #11]
	int position_a = 0;
 8004cac:	2300      	movs	r3, #0
 8004cae:	647b      	str	r3, [r7, #68]	; 0x44
	int position_b = 0;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	643b      	str	r3, [r7, #64]	; 0x40
	int position_c = 0;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
	int position_d = 0;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	63bb      	str	r3, [r7, #56]	; 0x38
	int position_e = 0;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	637b      	str	r3, [r7, #52]	; 0x34
	int position_f = 0;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	633b      	str	r3, [r7, #48]	; 0x30
	for(int i = 0; i < len; i++)
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cc8:	e02b      	b.n	8004d22 <Split_String_UART+0x86>
	{
		switch(data_in[i])
 8004cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	4413      	add	r3, r2
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	3b61      	subs	r3, #97	; 0x61
 8004cd4:	2b05      	cmp	r3, #5
 8004cd6:	d821      	bhi.n	8004d1c <Split_String_UART+0x80>
 8004cd8:	a201      	add	r2, pc, #4	; (adr r2, 8004ce0 <Split_String_UART+0x44>)
 8004cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cde:	bf00      	nop
 8004ce0:	08004cf9 	.word	0x08004cf9
 8004ce4:	08004cff 	.word	0x08004cff
 8004ce8:	08004d05 	.word	0x08004d05
 8004cec:	08004d0b 	.word	0x08004d0b
 8004cf0:	08004d11 	.word	0x08004d11
 8004cf4:	08004d17 	.word	0x08004d17
		{
			case 'a': position_a = i;
 8004cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfa:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 8004cfc:	e00e      	b.n	8004d1c <Split_String_UART+0x80>
			case 'b': position_b = i;
 8004cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d00:	643b      	str	r3, [r7, #64]	; 0x40
			break;
 8004d02:	e00b      	b.n	8004d1c <Split_String_UART+0x80>
			case 'c': position_c = i;
 8004d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d06:	63fb      	str	r3, [r7, #60]	; 0x3c
			break;
 8004d08:	e008      	b.n	8004d1c <Split_String_UART+0x80>
			case 'd': position_d = i;
 8004d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0c:	63bb      	str	r3, [r7, #56]	; 0x38
			break;
 8004d0e:	e005      	b.n	8004d1c <Split_String_UART+0x80>
			case 'e': position_e = i;
 8004d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d12:	637b      	str	r3, [r7, #52]	; 0x34
			break;
 8004d14:	e002      	b.n	8004d1c <Split_String_UART+0x80>
			case 'f': position_f = i;
 8004d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d18:	633b      	str	r3, [r7, #48]	; 0x30
			break;
 8004d1a:	bf00      	nop
	for(int i = 0; i < len; i++)
 8004d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1e:	3301      	adds	r3, #1
 8004d20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d22:	7afb      	ldrb	r3, [r7, #11]
 8004d24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d26:	429a      	cmp	r2, r3
 8004d28:	dbcf      	blt.n	8004cca <Split_String_UART+0x2e>
		}
	}
	for(int i = 0; i < position_a; i++)
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d2e:	e00a      	b.n	8004d46 <Split_String_UART+0xaa>
		t1[i] = data_in[i];
 8004d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	441a      	add	r2, r3
 8004d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d38:	6879      	ldr	r1, [r7, #4]
 8004d3a:	440b      	add	r3, r1
 8004d3c:	7812      	ldrb	r2, [r2, #0]
 8004d3e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < position_a; i++)
 8004d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d42:	3301      	adds	r3, #1
 8004d44:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	dbf0      	blt.n	8004d30 <Split_String_UART+0x94>

	for(int i = position_a + 1; i < position_b; i++)
 8004d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d50:	3301      	adds	r3, #1
 8004d52:	627b      	str	r3, [r7, #36]	; 0x24
 8004d54:	e00e      	b.n	8004d74 <Split_String_UART+0xd8>
		t2[i - (position_a + 1)] = data_in[i];
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	441a      	add	r2, r3
 8004d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d5e:	3301      	adds	r3, #1
 8004d60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d62:	1acb      	subs	r3, r1, r3
 8004d64:	4619      	mov	r1, r3
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	440b      	add	r3, r1
 8004d6a:	7812      	ldrb	r2, [r2, #0]
 8004d6c:	701a      	strb	r2, [r3, #0]
	for(int i = position_a + 1; i < position_b; i++)
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	3301      	adds	r3, #1
 8004d72:	627b      	str	r3, [r7, #36]	; 0x24
 8004d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	dbec      	blt.n	8004d56 <Split_String_UART+0xba>

	for(int i = position_b + 1; i < position_c; i++)
 8004d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d7e:	3301      	adds	r3, #1
 8004d80:	623b      	str	r3, [r7, #32]
 8004d82:	e00e      	b.n	8004da2 <Split_String_UART+0x106>
		t3[i - (position_b + 1)] = data_in[i];
 8004d84:	6a3b      	ldr	r3, [r7, #32]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	441a      	add	r2, r3
 8004d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	6a39      	ldr	r1, [r7, #32]
 8004d90:	1acb      	subs	r3, r1, r3
 8004d92:	4619      	mov	r1, r3
 8004d94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d96:	440b      	add	r3, r1
 8004d98:	7812      	ldrb	r2, [r2, #0]
 8004d9a:	701a      	strb	r2, [r3, #0]
	for(int i = position_b + 1; i < position_c; i++)
 8004d9c:	6a3b      	ldr	r3, [r7, #32]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	623b      	str	r3, [r7, #32]
 8004da2:	6a3a      	ldr	r2, [r7, #32]
 8004da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004da6:	429a      	cmp	r2, r3
 8004da8:	dbec      	blt.n	8004d84 <Split_String_UART+0xe8>

	for(int i = position_c + 1; i < position_d; i++)
 8004daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dac:	3301      	adds	r3, #1
 8004dae:	61fb      	str	r3, [r7, #28]
 8004db0:	e00e      	b.n	8004dd0 <Split_String_UART+0x134>
		t4[i - (position_c + 1)] = data_in[i];
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	441a      	add	r2, r3
 8004db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dba:	3301      	adds	r3, #1
 8004dbc:	69f9      	ldr	r1, [r7, #28]
 8004dbe:	1acb      	subs	r3, r1, r3
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dc4:	440b      	add	r3, r1
 8004dc6:	7812      	ldrb	r2, [r2, #0]
 8004dc8:	701a      	strb	r2, [r3, #0]
	for(int i = position_c + 1; i < position_d; i++)
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	61fb      	str	r3, [r7, #28]
 8004dd0:	69fa      	ldr	r2, [r7, #28]
 8004dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	dbec      	blt.n	8004db2 <Split_String_UART+0x116>

	for(int i = position_d + 1; i < position_e; i++)
 8004dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dda:	3301      	adds	r3, #1
 8004ddc:	61bb      	str	r3, [r7, #24]
 8004dde:	e00e      	b.n	8004dfe <Split_String_UART+0x162>
		t5[i - (position_d + 1)] = data_in[i];
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	441a      	add	r2, r3
 8004de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de8:	3301      	adds	r3, #1
 8004dea:	69b9      	ldr	r1, [r7, #24]
 8004dec:	1acb      	subs	r3, r1, r3
 8004dee:	4619      	mov	r1, r3
 8004df0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004df2:	440b      	add	r3, r1
 8004df4:	7812      	ldrb	r2, [r2, #0]
 8004df6:	701a      	strb	r2, [r3, #0]
	for(int i = position_d + 1; i < position_e; i++)
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	61bb      	str	r3, [r7, #24]
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e02:	429a      	cmp	r2, r3
 8004e04:	dbec      	blt.n	8004de0 <Split_String_UART+0x144>

	for(int i = position_e + 1; i < position_f; i++)
 8004e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e08:	3301      	adds	r3, #1
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	e00e      	b.n	8004e2c <Split_String_UART+0x190>
		t6[i - (position_e + 1)] = data_in[i];
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	441a      	add	r2, r3
 8004e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e16:	3301      	adds	r3, #1
 8004e18:	6979      	ldr	r1, [r7, #20]
 8004e1a:	1acb      	subs	r3, r1, r3
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e20:	440b      	add	r3, r1
 8004e22:	7812      	ldrb	r2, [r2, #0]
 8004e24:	701a      	strb	r2, [r3, #0]
	for(int i = position_e + 1; i < position_f; i++)
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e30:	429a      	cmp	r2, r3
 8004e32:	dbec      	blt.n	8004e0e <Split_String_UART+0x172>
}
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop
 8004e38:	374c      	adds	r7, #76	; 0x4c
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop

08004e44 <Handles_UART_6_motor>:
void Handles_UART_6_motor(uint8_t data_encoder_1_motor[],uint8_t data_encoder_2_motor[],uint8_t data_encoder_3_motor[],uint8_t data_encoder_4_motor[],uint8_t data_encoder_5_motor[],uint8_t data_encoder_6_motor[], uint8_t Data_Encoder[])
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b09c      	sub	sp, #112	; 0x70
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
 8004e50:	603b      	str	r3, [r7, #0]
	//TOTAL 7 BYTES
	//Sign data 1 byte
	Data_Encoder[START_1_MOTOR-1] = data_encoder_1_motor[byteSign];
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	795a      	ldrb	r2, [r3, #5]
 8004e56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e5a:	701a      	strb	r2, [r3, #0]
	//Number data 5 byte
	for(int i = START_1_MOTOR; i <= END_1_MOTOR; i++)
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e60:	e017      	b.n	8004e92 <Handles_UART_6_motor+0x4e>
	{
		char tem[12];
		sprintf(&tem[0], "%d", data_encoder_1_motor[END_1_MOTOR - i]);
 8004e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e64:	f1c3 0305 	rsb	r3, r3, #5
 8004e68:	461a      	mov	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	461a      	mov	r2, r3
 8004e72:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004e76:	4975      	ldr	r1, [pc, #468]	; (800504c <Handles_UART_6_motor+0x208>)
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 f8e9 	bl	8005050 <siprintf>
		Data_Encoder[i] = tem[0];
 8004e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e80:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e84:	4413      	add	r3, r2
 8004e86:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8004e8a:	701a      	strb	r2, [r3, #0]
	for(int i = START_1_MOTOR; i <= END_1_MOTOR; i++)
 8004e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e8e:	3301      	adds	r3, #1
 8004e90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e94:	2b05      	cmp	r3, #5
 8004e96:	dde4      	ble.n	8004e62 <Handles_UART_6_motor+0x1e>
	}
	//Syntax 1 byte
	Data_Encoder[END_1_MOTOR+1] = 'a';
 8004e98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e9c:	3306      	adds	r3, #6
 8004e9e:	2261      	movs	r2, #97	; 0x61
 8004ea0:	701a      	strb	r2, [r3, #0]

	//TOTAL 7 BYTES
	//Sign data 1 byte
	Data_Encoder[START_2_MOTOR-1] = data_encoder_2_motor[byteSign];
 8004ea2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ea6:	3307      	adds	r3, #7
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	7952      	ldrb	r2, [r2, #5]
 8004eac:	701a      	strb	r2, [r3, #0]
	//Number data 5 byte
	for(int i = START_2_MOTOR; i <= END_2_MOTOR; i++)
 8004eae:	2308      	movs	r3, #8
 8004eb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004eb2:	e017      	b.n	8004ee4 <Handles_UART_6_motor+0xa0>
	{
		char tem[12];
		sprintf(&tem[0], "%d", data_encoder_2_motor[END_2_MOTOR - i]);
 8004eb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004eb6:	f1c3 030c 	rsb	r3, r3, #12
 8004eba:	461a      	mov	r2, r3
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ec8:	4960      	ldr	r1, [pc, #384]	; (800504c <Handles_UART_6_motor+0x208>)
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 f8c0 	bl	8005050 <siprintf>
		Data_Encoder[i] = tem[0];
 8004ed0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ed2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8004edc:	701a      	strb	r2, [r3, #0]
	for(int i = START_2_MOTOR; i <= END_2_MOTOR; i++)
 8004ede:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ee4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ee6:	2b0c      	cmp	r3, #12
 8004ee8:	dde4      	ble.n	8004eb4 <Handles_UART_6_motor+0x70>
	}
	//Syntax 1 byte
	Data_Encoder[END_2_MOTOR+1] = 'b';
 8004eea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004eee:	330d      	adds	r3, #13
 8004ef0:	2262      	movs	r2, #98	; 0x62
 8004ef2:	701a      	strb	r2, [r3, #0]

	//TOTAL 7 BYTES
	//Sign data 1 byte
	Data_Encoder[START_3_MOTOR-1] = data_encoder_3_motor[byteSign];
 8004ef4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ef8:	330e      	adds	r3, #14
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	7952      	ldrb	r2, [r2, #5]
 8004efe:	701a      	strb	r2, [r3, #0]
	//Number data 5 byte
	for(int i = START_3_MOTOR; i <= END_3_MOTOR; i++)
 8004f00:	230f      	movs	r3, #15
 8004f02:	667b      	str	r3, [r7, #100]	; 0x64
 8004f04:	e017      	b.n	8004f36 <Handles_UART_6_motor+0xf2>
	{
		char tem[12];
		sprintf(&tem[0], "%d", data_encoder_3_motor[END_3_MOTOR - i]);
 8004f06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f08:	f1c3 0313 	rsb	r3, r3, #19
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4413      	add	r3, r2
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	461a      	mov	r2, r3
 8004f16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004f1a:	494c      	ldr	r1, [pc, #304]	; (800504c <Handles_UART_6_motor+0x208>)
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 f897 	bl	8005050 <siprintf>
		Data_Encoder[i] = tem[0];
 8004f22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f24:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f28:	4413      	add	r3, r2
 8004f2a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8004f2e:	701a      	strb	r2, [r3, #0]
	for(int i = START_3_MOTOR; i <= END_3_MOTOR; i++)
 8004f30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f32:	3301      	adds	r3, #1
 8004f34:	667b      	str	r3, [r7, #100]	; 0x64
 8004f36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f38:	2b13      	cmp	r3, #19
 8004f3a:	dde4      	ble.n	8004f06 <Handles_UART_6_motor+0xc2>
	}
	//Syntax 1 byte
	Data_Encoder[END_3_MOTOR+1] = 'c';
 8004f3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f40:	3314      	adds	r3, #20
 8004f42:	2263      	movs	r2, #99	; 0x63
 8004f44:	701a      	strb	r2, [r3, #0]

	//TOTAL 7 BYTES
	//Sign data 1 byte
	Data_Encoder[START_4_MOTOR-1] = data_encoder_4_motor[byteSign];
 8004f46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f4a:	3315      	adds	r3, #21
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	7952      	ldrb	r2, [r2, #5]
 8004f50:	701a      	strb	r2, [r3, #0]
	//Number data 5 byte
	for(int i = START_4_MOTOR; i <= END_4_MOTOR; i++)
 8004f52:	2316      	movs	r3, #22
 8004f54:	663b      	str	r3, [r7, #96]	; 0x60
 8004f56:	e017      	b.n	8004f88 <Handles_UART_6_motor+0x144>
	{
		char tem[12];
		sprintf(&tem[0], "%d", data_encoder_4_motor[END_4_MOTOR - i]);
 8004f58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f5a:	f1c3 031a 	rsb	r3, r3, #26
 8004f5e:	461a      	mov	r2, r3
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	4413      	add	r3, r2
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	461a      	mov	r2, r3
 8004f68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f6c:	4937      	ldr	r1, [pc, #220]	; (800504c <Handles_UART_6_motor+0x208>)
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 f86e 	bl	8005050 <siprintf>
		Data_Encoder[i] = tem[0];
 8004f74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004f80:	701a      	strb	r2, [r3, #0]
	for(int i = START_4_MOTOR; i <= END_4_MOTOR; i++)
 8004f82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f84:	3301      	adds	r3, #1
 8004f86:	663b      	str	r3, [r7, #96]	; 0x60
 8004f88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f8a:	2b1a      	cmp	r3, #26
 8004f8c:	dde4      	ble.n	8004f58 <Handles_UART_6_motor+0x114>
	}
	//Syntax 1 byte
	Data_Encoder[END_4_MOTOR+1] = 'd';
 8004f8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f92:	331b      	adds	r3, #27
 8004f94:	2264      	movs	r2, #100	; 0x64
 8004f96:	701a      	strb	r2, [r3, #0]

	//TOTAL 7 BYTES
	//Sign data 1 byte
	Data_Encoder[START_5_MOTOR-1] = data_encoder_5_motor[byteSign];
 8004f98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f9c:	331c      	adds	r3, #28
 8004f9e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004fa0:	7952      	ldrb	r2, [r2, #5]
 8004fa2:	701a      	strb	r2, [r3, #0]
	//Number data 5 byte
	for(int i = START_5_MOTOR; i <= END_5_MOTOR; i++)
 8004fa4:	231d      	movs	r3, #29
 8004fa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fa8:	e016      	b.n	8004fd8 <Handles_UART_6_motor+0x194>
	{
		char tem[12];
		sprintf(&tem[0], "%d", data_encoder_5_motor[END_5_MOTOR - i]);
 8004faa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fac:	f1c3 0321 	rsb	r3, r3, #33	; 0x21
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fb4:	4413      	add	r3, r2
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	f107 031c 	add.w	r3, r7, #28
 8004fbe:	4923      	ldr	r1, [pc, #140]	; (800504c <Handles_UART_6_motor+0x208>)
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 f845 	bl	8005050 <siprintf>
		Data_Encoder[i] = tem[0];
 8004fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fc8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004fcc:	4413      	add	r3, r2
 8004fce:	7f3a      	ldrb	r2, [r7, #28]
 8004fd0:	701a      	strb	r2, [r3, #0]
	for(int i = START_5_MOTOR; i <= END_5_MOTOR; i++)
 8004fd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fda:	2b21      	cmp	r3, #33	; 0x21
 8004fdc:	dde5      	ble.n	8004faa <Handles_UART_6_motor+0x166>
	}
	//Syntax 1 byte
	Data_Encoder[END_5_MOTOR+1] = 'e';
 8004fde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004fe2:	3322      	adds	r3, #34	; 0x22
 8004fe4:	2265      	movs	r2, #101	; 0x65
 8004fe6:	701a      	strb	r2, [r3, #0]

	//TOTAL 7 BYTES
	//Sign data 1 byte
	Data_Encoder[START_6_MOTOR-1] = data_encoder_6_motor[byteSign];
 8004fe8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004fec:	3323      	adds	r3, #35	; 0x23
 8004fee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004ff0:	7952      	ldrb	r2, [r2, #5]
 8004ff2:	701a      	strb	r2, [r3, #0]
	//Number data 5 byte
	for(int i = START_6_MOTOR; i <= END_6_MOTOR; i++)
 8004ff4:	2324      	movs	r3, #36	; 0x24
 8004ff6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ff8:	e016      	b.n	8005028 <Handles_UART_6_motor+0x1e4>
	{
		char tem[12];
		sprintf(&tem[0], "%d", data_encoder_6_motor[END_6_MOTOR - i]);
 8004ffa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ffc:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8005000:	461a      	mov	r2, r3
 8005002:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005004:	4413      	add	r3, r2
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	461a      	mov	r2, r3
 800500a:	f107 0310 	add.w	r3, r7, #16
 800500e:	490f      	ldr	r1, [pc, #60]	; (800504c <Handles_UART_6_motor+0x208>)
 8005010:	4618      	mov	r0, r3
 8005012:	f000 f81d 	bl	8005050 <siprintf>
		Data_Encoder[i] = tem[0];
 8005016:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005018:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800501c:	4413      	add	r3, r2
 800501e:	7c3a      	ldrb	r2, [r7, #16]
 8005020:	701a      	strb	r2, [r3, #0]
	for(int i = START_6_MOTOR; i <= END_6_MOTOR; i++)
 8005022:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005024:	3301      	adds	r3, #1
 8005026:	65bb      	str	r3, [r7, #88]	; 0x58
 8005028:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800502a:	2b28      	cmp	r3, #40	; 0x28
 800502c:	dde5      	ble.n	8004ffa <Handles_UART_6_motor+0x1b6>
	}
	//Syntax 1 byte
	Data_Encoder[END_6_MOTOR+1] = 'f';
 800502e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005032:	3329      	adds	r3, #41	; 0x29
 8005034:	2266      	movs	r2, #102	; 0x66
 8005036:	701a      	strb	r2, [r3, #0]

	Data_Encoder[END_6_MOTOR+2] = 's';
 8005038:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800503c:	332a      	adds	r3, #42	; 0x2a
 800503e:	2273      	movs	r2, #115	; 0x73
 8005040:	701a      	strb	r2, [r3, #0]
}
 8005042:	bf00      	nop
 8005044:	3770      	adds	r7, #112	; 0x70
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	080059c8 	.word	0x080059c8

08005050 <siprintf>:
 8005050:	b40e      	push	{r1, r2, r3}
 8005052:	b500      	push	{lr}
 8005054:	b09c      	sub	sp, #112	; 0x70
 8005056:	ab1d      	add	r3, sp, #116	; 0x74
 8005058:	9002      	str	r0, [sp, #8]
 800505a:	9006      	str	r0, [sp, #24]
 800505c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005060:	4809      	ldr	r0, [pc, #36]	; (8005088 <siprintf+0x38>)
 8005062:	9107      	str	r1, [sp, #28]
 8005064:	9104      	str	r1, [sp, #16]
 8005066:	4909      	ldr	r1, [pc, #36]	; (800508c <siprintf+0x3c>)
 8005068:	f853 2b04 	ldr.w	r2, [r3], #4
 800506c:	9105      	str	r1, [sp, #20]
 800506e:	6800      	ldr	r0, [r0, #0]
 8005070:	9301      	str	r3, [sp, #4]
 8005072:	a902      	add	r1, sp, #8
 8005074:	f000 f992 	bl	800539c <_svfiprintf_r>
 8005078:	9b02      	ldr	r3, [sp, #8]
 800507a:	2200      	movs	r2, #0
 800507c:	701a      	strb	r2, [r3, #0]
 800507e:	b01c      	add	sp, #112	; 0x70
 8005080:	f85d eb04 	ldr.w	lr, [sp], #4
 8005084:	b003      	add	sp, #12
 8005086:	4770      	bx	lr
 8005088:	20000084 	.word	0x20000084
 800508c:	ffff0208 	.word	0xffff0208

08005090 <memset>:
 8005090:	4402      	add	r2, r0
 8005092:	4603      	mov	r3, r0
 8005094:	4293      	cmp	r3, r2
 8005096:	d100      	bne.n	800509a <memset+0xa>
 8005098:	4770      	bx	lr
 800509a:	f803 1b01 	strb.w	r1, [r3], #1
 800509e:	e7f9      	b.n	8005094 <memset+0x4>

080050a0 <__errno>:
 80050a0:	4b01      	ldr	r3, [pc, #4]	; (80050a8 <__errno+0x8>)
 80050a2:	6818      	ldr	r0, [r3, #0]
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	20000084 	.word	0x20000084

080050ac <__libc_init_array>:
 80050ac:	b570      	push	{r4, r5, r6, lr}
 80050ae:	4d0d      	ldr	r5, [pc, #52]	; (80050e4 <__libc_init_array+0x38>)
 80050b0:	4c0d      	ldr	r4, [pc, #52]	; (80050e8 <__libc_init_array+0x3c>)
 80050b2:	1b64      	subs	r4, r4, r5
 80050b4:	10a4      	asrs	r4, r4, #2
 80050b6:	2600      	movs	r6, #0
 80050b8:	42a6      	cmp	r6, r4
 80050ba:	d109      	bne.n	80050d0 <__libc_init_array+0x24>
 80050bc:	4d0b      	ldr	r5, [pc, #44]	; (80050ec <__libc_init_array+0x40>)
 80050be:	4c0c      	ldr	r4, [pc, #48]	; (80050f0 <__libc_init_array+0x44>)
 80050c0:	f000 fc6a 	bl	8005998 <_init>
 80050c4:	1b64      	subs	r4, r4, r5
 80050c6:	10a4      	asrs	r4, r4, #2
 80050c8:	2600      	movs	r6, #0
 80050ca:	42a6      	cmp	r6, r4
 80050cc:	d105      	bne.n	80050da <__libc_init_array+0x2e>
 80050ce:	bd70      	pop	{r4, r5, r6, pc}
 80050d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050d4:	4798      	blx	r3
 80050d6:	3601      	adds	r6, #1
 80050d8:	e7ee      	b.n	80050b8 <__libc_init_array+0xc>
 80050da:	f855 3b04 	ldr.w	r3, [r5], #4
 80050de:	4798      	blx	r3
 80050e0:	3601      	adds	r6, #1
 80050e2:	e7f2      	b.n	80050ca <__libc_init_array+0x1e>
 80050e4:	08005a20 	.word	0x08005a20
 80050e8:	08005a20 	.word	0x08005a20
 80050ec:	08005a20 	.word	0x08005a20
 80050f0:	08005a24 	.word	0x08005a24

080050f4 <__retarget_lock_acquire_recursive>:
 80050f4:	4770      	bx	lr

080050f6 <__retarget_lock_release_recursive>:
 80050f6:	4770      	bx	lr

080050f8 <_free_r>:
 80050f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050fa:	2900      	cmp	r1, #0
 80050fc:	d044      	beq.n	8005188 <_free_r+0x90>
 80050fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005102:	9001      	str	r0, [sp, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	f1a1 0404 	sub.w	r4, r1, #4
 800510a:	bfb8      	it	lt
 800510c:	18e4      	addlt	r4, r4, r3
 800510e:	f000 f8df 	bl	80052d0 <__malloc_lock>
 8005112:	4a1e      	ldr	r2, [pc, #120]	; (800518c <_free_r+0x94>)
 8005114:	9801      	ldr	r0, [sp, #4]
 8005116:	6813      	ldr	r3, [r2, #0]
 8005118:	b933      	cbnz	r3, 8005128 <_free_r+0x30>
 800511a:	6063      	str	r3, [r4, #4]
 800511c:	6014      	str	r4, [r2, #0]
 800511e:	b003      	add	sp, #12
 8005120:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005124:	f000 b8da 	b.w	80052dc <__malloc_unlock>
 8005128:	42a3      	cmp	r3, r4
 800512a:	d908      	bls.n	800513e <_free_r+0x46>
 800512c:	6825      	ldr	r5, [r4, #0]
 800512e:	1961      	adds	r1, r4, r5
 8005130:	428b      	cmp	r3, r1
 8005132:	bf01      	itttt	eq
 8005134:	6819      	ldreq	r1, [r3, #0]
 8005136:	685b      	ldreq	r3, [r3, #4]
 8005138:	1949      	addeq	r1, r1, r5
 800513a:	6021      	streq	r1, [r4, #0]
 800513c:	e7ed      	b.n	800511a <_free_r+0x22>
 800513e:	461a      	mov	r2, r3
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	b10b      	cbz	r3, 8005148 <_free_r+0x50>
 8005144:	42a3      	cmp	r3, r4
 8005146:	d9fa      	bls.n	800513e <_free_r+0x46>
 8005148:	6811      	ldr	r1, [r2, #0]
 800514a:	1855      	adds	r5, r2, r1
 800514c:	42a5      	cmp	r5, r4
 800514e:	d10b      	bne.n	8005168 <_free_r+0x70>
 8005150:	6824      	ldr	r4, [r4, #0]
 8005152:	4421      	add	r1, r4
 8005154:	1854      	adds	r4, r2, r1
 8005156:	42a3      	cmp	r3, r4
 8005158:	6011      	str	r1, [r2, #0]
 800515a:	d1e0      	bne.n	800511e <_free_r+0x26>
 800515c:	681c      	ldr	r4, [r3, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	6053      	str	r3, [r2, #4]
 8005162:	440c      	add	r4, r1
 8005164:	6014      	str	r4, [r2, #0]
 8005166:	e7da      	b.n	800511e <_free_r+0x26>
 8005168:	d902      	bls.n	8005170 <_free_r+0x78>
 800516a:	230c      	movs	r3, #12
 800516c:	6003      	str	r3, [r0, #0]
 800516e:	e7d6      	b.n	800511e <_free_r+0x26>
 8005170:	6825      	ldr	r5, [r4, #0]
 8005172:	1961      	adds	r1, r4, r5
 8005174:	428b      	cmp	r3, r1
 8005176:	bf04      	itt	eq
 8005178:	6819      	ldreq	r1, [r3, #0]
 800517a:	685b      	ldreq	r3, [r3, #4]
 800517c:	6063      	str	r3, [r4, #4]
 800517e:	bf04      	itt	eq
 8005180:	1949      	addeq	r1, r1, r5
 8005182:	6021      	streq	r1, [r4, #0]
 8005184:	6054      	str	r4, [r2, #4]
 8005186:	e7ca      	b.n	800511e <_free_r+0x26>
 8005188:	b003      	add	sp, #12
 800518a:	bd30      	pop	{r4, r5, pc}
 800518c:	200003f4 	.word	0x200003f4

08005190 <sbrk_aligned>:
 8005190:	b570      	push	{r4, r5, r6, lr}
 8005192:	4e0e      	ldr	r6, [pc, #56]	; (80051cc <sbrk_aligned+0x3c>)
 8005194:	460c      	mov	r4, r1
 8005196:	6831      	ldr	r1, [r6, #0]
 8005198:	4605      	mov	r5, r0
 800519a:	b911      	cbnz	r1, 80051a2 <sbrk_aligned+0x12>
 800519c:	f000 fba6 	bl	80058ec <_sbrk_r>
 80051a0:	6030      	str	r0, [r6, #0]
 80051a2:	4621      	mov	r1, r4
 80051a4:	4628      	mov	r0, r5
 80051a6:	f000 fba1 	bl	80058ec <_sbrk_r>
 80051aa:	1c43      	adds	r3, r0, #1
 80051ac:	d00a      	beq.n	80051c4 <sbrk_aligned+0x34>
 80051ae:	1cc4      	adds	r4, r0, #3
 80051b0:	f024 0403 	bic.w	r4, r4, #3
 80051b4:	42a0      	cmp	r0, r4
 80051b6:	d007      	beq.n	80051c8 <sbrk_aligned+0x38>
 80051b8:	1a21      	subs	r1, r4, r0
 80051ba:	4628      	mov	r0, r5
 80051bc:	f000 fb96 	bl	80058ec <_sbrk_r>
 80051c0:	3001      	adds	r0, #1
 80051c2:	d101      	bne.n	80051c8 <sbrk_aligned+0x38>
 80051c4:	f04f 34ff 	mov.w	r4, #4294967295
 80051c8:	4620      	mov	r0, r4
 80051ca:	bd70      	pop	{r4, r5, r6, pc}
 80051cc:	200003f8 	.word	0x200003f8

080051d0 <_malloc_r>:
 80051d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051d4:	1ccd      	adds	r5, r1, #3
 80051d6:	f025 0503 	bic.w	r5, r5, #3
 80051da:	3508      	adds	r5, #8
 80051dc:	2d0c      	cmp	r5, #12
 80051de:	bf38      	it	cc
 80051e0:	250c      	movcc	r5, #12
 80051e2:	2d00      	cmp	r5, #0
 80051e4:	4607      	mov	r7, r0
 80051e6:	db01      	blt.n	80051ec <_malloc_r+0x1c>
 80051e8:	42a9      	cmp	r1, r5
 80051ea:	d905      	bls.n	80051f8 <_malloc_r+0x28>
 80051ec:	230c      	movs	r3, #12
 80051ee:	603b      	str	r3, [r7, #0]
 80051f0:	2600      	movs	r6, #0
 80051f2:	4630      	mov	r0, r6
 80051f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80052cc <_malloc_r+0xfc>
 80051fc:	f000 f868 	bl	80052d0 <__malloc_lock>
 8005200:	f8d8 3000 	ldr.w	r3, [r8]
 8005204:	461c      	mov	r4, r3
 8005206:	bb5c      	cbnz	r4, 8005260 <_malloc_r+0x90>
 8005208:	4629      	mov	r1, r5
 800520a:	4638      	mov	r0, r7
 800520c:	f7ff ffc0 	bl	8005190 <sbrk_aligned>
 8005210:	1c43      	adds	r3, r0, #1
 8005212:	4604      	mov	r4, r0
 8005214:	d155      	bne.n	80052c2 <_malloc_r+0xf2>
 8005216:	f8d8 4000 	ldr.w	r4, [r8]
 800521a:	4626      	mov	r6, r4
 800521c:	2e00      	cmp	r6, #0
 800521e:	d145      	bne.n	80052ac <_malloc_r+0xdc>
 8005220:	2c00      	cmp	r4, #0
 8005222:	d048      	beq.n	80052b6 <_malloc_r+0xe6>
 8005224:	6823      	ldr	r3, [r4, #0]
 8005226:	4631      	mov	r1, r6
 8005228:	4638      	mov	r0, r7
 800522a:	eb04 0903 	add.w	r9, r4, r3
 800522e:	f000 fb5d 	bl	80058ec <_sbrk_r>
 8005232:	4581      	cmp	r9, r0
 8005234:	d13f      	bne.n	80052b6 <_malloc_r+0xe6>
 8005236:	6821      	ldr	r1, [r4, #0]
 8005238:	1a6d      	subs	r5, r5, r1
 800523a:	4629      	mov	r1, r5
 800523c:	4638      	mov	r0, r7
 800523e:	f7ff ffa7 	bl	8005190 <sbrk_aligned>
 8005242:	3001      	adds	r0, #1
 8005244:	d037      	beq.n	80052b6 <_malloc_r+0xe6>
 8005246:	6823      	ldr	r3, [r4, #0]
 8005248:	442b      	add	r3, r5
 800524a:	6023      	str	r3, [r4, #0]
 800524c:	f8d8 3000 	ldr.w	r3, [r8]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d038      	beq.n	80052c6 <_malloc_r+0xf6>
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	42a2      	cmp	r2, r4
 8005258:	d12b      	bne.n	80052b2 <_malloc_r+0xe2>
 800525a:	2200      	movs	r2, #0
 800525c:	605a      	str	r2, [r3, #4]
 800525e:	e00f      	b.n	8005280 <_malloc_r+0xb0>
 8005260:	6822      	ldr	r2, [r4, #0]
 8005262:	1b52      	subs	r2, r2, r5
 8005264:	d41f      	bmi.n	80052a6 <_malloc_r+0xd6>
 8005266:	2a0b      	cmp	r2, #11
 8005268:	d917      	bls.n	800529a <_malloc_r+0xca>
 800526a:	1961      	adds	r1, r4, r5
 800526c:	42a3      	cmp	r3, r4
 800526e:	6025      	str	r5, [r4, #0]
 8005270:	bf18      	it	ne
 8005272:	6059      	strne	r1, [r3, #4]
 8005274:	6863      	ldr	r3, [r4, #4]
 8005276:	bf08      	it	eq
 8005278:	f8c8 1000 	streq.w	r1, [r8]
 800527c:	5162      	str	r2, [r4, r5]
 800527e:	604b      	str	r3, [r1, #4]
 8005280:	4638      	mov	r0, r7
 8005282:	f104 060b 	add.w	r6, r4, #11
 8005286:	f000 f829 	bl	80052dc <__malloc_unlock>
 800528a:	f026 0607 	bic.w	r6, r6, #7
 800528e:	1d23      	adds	r3, r4, #4
 8005290:	1af2      	subs	r2, r6, r3
 8005292:	d0ae      	beq.n	80051f2 <_malloc_r+0x22>
 8005294:	1b9b      	subs	r3, r3, r6
 8005296:	50a3      	str	r3, [r4, r2]
 8005298:	e7ab      	b.n	80051f2 <_malloc_r+0x22>
 800529a:	42a3      	cmp	r3, r4
 800529c:	6862      	ldr	r2, [r4, #4]
 800529e:	d1dd      	bne.n	800525c <_malloc_r+0x8c>
 80052a0:	f8c8 2000 	str.w	r2, [r8]
 80052a4:	e7ec      	b.n	8005280 <_malloc_r+0xb0>
 80052a6:	4623      	mov	r3, r4
 80052a8:	6864      	ldr	r4, [r4, #4]
 80052aa:	e7ac      	b.n	8005206 <_malloc_r+0x36>
 80052ac:	4634      	mov	r4, r6
 80052ae:	6876      	ldr	r6, [r6, #4]
 80052b0:	e7b4      	b.n	800521c <_malloc_r+0x4c>
 80052b2:	4613      	mov	r3, r2
 80052b4:	e7cc      	b.n	8005250 <_malloc_r+0x80>
 80052b6:	230c      	movs	r3, #12
 80052b8:	603b      	str	r3, [r7, #0]
 80052ba:	4638      	mov	r0, r7
 80052bc:	f000 f80e 	bl	80052dc <__malloc_unlock>
 80052c0:	e797      	b.n	80051f2 <_malloc_r+0x22>
 80052c2:	6025      	str	r5, [r4, #0]
 80052c4:	e7dc      	b.n	8005280 <_malloc_r+0xb0>
 80052c6:	605b      	str	r3, [r3, #4]
 80052c8:	deff      	udf	#255	; 0xff
 80052ca:	bf00      	nop
 80052cc:	200003f4 	.word	0x200003f4

080052d0 <__malloc_lock>:
 80052d0:	4801      	ldr	r0, [pc, #4]	; (80052d8 <__malloc_lock+0x8>)
 80052d2:	f7ff bf0f 	b.w	80050f4 <__retarget_lock_acquire_recursive>
 80052d6:	bf00      	nop
 80052d8:	200003f0 	.word	0x200003f0

080052dc <__malloc_unlock>:
 80052dc:	4801      	ldr	r0, [pc, #4]	; (80052e4 <__malloc_unlock+0x8>)
 80052de:	f7ff bf0a 	b.w	80050f6 <__retarget_lock_release_recursive>
 80052e2:	bf00      	nop
 80052e4:	200003f0 	.word	0x200003f0

080052e8 <__ssputs_r>:
 80052e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052ec:	688e      	ldr	r6, [r1, #8]
 80052ee:	461f      	mov	r7, r3
 80052f0:	42be      	cmp	r6, r7
 80052f2:	680b      	ldr	r3, [r1, #0]
 80052f4:	4682      	mov	sl, r0
 80052f6:	460c      	mov	r4, r1
 80052f8:	4690      	mov	r8, r2
 80052fa:	d82c      	bhi.n	8005356 <__ssputs_r+0x6e>
 80052fc:	898a      	ldrh	r2, [r1, #12]
 80052fe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005302:	d026      	beq.n	8005352 <__ssputs_r+0x6a>
 8005304:	6965      	ldr	r5, [r4, #20]
 8005306:	6909      	ldr	r1, [r1, #16]
 8005308:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800530c:	eba3 0901 	sub.w	r9, r3, r1
 8005310:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005314:	1c7b      	adds	r3, r7, #1
 8005316:	444b      	add	r3, r9
 8005318:	106d      	asrs	r5, r5, #1
 800531a:	429d      	cmp	r5, r3
 800531c:	bf38      	it	cc
 800531e:	461d      	movcc	r5, r3
 8005320:	0553      	lsls	r3, r2, #21
 8005322:	d527      	bpl.n	8005374 <__ssputs_r+0x8c>
 8005324:	4629      	mov	r1, r5
 8005326:	f7ff ff53 	bl	80051d0 <_malloc_r>
 800532a:	4606      	mov	r6, r0
 800532c:	b360      	cbz	r0, 8005388 <__ssputs_r+0xa0>
 800532e:	6921      	ldr	r1, [r4, #16]
 8005330:	464a      	mov	r2, r9
 8005332:	f000 faeb 	bl	800590c <memcpy>
 8005336:	89a3      	ldrh	r3, [r4, #12]
 8005338:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800533c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005340:	81a3      	strh	r3, [r4, #12]
 8005342:	6126      	str	r6, [r4, #16]
 8005344:	6165      	str	r5, [r4, #20]
 8005346:	444e      	add	r6, r9
 8005348:	eba5 0509 	sub.w	r5, r5, r9
 800534c:	6026      	str	r6, [r4, #0]
 800534e:	60a5      	str	r5, [r4, #8]
 8005350:	463e      	mov	r6, r7
 8005352:	42be      	cmp	r6, r7
 8005354:	d900      	bls.n	8005358 <__ssputs_r+0x70>
 8005356:	463e      	mov	r6, r7
 8005358:	6820      	ldr	r0, [r4, #0]
 800535a:	4632      	mov	r2, r6
 800535c:	4641      	mov	r1, r8
 800535e:	f000 faab 	bl	80058b8 <memmove>
 8005362:	68a3      	ldr	r3, [r4, #8]
 8005364:	1b9b      	subs	r3, r3, r6
 8005366:	60a3      	str	r3, [r4, #8]
 8005368:	6823      	ldr	r3, [r4, #0]
 800536a:	4433      	add	r3, r6
 800536c:	6023      	str	r3, [r4, #0]
 800536e:	2000      	movs	r0, #0
 8005370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005374:	462a      	mov	r2, r5
 8005376:	f000 fad7 	bl	8005928 <_realloc_r>
 800537a:	4606      	mov	r6, r0
 800537c:	2800      	cmp	r0, #0
 800537e:	d1e0      	bne.n	8005342 <__ssputs_r+0x5a>
 8005380:	6921      	ldr	r1, [r4, #16]
 8005382:	4650      	mov	r0, sl
 8005384:	f7ff feb8 	bl	80050f8 <_free_r>
 8005388:	230c      	movs	r3, #12
 800538a:	f8ca 3000 	str.w	r3, [sl]
 800538e:	89a3      	ldrh	r3, [r4, #12]
 8005390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005394:	81a3      	strh	r3, [r4, #12]
 8005396:	f04f 30ff 	mov.w	r0, #4294967295
 800539a:	e7e9      	b.n	8005370 <__ssputs_r+0x88>

0800539c <_svfiprintf_r>:
 800539c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a0:	4698      	mov	r8, r3
 80053a2:	898b      	ldrh	r3, [r1, #12]
 80053a4:	061b      	lsls	r3, r3, #24
 80053a6:	b09d      	sub	sp, #116	; 0x74
 80053a8:	4607      	mov	r7, r0
 80053aa:	460d      	mov	r5, r1
 80053ac:	4614      	mov	r4, r2
 80053ae:	d50e      	bpl.n	80053ce <_svfiprintf_r+0x32>
 80053b0:	690b      	ldr	r3, [r1, #16]
 80053b2:	b963      	cbnz	r3, 80053ce <_svfiprintf_r+0x32>
 80053b4:	2140      	movs	r1, #64	; 0x40
 80053b6:	f7ff ff0b 	bl	80051d0 <_malloc_r>
 80053ba:	6028      	str	r0, [r5, #0]
 80053bc:	6128      	str	r0, [r5, #16]
 80053be:	b920      	cbnz	r0, 80053ca <_svfiprintf_r+0x2e>
 80053c0:	230c      	movs	r3, #12
 80053c2:	603b      	str	r3, [r7, #0]
 80053c4:	f04f 30ff 	mov.w	r0, #4294967295
 80053c8:	e0d0      	b.n	800556c <_svfiprintf_r+0x1d0>
 80053ca:	2340      	movs	r3, #64	; 0x40
 80053cc:	616b      	str	r3, [r5, #20]
 80053ce:	2300      	movs	r3, #0
 80053d0:	9309      	str	r3, [sp, #36]	; 0x24
 80053d2:	2320      	movs	r3, #32
 80053d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80053dc:	2330      	movs	r3, #48	; 0x30
 80053de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005584 <_svfiprintf_r+0x1e8>
 80053e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053e6:	f04f 0901 	mov.w	r9, #1
 80053ea:	4623      	mov	r3, r4
 80053ec:	469a      	mov	sl, r3
 80053ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053f2:	b10a      	cbz	r2, 80053f8 <_svfiprintf_r+0x5c>
 80053f4:	2a25      	cmp	r2, #37	; 0x25
 80053f6:	d1f9      	bne.n	80053ec <_svfiprintf_r+0x50>
 80053f8:	ebba 0b04 	subs.w	fp, sl, r4
 80053fc:	d00b      	beq.n	8005416 <_svfiprintf_r+0x7a>
 80053fe:	465b      	mov	r3, fp
 8005400:	4622      	mov	r2, r4
 8005402:	4629      	mov	r1, r5
 8005404:	4638      	mov	r0, r7
 8005406:	f7ff ff6f 	bl	80052e8 <__ssputs_r>
 800540a:	3001      	adds	r0, #1
 800540c:	f000 80a9 	beq.w	8005562 <_svfiprintf_r+0x1c6>
 8005410:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005412:	445a      	add	r2, fp
 8005414:	9209      	str	r2, [sp, #36]	; 0x24
 8005416:	f89a 3000 	ldrb.w	r3, [sl]
 800541a:	2b00      	cmp	r3, #0
 800541c:	f000 80a1 	beq.w	8005562 <_svfiprintf_r+0x1c6>
 8005420:	2300      	movs	r3, #0
 8005422:	f04f 32ff 	mov.w	r2, #4294967295
 8005426:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800542a:	f10a 0a01 	add.w	sl, sl, #1
 800542e:	9304      	str	r3, [sp, #16]
 8005430:	9307      	str	r3, [sp, #28]
 8005432:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005436:	931a      	str	r3, [sp, #104]	; 0x68
 8005438:	4654      	mov	r4, sl
 800543a:	2205      	movs	r2, #5
 800543c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005440:	4850      	ldr	r0, [pc, #320]	; (8005584 <_svfiprintf_r+0x1e8>)
 8005442:	f7fa fec5 	bl	80001d0 <memchr>
 8005446:	9a04      	ldr	r2, [sp, #16]
 8005448:	b9d8      	cbnz	r0, 8005482 <_svfiprintf_r+0xe6>
 800544a:	06d0      	lsls	r0, r2, #27
 800544c:	bf44      	itt	mi
 800544e:	2320      	movmi	r3, #32
 8005450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005454:	0711      	lsls	r1, r2, #28
 8005456:	bf44      	itt	mi
 8005458:	232b      	movmi	r3, #43	; 0x2b
 800545a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800545e:	f89a 3000 	ldrb.w	r3, [sl]
 8005462:	2b2a      	cmp	r3, #42	; 0x2a
 8005464:	d015      	beq.n	8005492 <_svfiprintf_r+0xf6>
 8005466:	9a07      	ldr	r2, [sp, #28]
 8005468:	4654      	mov	r4, sl
 800546a:	2000      	movs	r0, #0
 800546c:	f04f 0c0a 	mov.w	ip, #10
 8005470:	4621      	mov	r1, r4
 8005472:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005476:	3b30      	subs	r3, #48	; 0x30
 8005478:	2b09      	cmp	r3, #9
 800547a:	d94d      	bls.n	8005518 <_svfiprintf_r+0x17c>
 800547c:	b1b0      	cbz	r0, 80054ac <_svfiprintf_r+0x110>
 800547e:	9207      	str	r2, [sp, #28]
 8005480:	e014      	b.n	80054ac <_svfiprintf_r+0x110>
 8005482:	eba0 0308 	sub.w	r3, r0, r8
 8005486:	fa09 f303 	lsl.w	r3, r9, r3
 800548a:	4313      	orrs	r3, r2
 800548c:	9304      	str	r3, [sp, #16]
 800548e:	46a2      	mov	sl, r4
 8005490:	e7d2      	b.n	8005438 <_svfiprintf_r+0x9c>
 8005492:	9b03      	ldr	r3, [sp, #12]
 8005494:	1d19      	adds	r1, r3, #4
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	9103      	str	r1, [sp, #12]
 800549a:	2b00      	cmp	r3, #0
 800549c:	bfbb      	ittet	lt
 800549e:	425b      	neglt	r3, r3
 80054a0:	f042 0202 	orrlt.w	r2, r2, #2
 80054a4:	9307      	strge	r3, [sp, #28]
 80054a6:	9307      	strlt	r3, [sp, #28]
 80054a8:	bfb8      	it	lt
 80054aa:	9204      	strlt	r2, [sp, #16]
 80054ac:	7823      	ldrb	r3, [r4, #0]
 80054ae:	2b2e      	cmp	r3, #46	; 0x2e
 80054b0:	d10c      	bne.n	80054cc <_svfiprintf_r+0x130>
 80054b2:	7863      	ldrb	r3, [r4, #1]
 80054b4:	2b2a      	cmp	r3, #42	; 0x2a
 80054b6:	d134      	bne.n	8005522 <_svfiprintf_r+0x186>
 80054b8:	9b03      	ldr	r3, [sp, #12]
 80054ba:	1d1a      	adds	r2, r3, #4
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	9203      	str	r2, [sp, #12]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	bfb8      	it	lt
 80054c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80054c8:	3402      	adds	r4, #2
 80054ca:	9305      	str	r3, [sp, #20]
 80054cc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005594 <_svfiprintf_r+0x1f8>
 80054d0:	7821      	ldrb	r1, [r4, #0]
 80054d2:	2203      	movs	r2, #3
 80054d4:	4650      	mov	r0, sl
 80054d6:	f7fa fe7b 	bl	80001d0 <memchr>
 80054da:	b138      	cbz	r0, 80054ec <_svfiprintf_r+0x150>
 80054dc:	9b04      	ldr	r3, [sp, #16]
 80054de:	eba0 000a 	sub.w	r0, r0, sl
 80054e2:	2240      	movs	r2, #64	; 0x40
 80054e4:	4082      	lsls	r2, r0
 80054e6:	4313      	orrs	r3, r2
 80054e8:	3401      	adds	r4, #1
 80054ea:	9304      	str	r3, [sp, #16]
 80054ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054f0:	4825      	ldr	r0, [pc, #148]	; (8005588 <_svfiprintf_r+0x1ec>)
 80054f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054f6:	2206      	movs	r2, #6
 80054f8:	f7fa fe6a 	bl	80001d0 <memchr>
 80054fc:	2800      	cmp	r0, #0
 80054fe:	d038      	beq.n	8005572 <_svfiprintf_r+0x1d6>
 8005500:	4b22      	ldr	r3, [pc, #136]	; (800558c <_svfiprintf_r+0x1f0>)
 8005502:	bb1b      	cbnz	r3, 800554c <_svfiprintf_r+0x1b0>
 8005504:	9b03      	ldr	r3, [sp, #12]
 8005506:	3307      	adds	r3, #7
 8005508:	f023 0307 	bic.w	r3, r3, #7
 800550c:	3308      	adds	r3, #8
 800550e:	9303      	str	r3, [sp, #12]
 8005510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005512:	4433      	add	r3, r6
 8005514:	9309      	str	r3, [sp, #36]	; 0x24
 8005516:	e768      	b.n	80053ea <_svfiprintf_r+0x4e>
 8005518:	fb0c 3202 	mla	r2, ip, r2, r3
 800551c:	460c      	mov	r4, r1
 800551e:	2001      	movs	r0, #1
 8005520:	e7a6      	b.n	8005470 <_svfiprintf_r+0xd4>
 8005522:	2300      	movs	r3, #0
 8005524:	3401      	adds	r4, #1
 8005526:	9305      	str	r3, [sp, #20]
 8005528:	4619      	mov	r1, r3
 800552a:	f04f 0c0a 	mov.w	ip, #10
 800552e:	4620      	mov	r0, r4
 8005530:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005534:	3a30      	subs	r2, #48	; 0x30
 8005536:	2a09      	cmp	r2, #9
 8005538:	d903      	bls.n	8005542 <_svfiprintf_r+0x1a6>
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0c6      	beq.n	80054cc <_svfiprintf_r+0x130>
 800553e:	9105      	str	r1, [sp, #20]
 8005540:	e7c4      	b.n	80054cc <_svfiprintf_r+0x130>
 8005542:	fb0c 2101 	mla	r1, ip, r1, r2
 8005546:	4604      	mov	r4, r0
 8005548:	2301      	movs	r3, #1
 800554a:	e7f0      	b.n	800552e <_svfiprintf_r+0x192>
 800554c:	ab03      	add	r3, sp, #12
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	462a      	mov	r2, r5
 8005552:	4b0f      	ldr	r3, [pc, #60]	; (8005590 <_svfiprintf_r+0x1f4>)
 8005554:	a904      	add	r1, sp, #16
 8005556:	4638      	mov	r0, r7
 8005558:	f3af 8000 	nop.w
 800555c:	1c42      	adds	r2, r0, #1
 800555e:	4606      	mov	r6, r0
 8005560:	d1d6      	bne.n	8005510 <_svfiprintf_r+0x174>
 8005562:	89ab      	ldrh	r3, [r5, #12]
 8005564:	065b      	lsls	r3, r3, #25
 8005566:	f53f af2d 	bmi.w	80053c4 <_svfiprintf_r+0x28>
 800556a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800556c:	b01d      	add	sp, #116	; 0x74
 800556e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005572:	ab03      	add	r3, sp, #12
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	462a      	mov	r2, r5
 8005578:	4b05      	ldr	r3, [pc, #20]	; (8005590 <_svfiprintf_r+0x1f4>)
 800557a:	a904      	add	r1, sp, #16
 800557c:	4638      	mov	r0, r7
 800557e:	f000 f879 	bl	8005674 <_printf_i>
 8005582:	e7eb      	b.n	800555c <_svfiprintf_r+0x1c0>
 8005584:	080059e4 	.word	0x080059e4
 8005588:	080059ee 	.word	0x080059ee
 800558c:	00000000 	.word	0x00000000
 8005590:	080052e9 	.word	0x080052e9
 8005594:	080059ea 	.word	0x080059ea

08005598 <_printf_common>:
 8005598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800559c:	4616      	mov	r6, r2
 800559e:	4699      	mov	r9, r3
 80055a0:	688a      	ldr	r2, [r1, #8]
 80055a2:	690b      	ldr	r3, [r1, #16]
 80055a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055a8:	4293      	cmp	r3, r2
 80055aa:	bfb8      	it	lt
 80055ac:	4613      	movlt	r3, r2
 80055ae:	6033      	str	r3, [r6, #0]
 80055b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055b4:	4607      	mov	r7, r0
 80055b6:	460c      	mov	r4, r1
 80055b8:	b10a      	cbz	r2, 80055be <_printf_common+0x26>
 80055ba:	3301      	adds	r3, #1
 80055bc:	6033      	str	r3, [r6, #0]
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	0699      	lsls	r1, r3, #26
 80055c2:	bf42      	ittt	mi
 80055c4:	6833      	ldrmi	r3, [r6, #0]
 80055c6:	3302      	addmi	r3, #2
 80055c8:	6033      	strmi	r3, [r6, #0]
 80055ca:	6825      	ldr	r5, [r4, #0]
 80055cc:	f015 0506 	ands.w	r5, r5, #6
 80055d0:	d106      	bne.n	80055e0 <_printf_common+0x48>
 80055d2:	f104 0a19 	add.w	sl, r4, #25
 80055d6:	68e3      	ldr	r3, [r4, #12]
 80055d8:	6832      	ldr	r2, [r6, #0]
 80055da:	1a9b      	subs	r3, r3, r2
 80055dc:	42ab      	cmp	r3, r5
 80055de:	dc26      	bgt.n	800562e <_printf_common+0x96>
 80055e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055e4:	1e13      	subs	r3, r2, #0
 80055e6:	6822      	ldr	r2, [r4, #0]
 80055e8:	bf18      	it	ne
 80055ea:	2301      	movne	r3, #1
 80055ec:	0692      	lsls	r2, r2, #26
 80055ee:	d42b      	bmi.n	8005648 <_printf_common+0xb0>
 80055f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055f4:	4649      	mov	r1, r9
 80055f6:	4638      	mov	r0, r7
 80055f8:	47c0      	blx	r8
 80055fa:	3001      	adds	r0, #1
 80055fc:	d01e      	beq.n	800563c <_printf_common+0xa4>
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	6922      	ldr	r2, [r4, #16]
 8005602:	f003 0306 	and.w	r3, r3, #6
 8005606:	2b04      	cmp	r3, #4
 8005608:	bf02      	ittt	eq
 800560a:	68e5      	ldreq	r5, [r4, #12]
 800560c:	6833      	ldreq	r3, [r6, #0]
 800560e:	1aed      	subeq	r5, r5, r3
 8005610:	68a3      	ldr	r3, [r4, #8]
 8005612:	bf0c      	ite	eq
 8005614:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005618:	2500      	movne	r5, #0
 800561a:	4293      	cmp	r3, r2
 800561c:	bfc4      	itt	gt
 800561e:	1a9b      	subgt	r3, r3, r2
 8005620:	18ed      	addgt	r5, r5, r3
 8005622:	2600      	movs	r6, #0
 8005624:	341a      	adds	r4, #26
 8005626:	42b5      	cmp	r5, r6
 8005628:	d11a      	bne.n	8005660 <_printf_common+0xc8>
 800562a:	2000      	movs	r0, #0
 800562c:	e008      	b.n	8005640 <_printf_common+0xa8>
 800562e:	2301      	movs	r3, #1
 8005630:	4652      	mov	r2, sl
 8005632:	4649      	mov	r1, r9
 8005634:	4638      	mov	r0, r7
 8005636:	47c0      	blx	r8
 8005638:	3001      	adds	r0, #1
 800563a:	d103      	bne.n	8005644 <_printf_common+0xac>
 800563c:	f04f 30ff 	mov.w	r0, #4294967295
 8005640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005644:	3501      	adds	r5, #1
 8005646:	e7c6      	b.n	80055d6 <_printf_common+0x3e>
 8005648:	18e1      	adds	r1, r4, r3
 800564a:	1c5a      	adds	r2, r3, #1
 800564c:	2030      	movs	r0, #48	; 0x30
 800564e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005652:	4422      	add	r2, r4
 8005654:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005658:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800565c:	3302      	adds	r3, #2
 800565e:	e7c7      	b.n	80055f0 <_printf_common+0x58>
 8005660:	2301      	movs	r3, #1
 8005662:	4622      	mov	r2, r4
 8005664:	4649      	mov	r1, r9
 8005666:	4638      	mov	r0, r7
 8005668:	47c0      	blx	r8
 800566a:	3001      	adds	r0, #1
 800566c:	d0e6      	beq.n	800563c <_printf_common+0xa4>
 800566e:	3601      	adds	r6, #1
 8005670:	e7d9      	b.n	8005626 <_printf_common+0x8e>
	...

08005674 <_printf_i>:
 8005674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005678:	7e0f      	ldrb	r7, [r1, #24]
 800567a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800567c:	2f78      	cmp	r7, #120	; 0x78
 800567e:	4691      	mov	r9, r2
 8005680:	4680      	mov	r8, r0
 8005682:	460c      	mov	r4, r1
 8005684:	469a      	mov	sl, r3
 8005686:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800568a:	d807      	bhi.n	800569c <_printf_i+0x28>
 800568c:	2f62      	cmp	r7, #98	; 0x62
 800568e:	d80a      	bhi.n	80056a6 <_printf_i+0x32>
 8005690:	2f00      	cmp	r7, #0
 8005692:	f000 80d4 	beq.w	800583e <_printf_i+0x1ca>
 8005696:	2f58      	cmp	r7, #88	; 0x58
 8005698:	f000 80c0 	beq.w	800581c <_printf_i+0x1a8>
 800569c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056a4:	e03a      	b.n	800571c <_printf_i+0xa8>
 80056a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056aa:	2b15      	cmp	r3, #21
 80056ac:	d8f6      	bhi.n	800569c <_printf_i+0x28>
 80056ae:	a101      	add	r1, pc, #4	; (adr r1, 80056b4 <_printf_i+0x40>)
 80056b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056b4:	0800570d 	.word	0x0800570d
 80056b8:	08005721 	.word	0x08005721
 80056bc:	0800569d 	.word	0x0800569d
 80056c0:	0800569d 	.word	0x0800569d
 80056c4:	0800569d 	.word	0x0800569d
 80056c8:	0800569d 	.word	0x0800569d
 80056cc:	08005721 	.word	0x08005721
 80056d0:	0800569d 	.word	0x0800569d
 80056d4:	0800569d 	.word	0x0800569d
 80056d8:	0800569d 	.word	0x0800569d
 80056dc:	0800569d 	.word	0x0800569d
 80056e0:	08005825 	.word	0x08005825
 80056e4:	0800574d 	.word	0x0800574d
 80056e8:	080057df 	.word	0x080057df
 80056ec:	0800569d 	.word	0x0800569d
 80056f0:	0800569d 	.word	0x0800569d
 80056f4:	08005847 	.word	0x08005847
 80056f8:	0800569d 	.word	0x0800569d
 80056fc:	0800574d 	.word	0x0800574d
 8005700:	0800569d 	.word	0x0800569d
 8005704:	0800569d 	.word	0x0800569d
 8005708:	080057e7 	.word	0x080057e7
 800570c:	682b      	ldr	r3, [r5, #0]
 800570e:	1d1a      	adds	r2, r3, #4
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	602a      	str	r2, [r5, #0]
 8005714:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005718:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800571c:	2301      	movs	r3, #1
 800571e:	e09f      	b.n	8005860 <_printf_i+0x1ec>
 8005720:	6820      	ldr	r0, [r4, #0]
 8005722:	682b      	ldr	r3, [r5, #0]
 8005724:	0607      	lsls	r7, r0, #24
 8005726:	f103 0104 	add.w	r1, r3, #4
 800572a:	6029      	str	r1, [r5, #0]
 800572c:	d501      	bpl.n	8005732 <_printf_i+0xbe>
 800572e:	681e      	ldr	r6, [r3, #0]
 8005730:	e003      	b.n	800573a <_printf_i+0xc6>
 8005732:	0646      	lsls	r6, r0, #25
 8005734:	d5fb      	bpl.n	800572e <_printf_i+0xba>
 8005736:	f9b3 6000 	ldrsh.w	r6, [r3]
 800573a:	2e00      	cmp	r6, #0
 800573c:	da03      	bge.n	8005746 <_printf_i+0xd2>
 800573e:	232d      	movs	r3, #45	; 0x2d
 8005740:	4276      	negs	r6, r6
 8005742:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005746:	485a      	ldr	r0, [pc, #360]	; (80058b0 <_printf_i+0x23c>)
 8005748:	230a      	movs	r3, #10
 800574a:	e012      	b.n	8005772 <_printf_i+0xfe>
 800574c:	682b      	ldr	r3, [r5, #0]
 800574e:	6820      	ldr	r0, [r4, #0]
 8005750:	1d19      	adds	r1, r3, #4
 8005752:	6029      	str	r1, [r5, #0]
 8005754:	0605      	lsls	r5, r0, #24
 8005756:	d501      	bpl.n	800575c <_printf_i+0xe8>
 8005758:	681e      	ldr	r6, [r3, #0]
 800575a:	e002      	b.n	8005762 <_printf_i+0xee>
 800575c:	0641      	lsls	r1, r0, #25
 800575e:	d5fb      	bpl.n	8005758 <_printf_i+0xe4>
 8005760:	881e      	ldrh	r6, [r3, #0]
 8005762:	4853      	ldr	r0, [pc, #332]	; (80058b0 <_printf_i+0x23c>)
 8005764:	2f6f      	cmp	r7, #111	; 0x6f
 8005766:	bf0c      	ite	eq
 8005768:	2308      	moveq	r3, #8
 800576a:	230a      	movne	r3, #10
 800576c:	2100      	movs	r1, #0
 800576e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005772:	6865      	ldr	r5, [r4, #4]
 8005774:	60a5      	str	r5, [r4, #8]
 8005776:	2d00      	cmp	r5, #0
 8005778:	bfa2      	ittt	ge
 800577a:	6821      	ldrge	r1, [r4, #0]
 800577c:	f021 0104 	bicge.w	r1, r1, #4
 8005780:	6021      	strge	r1, [r4, #0]
 8005782:	b90e      	cbnz	r6, 8005788 <_printf_i+0x114>
 8005784:	2d00      	cmp	r5, #0
 8005786:	d04b      	beq.n	8005820 <_printf_i+0x1ac>
 8005788:	4615      	mov	r5, r2
 800578a:	fbb6 f1f3 	udiv	r1, r6, r3
 800578e:	fb03 6711 	mls	r7, r3, r1, r6
 8005792:	5dc7      	ldrb	r7, [r0, r7]
 8005794:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005798:	4637      	mov	r7, r6
 800579a:	42bb      	cmp	r3, r7
 800579c:	460e      	mov	r6, r1
 800579e:	d9f4      	bls.n	800578a <_printf_i+0x116>
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d10b      	bne.n	80057bc <_printf_i+0x148>
 80057a4:	6823      	ldr	r3, [r4, #0]
 80057a6:	07de      	lsls	r6, r3, #31
 80057a8:	d508      	bpl.n	80057bc <_printf_i+0x148>
 80057aa:	6923      	ldr	r3, [r4, #16]
 80057ac:	6861      	ldr	r1, [r4, #4]
 80057ae:	4299      	cmp	r1, r3
 80057b0:	bfde      	ittt	le
 80057b2:	2330      	movle	r3, #48	; 0x30
 80057b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80057bc:	1b52      	subs	r2, r2, r5
 80057be:	6122      	str	r2, [r4, #16]
 80057c0:	f8cd a000 	str.w	sl, [sp]
 80057c4:	464b      	mov	r3, r9
 80057c6:	aa03      	add	r2, sp, #12
 80057c8:	4621      	mov	r1, r4
 80057ca:	4640      	mov	r0, r8
 80057cc:	f7ff fee4 	bl	8005598 <_printf_common>
 80057d0:	3001      	adds	r0, #1
 80057d2:	d14a      	bne.n	800586a <_printf_i+0x1f6>
 80057d4:	f04f 30ff 	mov.w	r0, #4294967295
 80057d8:	b004      	add	sp, #16
 80057da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057de:	6823      	ldr	r3, [r4, #0]
 80057e0:	f043 0320 	orr.w	r3, r3, #32
 80057e4:	6023      	str	r3, [r4, #0]
 80057e6:	4833      	ldr	r0, [pc, #204]	; (80058b4 <_printf_i+0x240>)
 80057e8:	2778      	movs	r7, #120	; 0x78
 80057ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80057ee:	6823      	ldr	r3, [r4, #0]
 80057f0:	6829      	ldr	r1, [r5, #0]
 80057f2:	061f      	lsls	r7, r3, #24
 80057f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80057f8:	d402      	bmi.n	8005800 <_printf_i+0x18c>
 80057fa:	065f      	lsls	r7, r3, #25
 80057fc:	bf48      	it	mi
 80057fe:	b2b6      	uxthmi	r6, r6
 8005800:	07df      	lsls	r7, r3, #31
 8005802:	bf48      	it	mi
 8005804:	f043 0320 	orrmi.w	r3, r3, #32
 8005808:	6029      	str	r1, [r5, #0]
 800580a:	bf48      	it	mi
 800580c:	6023      	strmi	r3, [r4, #0]
 800580e:	b91e      	cbnz	r6, 8005818 <_printf_i+0x1a4>
 8005810:	6823      	ldr	r3, [r4, #0]
 8005812:	f023 0320 	bic.w	r3, r3, #32
 8005816:	6023      	str	r3, [r4, #0]
 8005818:	2310      	movs	r3, #16
 800581a:	e7a7      	b.n	800576c <_printf_i+0xf8>
 800581c:	4824      	ldr	r0, [pc, #144]	; (80058b0 <_printf_i+0x23c>)
 800581e:	e7e4      	b.n	80057ea <_printf_i+0x176>
 8005820:	4615      	mov	r5, r2
 8005822:	e7bd      	b.n	80057a0 <_printf_i+0x12c>
 8005824:	682b      	ldr	r3, [r5, #0]
 8005826:	6826      	ldr	r6, [r4, #0]
 8005828:	6961      	ldr	r1, [r4, #20]
 800582a:	1d18      	adds	r0, r3, #4
 800582c:	6028      	str	r0, [r5, #0]
 800582e:	0635      	lsls	r5, r6, #24
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	d501      	bpl.n	8005838 <_printf_i+0x1c4>
 8005834:	6019      	str	r1, [r3, #0]
 8005836:	e002      	b.n	800583e <_printf_i+0x1ca>
 8005838:	0670      	lsls	r0, r6, #25
 800583a:	d5fb      	bpl.n	8005834 <_printf_i+0x1c0>
 800583c:	8019      	strh	r1, [r3, #0]
 800583e:	2300      	movs	r3, #0
 8005840:	6123      	str	r3, [r4, #16]
 8005842:	4615      	mov	r5, r2
 8005844:	e7bc      	b.n	80057c0 <_printf_i+0x14c>
 8005846:	682b      	ldr	r3, [r5, #0]
 8005848:	1d1a      	adds	r2, r3, #4
 800584a:	602a      	str	r2, [r5, #0]
 800584c:	681d      	ldr	r5, [r3, #0]
 800584e:	6862      	ldr	r2, [r4, #4]
 8005850:	2100      	movs	r1, #0
 8005852:	4628      	mov	r0, r5
 8005854:	f7fa fcbc 	bl	80001d0 <memchr>
 8005858:	b108      	cbz	r0, 800585e <_printf_i+0x1ea>
 800585a:	1b40      	subs	r0, r0, r5
 800585c:	6060      	str	r0, [r4, #4]
 800585e:	6863      	ldr	r3, [r4, #4]
 8005860:	6123      	str	r3, [r4, #16]
 8005862:	2300      	movs	r3, #0
 8005864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005868:	e7aa      	b.n	80057c0 <_printf_i+0x14c>
 800586a:	6923      	ldr	r3, [r4, #16]
 800586c:	462a      	mov	r2, r5
 800586e:	4649      	mov	r1, r9
 8005870:	4640      	mov	r0, r8
 8005872:	47d0      	blx	sl
 8005874:	3001      	adds	r0, #1
 8005876:	d0ad      	beq.n	80057d4 <_printf_i+0x160>
 8005878:	6823      	ldr	r3, [r4, #0]
 800587a:	079b      	lsls	r3, r3, #30
 800587c:	d413      	bmi.n	80058a6 <_printf_i+0x232>
 800587e:	68e0      	ldr	r0, [r4, #12]
 8005880:	9b03      	ldr	r3, [sp, #12]
 8005882:	4298      	cmp	r0, r3
 8005884:	bfb8      	it	lt
 8005886:	4618      	movlt	r0, r3
 8005888:	e7a6      	b.n	80057d8 <_printf_i+0x164>
 800588a:	2301      	movs	r3, #1
 800588c:	4632      	mov	r2, r6
 800588e:	4649      	mov	r1, r9
 8005890:	4640      	mov	r0, r8
 8005892:	47d0      	blx	sl
 8005894:	3001      	adds	r0, #1
 8005896:	d09d      	beq.n	80057d4 <_printf_i+0x160>
 8005898:	3501      	adds	r5, #1
 800589a:	68e3      	ldr	r3, [r4, #12]
 800589c:	9903      	ldr	r1, [sp, #12]
 800589e:	1a5b      	subs	r3, r3, r1
 80058a0:	42ab      	cmp	r3, r5
 80058a2:	dcf2      	bgt.n	800588a <_printf_i+0x216>
 80058a4:	e7eb      	b.n	800587e <_printf_i+0x20a>
 80058a6:	2500      	movs	r5, #0
 80058a8:	f104 0619 	add.w	r6, r4, #25
 80058ac:	e7f5      	b.n	800589a <_printf_i+0x226>
 80058ae:	bf00      	nop
 80058b0:	080059f5 	.word	0x080059f5
 80058b4:	08005a06 	.word	0x08005a06

080058b8 <memmove>:
 80058b8:	4288      	cmp	r0, r1
 80058ba:	b510      	push	{r4, lr}
 80058bc:	eb01 0402 	add.w	r4, r1, r2
 80058c0:	d902      	bls.n	80058c8 <memmove+0x10>
 80058c2:	4284      	cmp	r4, r0
 80058c4:	4623      	mov	r3, r4
 80058c6:	d807      	bhi.n	80058d8 <memmove+0x20>
 80058c8:	1e43      	subs	r3, r0, #1
 80058ca:	42a1      	cmp	r1, r4
 80058cc:	d008      	beq.n	80058e0 <memmove+0x28>
 80058ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058d6:	e7f8      	b.n	80058ca <memmove+0x12>
 80058d8:	4402      	add	r2, r0
 80058da:	4601      	mov	r1, r0
 80058dc:	428a      	cmp	r2, r1
 80058de:	d100      	bne.n	80058e2 <memmove+0x2a>
 80058e0:	bd10      	pop	{r4, pc}
 80058e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058ea:	e7f7      	b.n	80058dc <memmove+0x24>

080058ec <_sbrk_r>:
 80058ec:	b538      	push	{r3, r4, r5, lr}
 80058ee:	4d06      	ldr	r5, [pc, #24]	; (8005908 <_sbrk_r+0x1c>)
 80058f0:	2300      	movs	r3, #0
 80058f2:	4604      	mov	r4, r0
 80058f4:	4608      	mov	r0, r1
 80058f6:	602b      	str	r3, [r5, #0]
 80058f8:	f7fb fd1c 	bl	8001334 <_sbrk>
 80058fc:	1c43      	adds	r3, r0, #1
 80058fe:	d102      	bne.n	8005906 <_sbrk_r+0x1a>
 8005900:	682b      	ldr	r3, [r5, #0]
 8005902:	b103      	cbz	r3, 8005906 <_sbrk_r+0x1a>
 8005904:	6023      	str	r3, [r4, #0]
 8005906:	bd38      	pop	{r3, r4, r5, pc}
 8005908:	200003ec 	.word	0x200003ec

0800590c <memcpy>:
 800590c:	440a      	add	r2, r1
 800590e:	4291      	cmp	r1, r2
 8005910:	f100 33ff 	add.w	r3, r0, #4294967295
 8005914:	d100      	bne.n	8005918 <memcpy+0xc>
 8005916:	4770      	bx	lr
 8005918:	b510      	push	{r4, lr}
 800591a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800591e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005922:	4291      	cmp	r1, r2
 8005924:	d1f9      	bne.n	800591a <memcpy+0xe>
 8005926:	bd10      	pop	{r4, pc}

08005928 <_realloc_r>:
 8005928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800592c:	4680      	mov	r8, r0
 800592e:	4614      	mov	r4, r2
 8005930:	460e      	mov	r6, r1
 8005932:	b921      	cbnz	r1, 800593e <_realloc_r+0x16>
 8005934:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005938:	4611      	mov	r1, r2
 800593a:	f7ff bc49 	b.w	80051d0 <_malloc_r>
 800593e:	b92a      	cbnz	r2, 800594c <_realloc_r+0x24>
 8005940:	f7ff fbda 	bl	80050f8 <_free_r>
 8005944:	4625      	mov	r5, r4
 8005946:	4628      	mov	r0, r5
 8005948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800594c:	f000 f81b 	bl	8005986 <_malloc_usable_size_r>
 8005950:	4284      	cmp	r4, r0
 8005952:	4607      	mov	r7, r0
 8005954:	d802      	bhi.n	800595c <_realloc_r+0x34>
 8005956:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800595a:	d812      	bhi.n	8005982 <_realloc_r+0x5a>
 800595c:	4621      	mov	r1, r4
 800595e:	4640      	mov	r0, r8
 8005960:	f7ff fc36 	bl	80051d0 <_malloc_r>
 8005964:	4605      	mov	r5, r0
 8005966:	2800      	cmp	r0, #0
 8005968:	d0ed      	beq.n	8005946 <_realloc_r+0x1e>
 800596a:	42bc      	cmp	r4, r7
 800596c:	4622      	mov	r2, r4
 800596e:	4631      	mov	r1, r6
 8005970:	bf28      	it	cs
 8005972:	463a      	movcs	r2, r7
 8005974:	f7ff ffca 	bl	800590c <memcpy>
 8005978:	4631      	mov	r1, r6
 800597a:	4640      	mov	r0, r8
 800597c:	f7ff fbbc 	bl	80050f8 <_free_r>
 8005980:	e7e1      	b.n	8005946 <_realloc_r+0x1e>
 8005982:	4635      	mov	r5, r6
 8005984:	e7df      	b.n	8005946 <_realloc_r+0x1e>

08005986 <_malloc_usable_size_r>:
 8005986:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800598a:	1f18      	subs	r0, r3, #4
 800598c:	2b00      	cmp	r3, #0
 800598e:	bfbc      	itt	lt
 8005990:	580b      	ldrlt	r3, [r1, r0]
 8005992:	18c0      	addlt	r0, r0, r3
 8005994:	4770      	bx	lr
	...

08005998 <_init>:
 8005998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800599a:	bf00      	nop
 800599c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800599e:	bc08      	pop	{r3}
 80059a0:	469e      	mov	lr, r3
 80059a2:	4770      	bx	lr

080059a4 <_fini>:
 80059a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059a6:	bf00      	nop
 80059a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059aa:	bc08      	pop	{r3}
 80059ac:	469e      	mov	lr, r3
 80059ae:	4770      	bx	lr
