
DATN_STM32_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005824  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080059b4  080059b4  000159b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a1c  08005a1c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08005a1c  08005a1c  00015a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a24  08005a24  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a24  08005a24  00015a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a28  08005a28  00015a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005a2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00000374  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003fc  200003fc  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f1be  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002077  00000000  00000000  0002f2b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000dc8  00000000  00000000  00031330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ac8  00000000  00000000  000320f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021b90  00000000  00000000  00032bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010484  00000000  00000000  00054750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ce2ef  00000000  00000000  00064bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003f68  00000000  00000000  00132ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00136e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800599c 	.word	0x0800599c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800599c 	.word	0x0800599c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//===============FUNCTION INTERRUPT TIMER1 (checked)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a05      	ldr	r2, [pc, #20]	; (8000590 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d102      	bne.n	8000584 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		flag_timer1 = true;
 800057e:	4b05      	ldr	r3, [pc, #20]	; (8000594 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000580:	2201      	movs	r2, #1
 8000582:	701a      	strb	r2, [r3, #0]
	}
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	40010000 	.word	0x40010000
 8000594:	200002aa 	.word	0x200002aa

08000598 <delay_us>:
//===============FUNCTION INTERRUPT TIMER2 (checked)
void delay_us(uint16_t us)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 80005a2:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <delay_us+0x30>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2200      	movs	r2, #0
 80005a8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 80005aa:	bf00      	nop
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <delay_us+0x30>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005b2:	88fb      	ldrh	r3, [r7, #6]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d3f9      	bcc.n	80005ac <delay_us+0x14>
}
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	200001c4 	.word	0x200001c4

080005cc <HAL_UART_RxCpltCallback>:

//===============FUNCTION INTERRUPT UART (checked)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart4, Data_UART_Receive, 43);
 80005d4:	222b      	movs	r2, #43	; 0x2b
 80005d6:	491c      	ldr	r1, [pc, #112]	; (8000648 <HAL_UART_RxCpltCallback+0x7c>)
 80005d8:	481c      	ldr	r0, [pc, #112]	; (800064c <HAL_UART_RxCpltCallback+0x80>)
 80005da:	f003 fbc8 	bl	8003d6e <HAL_UART_Receive_IT>
	if(Data_UART_Receive[42] == 's')
 80005de:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <HAL_UART_RxCpltCallback+0x7c>)
 80005e0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80005e4:	2b73      	cmp	r3, #115	; 0x73
 80005e6:	d10b      	bne.n	8000600 <HAL_UART_RxCpltCallback+0x34>
	{
		HAL_GPIO_TogglePin(cam_GPIO_Port, cam_Pin);
 80005e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ec:	4818      	ldr	r0, [pc, #96]	; (8000650 <HAL_UART_RxCpltCallback+0x84>)
 80005ee:	f002 f942 	bl	8002876 <HAL_GPIO_TogglePin>
		StateUART = DATA_UART_AVAILABLE;
 80005f2:	4b18      	ldr	r3, [pc, #96]	; (8000654 <HAL_UART_RxCpltCallback+0x88>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	701a      	strb	r2, [r3, #0]
		Data_UART_Receive_Lenght = 43;
 80005f8:	4b17      	ldr	r3, [pc, #92]	; (8000658 <HAL_UART_RxCpltCallback+0x8c>)
 80005fa:	222b      	movs	r2, #43	; 0x2b
 80005fc:	701a      	strb	r2, [r3, #0]
	{
		StateUART = DATA_UART_UNAVAILABLE;
		for(int i = 0; i < 43; i++)
			Data_UART_Receive[i] = ' ';
	}
}
 80005fe:	e01e      	b.n	800063e <HAL_UART_RxCpltCallback+0x72>
	else if(Data_UART_Receive[42] == 'r') // Lenh Reset he thong
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <HAL_UART_RxCpltCallback+0x7c>)
 8000602:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000606:	2b72      	cmp	r3, #114	; 0x72
 8000608:	d108      	bne.n	800061c <HAL_UART_RxCpltCallback+0x50>
		HAL_GPIO_TogglePin(do_GPIO_Port, do_Pin);
 800060a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800060e:	4810      	ldr	r0, [pc, #64]	; (8000650 <HAL_UART_RxCpltCallback+0x84>)
 8000610:	f002 f931 	bl	8002876 <HAL_GPIO_TogglePin>
		Flag_Reset = true;
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <HAL_UART_RxCpltCallback+0x90>)
 8000616:	2201      	movs	r2, #1
 8000618:	701a      	strb	r2, [r3, #0]
}
 800061a:	e010      	b.n	800063e <HAL_UART_RxCpltCallback+0x72>
		StateUART = DATA_UART_UNAVAILABLE;
 800061c:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <HAL_UART_RxCpltCallback+0x88>)
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 43; i++)
 8000622:	2300      	movs	r3, #0
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	e007      	b.n	8000638 <HAL_UART_RxCpltCallback+0x6c>
			Data_UART_Receive[i] = ' ';
 8000628:	4a07      	ldr	r2, [pc, #28]	; (8000648 <HAL_UART_RxCpltCallback+0x7c>)
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	4413      	add	r3, r2
 800062e:	2220      	movs	r2, #32
 8000630:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 43; i++)
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	3301      	adds	r3, #1
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	2b2a      	cmp	r3, #42	; 0x2a
 800063c:	ddf4      	ble.n	8000628 <HAL_UART_RxCpltCallback+0x5c>
}
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000250 	.word	0x20000250
 800064c:	2000020c 	.word	0x2000020c
 8000650:	40020c00 	.word	0x40020c00
 8000654:	200002a7 	.word	0x200002a7
 8000658:	2000027b 	.word	0x2000027b
 800065c:	200002a9 	.word	0x200002a9

08000660 <HAL_CAN_RxFifo0MsgPendingCallback>:
//===============FUNCTION INTERRUPT CAN MESSAGE (checked)
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RX_CAN_HEADER, Data_CAN_Rx) == HAL_OK)
 8000668:	4b81      	ldr	r3, [pc, #516]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800066a:	4a82      	ldr	r2, [pc, #520]	; (8000874 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800066c:	2100      	movs	r1, #0
 800066e:	4882      	ldr	r0, [pc, #520]	; (8000878 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8000670:	f001 fa41 	bl	8001af6 <HAL_CAN_GetRxMessage>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	f040 80f6 	bne.w	8000868 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800067c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000680:	487e      	ldr	r0, [pc, #504]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000682:	f002 f8f8 	bl	8002876 <HAL_GPIO_TogglePin>
		switch(RX_CAN_HEADER.StdId)
 8000686:	4b7b      	ldr	r3, [pc, #492]	; (8000874 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	3b01      	subs	r3, #1
 800068c:	2b1f      	cmp	r3, #31
 800068e:	f200 80eb 	bhi.w	8000868 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
 8000692:	a201      	add	r2, pc, #4	; (adr r2, 8000698 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000698:	08000719 	.word	0x08000719
 800069c:	08000751 	.word	0x08000751
 80006a0:	08000869 	.word	0x08000869
 80006a4:	08000789 	.word	0x08000789
 80006a8:	08000869 	.word	0x08000869
 80006ac:	08000869 	.word	0x08000869
 80006b0:	08000869 	.word	0x08000869
 80006b4:	080007c1 	.word	0x080007c1
 80006b8:	08000869 	.word	0x08000869
 80006bc:	08000869 	.word	0x08000869
 80006c0:	08000869 	.word	0x08000869
 80006c4:	08000869 	.word	0x08000869
 80006c8:	08000869 	.word	0x08000869
 80006cc:	08000869 	.word	0x08000869
 80006d0:	08000869 	.word	0x08000869
 80006d4:	080007f9 	.word	0x080007f9
 80006d8:	08000869 	.word	0x08000869
 80006dc:	08000869 	.word	0x08000869
 80006e0:	08000869 	.word	0x08000869
 80006e4:	08000869 	.word	0x08000869
 80006e8:	08000869 	.word	0x08000869
 80006ec:	08000869 	.word	0x08000869
 80006f0:	08000869 	.word	0x08000869
 80006f4:	08000869 	.word	0x08000869
 80006f8:	08000869 	.word	0x08000869
 80006fc:	08000869 	.word	0x08000869
 8000700:	08000869 	.word	0x08000869
 8000704:	08000869 	.word	0x08000869
 8000708:	08000869 	.word	0x08000869
 800070c:	08000869 	.word	0x08000869
 8000710:	08000869 	.word	0x08000869
 8000714:	08000831 	.word	0x08000831
		{
		case 0x001:
			motor1.data[0] = Data_CAN_Rx[0];  motor1.data[1] = Data_CAN_Rx[1]; motor1.data[2] = Data_CAN_Rx[2];
 8000718:	4b55      	ldr	r3, [pc, #340]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800071a:	781a      	ldrb	r2, [r3, #0]
 800071c:	4b58      	ldr	r3, [pc, #352]	; (8000880 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800071e:	705a      	strb	r2, [r3, #1]
 8000720:	4b53      	ldr	r3, [pc, #332]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000722:	785a      	ldrb	r2, [r3, #1]
 8000724:	4b56      	ldr	r3, [pc, #344]	; (8000880 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000726:	709a      	strb	r2, [r3, #2]
 8000728:	4b51      	ldr	r3, [pc, #324]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800072a:	789a      	ldrb	r2, [r3, #2]
 800072c:	4b54      	ldr	r3, [pc, #336]	; (8000880 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800072e:	70da      	strb	r2, [r3, #3]
			motor1.data[3] = Data_CAN_Rx[3];  motor1.data[4] = Data_CAN_Rx[4]; motor1.data[5] = Data_CAN_Rx[5];
 8000730:	4b4f      	ldr	r3, [pc, #316]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000732:	78da      	ldrb	r2, [r3, #3]
 8000734:	4b52      	ldr	r3, [pc, #328]	; (8000880 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000736:	711a      	strb	r2, [r3, #4]
 8000738:	4b4d      	ldr	r3, [pc, #308]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800073a:	791a      	ldrb	r2, [r3, #4]
 800073c:	4b50      	ldr	r3, [pc, #320]	; (8000880 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800073e:	715a      	strb	r2, [r3, #5]
 8000740:	4b4b      	ldr	r3, [pc, #300]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000742:	795a      	ldrb	r2, [r3, #5]
 8000744:	4b4e      	ldr	r3, [pc, #312]	; (8000880 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000746:	719a      	strb	r2, [r3, #6]
			motor1.flag_motor = true;
 8000748:	4b4d      	ldr	r3, [pc, #308]	; (8000880 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800074a:	2201      	movs	r2, #1
 800074c:	721a      	strb	r2, [r3, #8]
			break;
 800074e:	e08b      	b.n	8000868 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
		case 0x002:
			motor2.data[0] = Data_CAN_Rx[0];  motor2.data[1] = Data_CAN_Rx[1]; motor2.data[2] = Data_CAN_Rx[2];
 8000750:	4b47      	ldr	r3, [pc, #284]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000752:	781a      	ldrb	r2, [r3, #0]
 8000754:	4b4b      	ldr	r3, [pc, #300]	; (8000884 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8000756:	705a      	strb	r2, [r3, #1]
 8000758:	4b45      	ldr	r3, [pc, #276]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800075a:	785a      	ldrb	r2, [r3, #1]
 800075c:	4b49      	ldr	r3, [pc, #292]	; (8000884 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 800075e:	709a      	strb	r2, [r3, #2]
 8000760:	4b43      	ldr	r3, [pc, #268]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000762:	789a      	ldrb	r2, [r3, #2]
 8000764:	4b47      	ldr	r3, [pc, #284]	; (8000884 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8000766:	70da      	strb	r2, [r3, #3]
			motor2.data[3] = Data_CAN_Rx[3];  motor2.data[4] = Data_CAN_Rx[4]; motor2.data[5] = Data_CAN_Rx[5];
 8000768:	4b41      	ldr	r3, [pc, #260]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800076a:	78da      	ldrb	r2, [r3, #3]
 800076c:	4b45      	ldr	r3, [pc, #276]	; (8000884 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 800076e:	711a      	strb	r2, [r3, #4]
 8000770:	4b3f      	ldr	r3, [pc, #252]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000772:	791a      	ldrb	r2, [r3, #4]
 8000774:	4b43      	ldr	r3, [pc, #268]	; (8000884 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8000776:	715a      	strb	r2, [r3, #5]
 8000778:	4b3d      	ldr	r3, [pc, #244]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800077a:	795a      	ldrb	r2, [r3, #5]
 800077c:	4b41      	ldr	r3, [pc, #260]	; (8000884 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 800077e:	719a      	strb	r2, [r3, #6]
			motor2.flag_motor= true;
 8000780:	4b40      	ldr	r3, [pc, #256]	; (8000884 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8000782:	2201      	movs	r2, #1
 8000784:	721a      	strb	r2, [r3, #8]
			break;
 8000786:	e06f      	b.n	8000868 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
		case 0x004:
			motor3.data[0] = Data_CAN_Rx[0];  motor3.data[1] = Data_CAN_Rx[1]; motor3.data[2] = Data_CAN_Rx[2];
 8000788:	4b39      	ldr	r3, [pc, #228]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800078a:	781a      	ldrb	r2, [r3, #0]
 800078c:	4b3e      	ldr	r3, [pc, #248]	; (8000888 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 800078e:	705a      	strb	r2, [r3, #1]
 8000790:	4b37      	ldr	r3, [pc, #220]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000792:	785a      	ldrb	r2, [r3, #1]
 8000794:	4b3c      	ldr	r3, [pc, #240]	; (8000888 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 8000796:	709a      	strb	r2, [r3, #2]
 8000798:	4b35      	ldr	r3, [pc, #212]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800079a:	789a      	ldrb	r2, [r3, #2]
 800079c:	4b3a      	ldr	r3, [pc, #232]	; (8000888 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 800079e:	70da      	strb	r2, [r3, #3]
			motor3.data[3] = Data_CAN_Rx[3];  motor3.data[4] = Data_CAN_Rx[4]; motor3.data[5] = Data_CAN_Rx[5];
 80007a0:	4b33      	ldr	r3, [pc, #204]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80007a2:	78da      	ldrb	r2, [r3, #3]
 80007a4:	4b38      	ldr	r3, [pc, #224]	; (8000888 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 80007a6:	711a      	strb	r2, [r3, #4]
 80007a8:	4b31      	ldr	r3, [pc, #196]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80007aa:	791a      	ldrb	r2, [r3, #4]
 80007ac:	4b36      	ldr	r3, [pc, #216]	; (8000888 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 80007ae:	715a      	strb	r2, [r3, #5]
 80007b0:	4b2f      	ldr	r3, [pc, #188]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80007b2:	795a      	ldrb	r2, [r3, #5]
 80007b4:	4b34      	ldr	r3, [pc, #208]	; (8000888 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 80007b6:	719a      	strb	r2, [r3, #6]
			motor3.flag_motor= true;
 80007b8:	4b33      	ldr	r3, [pc, #204]	; (8000888 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	721a      	strb	r2, [r3, #8]
			break;
 80007be:	e053      	b.n	8000868 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
		case 0x008:
			motor4.data[0] = Data_CAN_Rx[0];  motor4.data[1] = Data_CAN_Rx[1]; motor4.data[2] = Data_CAN_Rx[2];
 80007c0:	4b2b      	ldr	r3, [pc, #172]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80007c2:	781a      	ldrb	r2, [r3, #0]
 80007c4:	4b31      	ldr	r3, [pc, #196]	; (800088c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80007c6:	705a      	strb	r2, [r3, #1]
 80007c8:	4b29      	ldr	r3, [pc, #164]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80007ca:	785a      	ldrb	r2, [r3, #1]
 80007cc:	4b2f      	ldr	r3, [pc, #188]	; (800088c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80007ce:	709a      	strb	r2, [r3, #2]
 80007d0:	4b27      	ldr	r3, [pc, #156]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80007d2:	789a      	ldrb	r2, [r3, #2]
 80007d4:	4b2d      	ldr	r3, [pc, #180]	; (800088c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80007d6:	70da      	strb	r2, [r3, #3]
			motor4.data[3] = Data_CAN_Rx[3];  motor4.data[4] = Data_CAN_Rx[4]; motor4.data[5] = Data_CAN_Rx[5];
 80007d8:	4b25      	ldr	r3, [pc, #148]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80007da:	78da      	ldrb	r2, [r3, #3]
 80007dc:	4b2b      	ldr	r3, [pc, #172]	; (800088c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80007de:	711a      	strb	r2, [r3, #4]
 80007e0:	4b23      	ldr	r3, [pc, #140]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80007e2:	791a      	ldrb	r2, [r3, #4]
 80007e4:	4b29      	ldr	r3, [pc, #164]	; (800088c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80007e6:	715a      	strb	r2, [r3, #5]
 80007e8:	4b21      	ldr	r3, [pc, #132]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80007ea:	795a      	ldrb	r2, [r3, #5]
 80007ec:	4b27      	ldr	r3, [pc, #156]	; (800088c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80007ee:	719a      	strb	r2, [r3, #6]
			motor4.flag_motor = true;
 80007f0:	4b26      	ldr	r3, [pc, #152]	; (800088c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	721a      	strb	r2, [r3, #8]
			break;
 80007f6:	e037      	b.n	8000868 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
		case 0x010:
			motor5.data[0] = Data_CAN_Rx[0];  motor5.data[1] = Data_CAN_Rx[1]; motor5.data[2] = Data_CAN_Rx[2];
 80007f8:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80007fa:	781a      	ldrb	r2, [r3, #0]
 80007fc:	4b24      	ldr	r3, [pc, #144]	; (8000890 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80007fe:	705a      	strb	r2, [r3, #1]
 8000800:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000802:	785a      	ldrb	r2, [r3, #1]
 8000804:	4b22      	ldr	r3, [pc, #136]	; (8000890 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8000806:	709a      	strb	r2, [r3, #2]
 8000808:	4b19      	ldr	r3, [pc, #100]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800080a:	789a      	ldrb	r2, [r3, #2]
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800080e:	70da      	strb	r2, [r3, #3]
			motor5.data[3] = Data_CAN_Rx[3];  motor5.data[4] = Data_CAN_Rx[4]; motor5.data[5] = Data_CAN_Rx[5];
 8000810:	4b17      	ldr	r3, [pc, #92]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000812:	78da      	ldrb	r2, [r3, #3]
 8000814:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8000816:	711a      	strb	r2, [r3, #4]
 8000818:	4b15      	ldr	r3, [pc, #84]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800081a:	791a      	ldrb	r2, [r3, #4]
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800081e:	715a      	strb	r2, [r3, #5]
 8000820:	4b13      	ldr	r3, [pc, #76]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000822:	795a      	ldrb	r2, [r3, #5]
 8000824:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8000826:	719a      	strb	r2, [r3, #6]
			motor5.flag_motor= true;
 8000828:	4b19      	ldr	r3, [pc, #100]	; (8000890 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800082a:	2201      	movs	r2, #1
 800082c:	721a      	strb	r2, [r3, #8]
			break;
 800082e:	e01b      	b.n	8000868 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
		case 0x020:
			motor6.data[0] = Data_CAN_Rx[0];  motor6.data[1] = Data_CAN_Rx[1]; motor6.data[2] = Data_CAN_Rx[2];
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000832:	781a      	ldrb	r2, [r3, #0]
 8000834:	4b17      	ldr	r3, [pc, #92]	; (8000894 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8000836:	705a      	strb	r2, [r3, #1]
 8000838:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800083a:	785a      	ldrb	r2, [r3, #1]
 800083c:	4b15      	ldr	r3, [pc, #84]	; (8000894 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 800083e:	709a      	strb	r2, [r3, #2]
 8000840:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000842:	789a      	ldrb	r2, [r3, #2]
 8000844:	4b13      	ldr	r3, [pc, #76]	; (8000894 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8000846:	70da      	strb	r2, [r3, #3]
			motor6.data[3] = Data_CAN_Rx[3];  motor6.data[4] = Data_CAN_Rx[4]; motor6.data[5] = Data_CAN_Rx[5];
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800084a:	78da      	ldrb	r2, [r3, #3]
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 800084e:	711a      	strb	r2, [r3, #4]
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000852:	791a      	ldrb	r2, [r3, #4]
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8000856:	715a      	strb	r2, [r3, #5]
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800085a:	795a      	ldrb	r2, [r3, #5]
 800085c:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 800085e:	719a      	strb	r2, [r3, #6]
			motor6.flag_motor = true;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8000862:	2201      	movs	r2, #1
 8000864:	721a      	strb	r2, [r3, #8]
			break;
 8000866:	bf00      	nop
		}
	}
}
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000104 	.word	0x20000104
 8000874:	200000bc 	.word	0x200000bc
 8000878:	20000154 	.word	0x20000154
 800087c:	40020c00 	.word	0x40020c00
 8000880:	2000010c 	.word	0x2000010c
 8000884:	20000118 	.word	0x20000118
 8000888:	20000124 	.word	0x20000124
 800088c:	20000130 	.word	0x20000130
 8000890:	2000013c 	.word	0x2000013c
 8000894:	20000148 	.word	0x20000148

08000898 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b096      	sub	sp, #88	; 0x58
 800089c:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800089e:	f000 fdbd 	bl	800141c <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80008a2:	f000 f9db 	bl	8000c5c <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008a6:	f000 fb75 	bl	8000f94 <MX_GPIO_Init>
	MX_CAN1_Init();
 80008aa:	f000 fa41 	bl	8000d30 <MX_CAN1_Init>
	MX_TIM1_Init();
 80008ae:	f000 faab 	bl	8000e08 <MX_TIM1_Init>
	MX_TIM2_Init();
 80008b2:	f000 faf9 	bl	8000ea8 <MX_TIM2_Init>
	MX_UART4_Init();
 80008b6:	f000 fb43 	bl	8000f40 <MX_UART4_Init>
	/* USER CODE BEGIN 2 */

	//========================UART RECEIVE IT
	HAL_UART_Init(&huart4);
 80008ba:	4893      	ldr	r0, [pc, #588]	; (8000b08 <main+0x270>)
 80008bc:	f003 f978 	bl	8003bb0 <HAL_UART_Init>
	HAL_UART_Receive_IT(&huart4, Data_UART_Receive, 43);
 80008c0:	222b      	movs	r2, #43	; 0x2b
 80008c2:	4992      	ldr	r1, [pc, #584]	; (8000b0c <main+0x274>)
 80008c4:	4890      	ldr	r0, [pc, #576]	; (8000b08 <main+0x270>)
 80008c6:	f003 fa52 	bl	8003d6e <HAL_UART_Receive_IT>

	//========================CAN BUS CONFIG
	/*----------------- CAN START TX AND RX ----------*/
	HAL_CAN_Start(&hcan1);
 80008ca:	4891      	ldr	r0, [pc, #580]	; (8000b10 <main+0x278>)
 80008cc:	f000 fff4 	bl	80018b8 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); // Enable interrupts
 80008d0:	2102      	movs	r1, #2
 80008d2:	488f      	ldr	r0, [pc, #572]	; (8000b10 <main+0x278>)
 80008d4:	f001 fa21 	bl	8001d1a <HAL_CAN_ActivateNotification>
	/*----------------- ENABLE TIMER 1----------*/
	HAL_TIM_Base_Start_IT(&htim1);
 80008d8:	488e      	ldr	r0, [pc, #568]	; (8000b14 <main+0x27c>)
 80008da:	f002 fd37 	bl	800334c <HAL_TIM_Base_Start_IT>
	/*----------------- ENABLE TIMER 2----------*/
	HAL_TIM_Base_Start(&htim2);
 80008de:	488e      	ldr	r0, [pc, #568]	; (8000b18 <main+0x280>)
 80008e0:	f002 fccc 	bl	800327c <HAL_TIM_Base_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	motor1.flag_motor = false;motor1.name = 'a';
 80008e4:	4b8d      	ldr	r3, [pc, #564]	; (8000b1c <main+0x284>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	721a      	strb	r2, [r3, #8]
 80008ea:	4b8c      	ldr	r3, [pc, #560]	; (8000b1c <main+0x284>)
 80008ec:	2261      	movs	r2, #97	; 0x61
 80008ee:	701a      	strb	r2, [r3, #0]
	motor2.flag_motor = false;motor2.name = 'b';
 80008f0:	4b8b      	ldr	r3, [pc, #556]	; (8000b20 <main+0x288>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	721a      	strb	r2, [r3, #8]
 80008f6:	4b8a      	ldr	r3, [pc, #552]	; (8000b20 <main+0x288>)
 80008f8:	2262      	movs	r2, #98	; 0x62
 80008fa:	701a      	strb	r2, [r3, #0]
	motor3.flag_motor = false;motor3.name = 'c';
 80008fc:	4b89      	ldr	r3, [pc, #548]	; (8000b24 <main+0x28c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	721a      	strb	r2, [r3, #8]
 8000902:	4b88      	ldr	r3, [pc, #544]	; (8000b24 <main+0x28c>)
 8000904:	2263      	movs	r2, #99	; 0x63
 8000906:	701a      	strb	r2, [r3, #0]
	motor4.flag_motor = false;motor4.name = 'd';
 8000908:	4b87      	ldr	r3, [pc, #540]	; (8000b28 <main+0x290>)
 800090a:	2200      	movs	r2, #0
 800090c:	721a      	strb	r2, [r3, #8]
 800090e:	4b86      	ldr	r3, [pc, #536]	; (8000b28 <main+0x290>)
 8000910:	2264      	movs	r2, #100	; 0x64
 8000912:	701a      	strb	r2, [r3, #0]
	motor5.flag_motor = false;motor5.name = 'e';
 8000914:	4b85      	ldr	r3, [pc, #532]	; (8000b2c <main+0x294>)
 8000916:	2200      	movs	r2, #0
 8000918:	721a      	strb	r2, [r3, #8]
 800091a:	4b84      	ldr	r3, [pc, #528]	; (8000b2c <main+0x294>)
 800091c:	2265      	movs	r2, #101	; 0x65
 800091e:	701a      	strb	r2, [r3, #0]
	motor6.flag_motor = false;motor6.name = 'f';
 8000920:	4b83      	ldr	r3, [pc, #524]	; (8000b30 <main+0x298>)
 8000922:	2200      	movs	r2, #0
 8000924:	721a      	strb	r2, [r3, #8]
 8000926:	4b82      	ldr	r3, [pc, #520]	; (8000b30 <main+0x298>)
 8000928:	2266      	movs	r2, #102	; 0x66
 800092a:	701a      	strb	r2, [r3, #0]
	while(1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if(flag_timer1 == true)
 800092c:	4b81      	ldr	r3, [pc, #516]	; (8000b34 <main+0x29c>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	f000 812a 	beq.w	8000b8a <main+0x2f2>
		{
			uint8_t length = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			flag_timer1 = false;
 800093c:	4b7d      	ldr	r3, [pc, #500]	; (8000b34 <main+0x29c>)
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]
			if(StateUART == DATA_UART_AVAILABLE)
 8000942:	4b7d      	ldr	r3, [pc, #500]	; (8000b38 <main+0x2a0>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d020      	beq.n	800098c <main+0xf4>
			{
				length = Data_UART_Receive_Lenght;
 800094a:	4b7c      	ldr	r3, [pc, #496]	; (8000b3c <main+0x2a4>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				Data_UART_Receive_Lenght = 0; // Not Reset - > failed
 8000952:	4b7a      	ldr	r3, [pc, #488]	; (8000b3c <main+0x2a4>)
 8000954:	2200      	movs	r2, #0
 8000956:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i <= length; i++)
 8000958:	2300      	movs	r3, #0
 800095a:	643b      	str	r3, [r7, #64]	; 0x40
 800095c:	e00b      	b.n	8000976 <main+0xde>
				{
					Data_UART_Saved[i] = Data_UART_Receive[i];
 800095e:	4a6b      	ldr	r2, [pc, #428]	; (8000b0c <main+0x274>)
 8000960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000962:	4413      	add	r3, r2
 8000964:	7819      	ldrb	r1, [r3, #0]
 8000966:	4a76      	ldr	r2, [pc, #472]	; (8000b40 <main+0x2a8>)
 8000968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800096a:	4413      	add	r3, r2
 800096c:	460a      	mov	r2, r1
 800096e:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i <= length; i++)
 8000970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000972:	3301      	adds	r3, #1
 8000974:	643b      	str	r3, [r7, #64]	; 0x40
 8000976:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800097a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800097c:	429a      	cmp	r2, r3
 800097e:	ddee      	ble.n	800095e <main+0xc6>
				}
				StateUART = DATA_UART_UNAVAILABLE;
 8000980:	4b6d      	ldr	r3, [pc, #436]	; (8000b38 <main+0x2a0>)
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]
				Check_OKE = true;
 8000986:	4b6f      	ldr	r3, [pc, #444]	; (8000b44 <main+0x2ac>)
 8000988:	2201      	movs	r2, #1
 800098a:	701a      	strb	r2, [r3, #0]
				// this function return length
			}
			if(Check_OKE == true && Flag_Reset == false)
 800098c:	4b6d      	ldr	r3, [pc, #436]	; (8000b44 <main+0x2ac>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	f000 80e3 	beq.w	8000b5c <main+0x2c4>
 8000996:	4b6c      	ldr	r3, [pc, #432]	; (8000b48 <main+0x2b0>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	f083 0301 	eor.w	r3, r3, #1
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	f000 80db 	beq.w	8000b5c <main+0x2c4>
			{
				Check_OKE = false;
 80009a6:	4b67      	ldr	r3, [pc, #412]	; (8000b44 <main+0x2ac>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
				uint8_t theta1[6] = {' ', ' ', ' ', ' ', ' ', ' '},
 80009ac:	4a67      	ldr	r2, [pc, #412]	; (8000b4c <main+0x2b4>)
 80009ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009b6:	6018      	str	r0, [r3, #0]
 80009b8:	3304      	adds	r3, #4
 80009ba:	8019      	strh	r1, [r3, #0]
						theta2[6] = {' ', ' ', ' ', ' ', ' ', ' '},
 80009bc:	4a63      	ldr	r2, [pc, #396]	; (8000b4c <main+0x2b4>)
 80009be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009c6:	6018      	str	r0, [r3, #0]
 80009c8:	3304      	adds	r3, #4
 80009ca:	8019      	strh	r1, [r3, #0]
						theta3[6] = {' ', ' ', ' ', ' ', ' ', ' '},
 80009cc:	4a5f      	ldr	r2, [pc, #380]	; (8000b4c <main+0x2b4>)
 80009ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009d6:	6018      	str	r0, [r3, #0]
 80009d8:	3304      	adds	r3, #4
 80009da:	8019      	strh	r1, [r3, #0]
						theta4[6] = {' ', ' ', ' ', ' ', ' ', ' '},
 80009dc:	4a5b      	ldr	r2, [pc, #364]	; (8000b4c <main+0x2b4>)
 80009de:	f107 0320 	add.w	r3, r7, #32
 80009e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009e6:	6018      	str	r0, [r3, #0]
 80009e8:	3304      	adds	r3, #4
 80009ea:	8019      	strh	r1, [r3, #0]
						theta5[6] = {' ', ' ', ' ', ' ', ' ', ' '},
 80009ec:	4a57      	ldr	r2, [pc, #348]	; (8000b4c <main+0x2b4>)
 80009ee:	f107 0318 	add.w	r3, r7, #24
 80009f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009f6:	6018      	str	r0, [r3, #0]
 80009f8:	3304      	adds	r3, #4
 80009fa:	8019      	strh	r1, [r3, #0]
						theta6[6] = {' ', ' ', ' ', ' ', ' ', ' '};
 80009fc:	4a53      	ldr	r2, [pc, #332]	; (8000b4c <main+0x2b4>)
 80009fe:	f107 0310 	add.w	r3, r7, #16
 8000a02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a06:	6018      	str	r0, [r3, #0]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	8019      	strh	r1, [r3, #0]
				// Function handles (checked)
				Split_String_UART(Data_UART_Saved, length, theta1, theta2, theta3, theta4, theta5, theta6);
 8000a0c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000a10:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000a14:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8000a18:	f107 0310 	add.w	r3, r7, #16
 8000a1c:	9303      	str	r3, [sp, #12]
 8000a1e:	f107 0318 	add.w	r3, r7, #24
 8000a22:	9302      	str	r3, [sp, #8]
 8000a24:	f107 0320 	add.w	r3, r7, #32
 8000a28:	9301      	str	r3, [sp, #4]
 8000a2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a2e:	9300      	str	r3, [sp, #0]
 8000a30:	4603      	mov	r3, r0
 8000a32:	4843      	ldr	r0, [pc, #268]	; (8000b40 <main+0x2a8>)
 8000a34:	f004 f934 	bl	8004ca0 <Split_String_UART>

				// Send 6 massage CAN (checked)
				TX_CAN_HEADER.StdId = 0x001; // Node 1
 8000a38:	4b45      	ldr	r3, [pc, #276]	; (8000b50 <main+0x2b8>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	601a      	str	r2, [r3, #0]
				HAL_CAN_AddTxMessage(&hcan1, &TX_CAN_HEADER, theta1, &TxMailBox);
 8000a3e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000a42:	4b44      	ldr	r3, [pc, #272]	; (8000b54 <main+0x2bc>)
 8000a44:	4942      	ldr	r1, [pc, #264]	; (8000b50 <main+0x2b8>)
 8000a46:	4832      	ldr	r0, [pc, #200]	; (8000b10 <main+0x278>)
 8000a48:	f000 ff7a 	bl	8001940 <HAL_CAN_AddTxMessage>
				delay_us(300);
 8000a4c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a50:	f7ff fda2 	bl	8000598 <delay_us>

				TX_CAN_HEADER.StdId = 0x002;// Node 2
 8000a54:	4b3e      	ldr	r3, [pc, #248]	; (8000b50 <main+0x2b8>)
 8000a56:	2202      	movs	r2, #2
 8000a58:	601a      	str	r2, [r3, #0]
				HAL_CAN_AddTxMessage(&hcan1, &TX_CAN_HEADER, theta2, &TxMailBox);
 8000a5a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000a5e:	4b3d      	ldr	r3, [pc, #244]	; (8000b54 <main+0x2bc>)
 8000a60:	493b      	ldr	r1, [pc, #236]	; (8000b50 <main+0x2b8>)
 8000a62:	482b      	ldr	r0, [pc, #172]	; (8000b10 <main+0x278>)
 8000a64:	f000 ff6c 	bl	8001940 <HAL_CAN_AddTxMessage>
				delay_us(300);
 8000a68:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a6c:	f7ff fd94 	bl	8000598 <delay_us>

				TX_CAN_HEADER.StdId = 0x004;// Node 3
 8000a70:	4b37      	ldr	r3, [pc, #220]	; (8000b50 <main+0x2b8>)
 8000a72:	2204      	movs	r2, #4
 8000a74:	601a      	str	r2, [r3, #0]
				HAL_CAN_AddTxMessage(&hcan1, &TX_CAN_HEADER, theta3, &TxMailBox);
 8000a76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000a7a:	4b36      	ldr	r3, [pc, #216]	; (8000b54 <main+0x2bc>)
 8000a7c:	4934      	ldr	r1, [pc, #208]	; (8000b50 <main+0x2b8>)
 8000a7e:	4824      	ldr	r0, [pc, #144]	; (8000b10 <main+0x278>)
 8000a80:	f000 ff5e 	bl	8001940 <HAL_CAN_AddTxMessage>
				delay_us(300);
 8000a84:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a88:	f7ff fd86 	bl	8000598 <delay_us>

				TX_CAN_HEADER.StdId = 0x008;// Node 4
 8000a8c:	4b30      	ldr	r3, [pc, #192]	; (8000b50 <main+0x2b8>)
 8000a8e:	2208      	movs	r2, #8
 8000a90:	601a      	str	r2, [r3, #0]
				HAL_CAN_AddTxMessage(&hcan1, &TX_CAN_HEADER, theta4, &TxMailBox);
 8000a92:	f107 0220 	add.w	r2, r7, #32
 8000a96:	4b2f      	ldr	r3, [pc, #188]	; (8000b54 <main+0x2bc>)
 8000a98:	492d      	ldr	r1, [pc, #180]	; (8000b50 <main+0x2b8>)
 8000a9a:	481d      	ldr	r0, [pc, #116]	; (8000b10 <main+0x278>)
 8000a9c:	f000 ff50 	bl	8001940 <HAL_CAN_AddTxMessage>
				delay_us(300);
 8000aa0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000aa4:	f7ff fd78 	bl	8000598 <delay_us>

				TX_CAN_HEADER.StdId = 0x010;// Node 5
 8000aa8:	4b29      	ldr	r3, [pc, #164]	; (8000b50 <main+0x2b8>)
 8000aaa:	2210      	movs	r2, #16
 8000aac:	601a      	str	r2, [r3, #0]
				HAL_CAN_AddTxMessage(&hcan1, &TX_CAN_HEADER, theta5, &TxMailBox);
 8000aae:	f107 0218 	add.w	r2, r7, #24
 8000ab2:	4b28      	ldr	r3, [pc, #160]	; (8000b54 <main+0x2bc>)
 8000ab4:	4926      	ldr	r1, [pc, #152]	; (8000b50 <main+0x2b8>)
 8000ab6:	4816      	ldr	r0, [pc, #88]	; (8000b10 <main+0x278>)
 8000ab8:	f000 ff42 	bl	8001940 <HAL_CAN_AddTxMessage>
				delay_us(300);
 8000abc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000ac0:	f7ff fd6a 	bl	8000598 <delay_us>

				TX_CAN_HEADER.StdId = 0x020;// Node 6
 8000ac4:	4b22      	ldr	r3, [pc, #136]	; (8000b50 <main+0x2b8>)
 8000ac6:	2220      	movs	r2, #32
 8000ac8:	601a      	str	r2, [r3, #0]
				HAL_CAN_AddTxMessage(&hcan1, &TX_CAN_HEADER, theta6, &TxMailBox);
 8000aca:	f107 0210 	add.w	r2, r7, #16
 8000ace:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <main+0x2bc>)
 8000ad0:	491f      	ldr	r1, [pc, #124]	; (8000b50 <main+0x2b8>)
 8000ad2:	480f      	ldr	r0, [pc, #60]	; (8000b10 <main+0x278>)
 8000ad4:	f000 ff34 	bl	8001940 <HAL_CAN_AddTxMessage>
				delay_us(300);
 8000ad8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000adc:	f7ff fd5c 	bl	8000598 <delay_us>

				//=======================SET RUN SYNCHRONOUS

				TX_CAN_HEADER.StdId = 0x000;
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <main+0x2b8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
				uint8_t Start_6_motor[6] = {'s', ' ', ' ', ' ', ' ', ' '};
 8000ae6:	4a1c      	ldr	r2, [pc, #112]	; (8000b58 <main+0x2c0>)
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000af0:	6018      	str	r0, [r3, #0]
 8000af2:	3304      	adds	r3, #4
 8000af4:	8019      	strh	r1, [r3, #0]
				HAL_CAN_AddTxMessage(&hcan1, &TX_CAN_HEADER, Start_6_motor, &TxMailBox);
 8000af6:	f107 0208 	add.w	r2, r7, #8
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <main+0x2bc>)
 8000afc:	4914      	ldr	r1, [pc, #80]	; (8000b50 <main+0x2b8>)
 8000afe:	4804      	ldr	r0, [pc, #16]	; (8000b10 <main+0x278>)
 8000b00:	f000 ff1e 	bl	8001940 <HAL_CAN_AddTxMessage>
			{
 8000b04:	e041      	b.n	8000b8a <main+0x2f2>
 8000b06:	bf00      	nop
 8000b08:	2000020c 	.word	0x2000020c
 8000b0c:	20000250 	.word	0x20000250
 8000b10:	20000154 	.word	0x20000154
 8000b14:	2000017c 	.word	0x2000017c
 8000b18:	200001c4 	.word	0x200001c4
 8000b1c:	2000010c 	.word	0x2000010c
 8000b20:	20000118 	.word	0x20000118
 8000b24:	20000124 	.word	0x20000124
 8000b28:	20000130 	.word	0x20000130
 8000b2c:	2000013c 	.word	0x2000013c
 8000b30:	20000148 	.word	0x20000148
 8000b34:	200002aa 	.word	0x200002aa
 8000b38:	200002a7 	.word	0x200002a7
 8000b3c:	2000027b 	.word	0x2000027b
 8000b40:	2000027c 	.word	0x2000027c
 8000b44:	200002a8 	.word	0x200002a8
 8000b48:	200002a9 	.word	0x200002a9
 8000b4c:	080059b4 	.word	0x080059b4
 8000b50:	200000a4 	.word	0x200000a4
 8000b54:	20000100 	.word	0x20000100
 8000b58:	080059bc 	.word	0x080059bc
			}
			else if (Flag_Reset == true) //(checked)
 8000b5c:	4b2c      	ldr	r3, [pc, #176]	; (8000c10 <main+0x378>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d012      	beq.n	8000b8a <main+0x2f2>
			{
				Flag_Reset = false;
 8000b64:	4b2a      	ldr	r3, [pc, #168]	; (8000c10 <main+0x378>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	701a      	strb	r2, [r3, #0]
				//----------------------------- Message reset----------------------
				TX_CAN_HEADER.StdId = 0x000;
 8000b6a:	4b2a      	ldr	r3, [pc, #168]	; (8000c14 <main+0x37c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
				uint8_t Start_6_motor[6] = {'r', ' ', ' ', ' ', ' ', ' '};
 8000b70:	4a29      	ldr	r2, [pc, #164]	; (8000c18 <main+0x380>)
 8000b72:	463b      	mov	r3, r7
 8000b74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b78:	6018      	str	r0, [r3, #0]
 8000b7a:	3304      	adds	r3, #4
 8000b7c:	8019      	strh	r1, [r3, #0]
				HAL_CAN_AddTxMessage(&hcan1, &TX_CAN_HEADER, Start_6_motor, &TxMailBox);
 8000b7e:	463a      	mov	r2, r7
 8000b80:	4b26      	ldr	r3, [pc, #152]	; (8000c1c <main+0x384>)
 8000b82:	4924      	ldr	r1, [pc, #144]	; (8000c14 <main+0x37c>)
 8000b84:	4826      	ldr	r0, [pc, #152]	; (8000c20 <main+0x388>)
 8000b86:	f000 fedb 	bl	8001940 <HAL_CAN_AddTxMessage>
			}
		}
		if(motor1.flag_motor == true && motor2.flag_motor == true && motor3.flag_motor == true && motor4.flag_motor == true&& motor5.flag_motor == true && motor6.flag_motor == true)
 8000b8a:	4b26      	ldr	r3, [pc, #152]	; (8000c24 <main+0x38c>)
 8000b8c:	7a1b      	ldrb	r3, [r3, #8]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f43f aecc 	beq.w	800092c <main+0x94>
 8000b94:	4b24      	ldr	r3, [pc, #144]	; (8000c28 <main+0x390>)
 8000b96:	7a1b      	ldrb	r3, [r3, #8]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f43f aec7 	beq.w	800092c <main+0x94>
 8000b9e:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <main+0x394>)
 8000ba0:	7a1b      	ldrb	r3, [r3, #8]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	f43f aec2 	beq.w	800092c <main+0x94>
 8000ba8:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <main+0x398>)
 8000baa:	7a1b      	ldrb	r3, [r3, #8]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	f43f aebd 	beq.w	800092c <main+0x94>
 8000bb2:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <main+0x39c>)
 8000bb4:	7a1b      	ldrb	r3, [r3, #8]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	f43f aeb8 	beq.w	800092c <main+0x94>
 8000bbc:	4b1e      	ldr	r3, [pc, #120]	; (8000c38 <main+0x3a0>)
 8000bbe:	7a1b      	ldrb	r3, [r3, #8]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	f43f aeb3 	beq.w	800092c <main+0x94>
			//		if(motor1.flag_motor == true && motor2.flag_motor == true && motor3.flag_motor == true && motor4.flag_motor == true&& motor5.flag_motor == true)
		{
			motor1.flag_motor = false;
 8000bc6:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <main+0x38c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	721a      	strb	r2, [r3, #8]
			motor2.flag_motor = false;
 8000bcc:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <main+0x390>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	721a      	strb	r2, [r3, #8]
			motor3.flag_motor = false;
 8000bd2:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <main+0x394>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	721a      	strb	r2, [r3, #8]
			motor4.flag_motor = false;
 8000bd8:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <main+0x398>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	721a      	strb	r2, [r3, #8]
			motor5.flag_motor = false;
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <main+0x39c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	721a      	strb	r2, [r3, #8]
			motor6.flag_motor = false;
 8000be4:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <main+0x3a0>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	721a      	strb	r2, [r3, #8]

			Handles_UART_6_motor(motor1.data, motor2.data, motor3.data, motor4.data, motor5.data, motor6.data, Data_encoder);
 8000bea:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <main+0x3a4>)
 8000bec:	9302      	str	r3, [sp, #8]
 8000bee:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <main+0x3a8>)
 8000bf0:	9301      	str	r3, [sp, #4]
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <main+0x3ac>)
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <main+0x3b0>)
 8000bf8:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <main+0x3b4>)
 8000bfa:	4915      	ldr	r1, [pc, #84]	; (8000c50 <main+0x3b8>)
 8000bfc:	4815      	ldr	r0, [pc, #84]	; (8000c54 <main+0x3bc>)
 8000bfe:	f004 f923 	bl	8004e48 <Handles_UART_6_motor>

			HAL_UART_Transmit(&huart4, Data_encoder, 43, 5);
 8000c02:	2305      	movs	r3, #5
 8000c04:	222b      	movs	r2, #43	; 0x2b
 8000c06:	490d      	ldr	r1, [pc, #52]	; (8000c3c <main+0x3a4>)
 8000c08:	4813      	ldr	r0, [pc, #76]	; (8000c58 <main+0x3c0>)
 8000c0a:	f003 f81e 	bl	8003c4a <HAL_UART_Transmit>
		if(flag_timer1 == true)
 8000c0e:	e68d      	b.n	800092c <main+0x94>
 8000c10:	200002a9 	.word	0x200002a9
 8000c14:	200000a4 	.word	0x200000a4
 8000c18:	080059c4 	.word	0x080059c4
 8000c1c:	20000100 	.word	0x20000100
 8000c20:	20000154 	.word	0x20000154
 8000c24:	2000010c 	.word	0x2000010c
 8000c28:	20000118 	.word	0x20000118
 8000c2c:	20000124 	.word	0x20000124
 8000c30:	20000130 	.word	0x20000130
 8000c34:	2000013c 	.word	0x2000013c
 8000c38:	20000148 	.word	0x20000148
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	20000149 	.word	0x20000149
 8000c44:	2000013d 	.word	0x2000013d
 8000c48:	20000131 	.word	0x20000131
 8000c4c:	20000125 	.word	0x20000125
 8000c50:	20000119 	.word	0x20000119
 8000c54:	2000010d 	.word	0x2000010d
 8000c58:	2000020c 	.word	0x2000020c

08000c5c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b094      	sub	sp, #80	; 0x50
 8000c60:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c62:	f107 0320 	add.w	r3, r7, #32
 8000c66:	2230      	movs	r2, #48	; 0x30
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f004 fa12 	bl	8005094 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000c80:	2300      	movs	r3, #0
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <SystemClock_Config+0xcc>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	4a27      	ldr	r2, [pc, #156]	; (8000d28 <SystemClock_Config+0xcc>)
 8000c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c90:	4b25      	ldr	r3, [pc, #148]	; (8000d28 <SystemClock_Config+0xcc>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <SystemClock_Config+0xd0>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a21      	ldr	r2, [pc, #132]	; (8000d2c <SystemClock_Config+0xd0>)
 8000ca6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <SystemClock_Config+0xd0>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cca:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000ccc:	2308      	movs	r3, #8
 8000cce:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000cd0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000cd4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cda:	2307      	movs	r3, #7
 8000cdc:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cde:	f107 0320 	add.w	r3, r7, #32
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f001 fde2 	bl	80028ac <HAL_RCC_OscConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <SystemClock_Config+0x96>
	{
		Error_Handler();
 8000cee:	f000 f9bf 	bl	8001070 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf2:	230f      	movs	r3, #15
 8000cf4:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cfe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d02:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d08:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d0a:	f107 030c 	add.w	r3, r7, #12
 8000d0e:	2105      	movs	r1, #5
 8000d10:	4618      	mov	r0, r3
 8000d12:	f002 f843 	bl	8002d9c <HAL_RCC_ClockConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8000d1c:	f000 f9a8 	bl	8001070 <Error_Handler>
	}
}
 8000d20:	bf00      	nop
 8000d22:	3750      	adds	r7, #80	; 0x50
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40007000 	.word	0x40007000

08000d30 <MX_CAN1_Init>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN1_Init 0 */
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */
	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8000d34:	4b30      	ldr	r3, [pc, #192]	; (8000df8 <MX_CAN1_Init+0xc8>)
 8000d36:	4a31      	ldr	r2, [pc, #196]	; (8000dfc <MX_CAN1_Init+0xcc>)
 8000d38:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 7;
 8000d3a:	4b2f      	ldr	r3, [pc, #188]	; (8000df8 <MX_CAN1_Init+0xc8>)
 8000d3c:	2207      	movs	r2, #7
 8000d3e:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000d40:	4b2d      	ldr	r3, [pc, #180]	; (8000df8 <MX_CAN1_Init+0xc8>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d46:	4b2c      	ldr	r3, [pc, #176]	; (8000df8 <MX_CAN1_Init+0xc8>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000d4c:	4b2a      	ldr	r3, [pc, #168]	; (8000df8 <MX_CAN1_Init+0xc8>)
 8000d4e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d52:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000d54:	4b28      	ldr	r3, [pc, #160]	; (8000df8 <MX_CAN1_Init+0xc8>)
 8000d56:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000d5a:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000d5c:	4b26      	ldr	r3, [pc, #152]	; (8000df8 <MX_CAN1_Init+0xc8>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000d62:	4b25      	ldr	r3, [pc, #148]	; (8000df8 <MX_CAN1_Init+0xc8>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000d68:	4b23      	ldr	r3, [pc, #140]	; (8000df8 <MX_CAN1_Init+0xc8>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000d6e:	4b22      	ldr	r3, [pc, #136]	; (8000df8 <MX_CAN1_Init+0xc8>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000d74:	4b20      	ldr	r3, [pc, #128]	; (8000df8 <MX_CAN1_Init+0xc8>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000d7a:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <MX_CAN1_Init+0xc8>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000d80:	481d      	ldr	r0, [pc, #116]	; (8000df8 <MX_CAN1_Init+0xc8>)
 8000d82:	f000 fbbd 	bl	8001500 <HAL_CAN_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_CAN1_Init+0x60>
	{
		Error_Handler();
 8000d8c:	f000 f970 	bl	8001070 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */
	/*----------------------- Configuration CAN Filter---------------
	 * */
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000d90:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <MX_CAN1_Init+0xd0>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	621a      	str	r2, [r3, #32]
	canfilterconfig.FilterBank = 1; // which filter bank to use from the assigned ones
 8000d96:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <MX_CAN1_Init+0xd0>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	615a      	str	r2, [r3, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000d9c:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <MX_CAN1_Init+0xd0>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
	canfilterconfig.FilterIdHigh = 0x0000 << 5;
 8000da2:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <MX_CAN1_Init+0xd0>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 8000da8:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <MX_CAN1_Init+0xd0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	605a      	str	r2, [r3, #4]
	canfilterconfig.FilterMaskIdHigh = 0xff00 << 5;
 8000dae:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <MX_CAN1_Init+0xd0>)
 8000db0:	f44f 12ff 	mov.w	r2, #2088960	; 0x1fe000
 8000db4:	609a      	str	r2, [r3, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8000db6:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <MX_CAN1_Init+0xd0>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	60da      	str	r2, [r3, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000dbc:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <MX_CAN1_Init+0xd0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	619a      	str	r2, [r3, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <MX_CAN1_Init+0xd0>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	61da      	str	r2, [r3, #28]
	canfilterconfig.SlaveStartFilterBank = 14;
 8000dc8:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <MX_CAN1_Init+0xd0>)
 8000dca:	220e      	movs	r2, #14
 8000dcc:	625a      	str	r2, [r3, #36]	; 0x24
	if(HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig) != HAL_OK) // add
 8000dce:	490c      	ldr	r1, [pc, #48]	; (8000e00 <MX_CAN1_Init+0xd0>)
 8000dd0:	4809      	ldr	r0, [pc, #36]	; (8000df8 <MX_CAN1_Init+0xc8>)
 8000dd2:	f000 fc91 	bl	80016f8 <HAL_CAN_ConfigFilter>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_CAN1_Init+0xb0>
	{
		Error_Handler();
 8000ddc:	f000 f948 	bl	8001070 <Error_Handler>
	}
	/* -----------------------------CAN Transmit and Interrrupts ----------------------------- */
	TX_CAN_HEADER.RTR = CAN_RTR_DATA; //Remote transmission request = Data frame
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <MX_CAN1_Init+0xd4>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
	TX_CAN_HEADER.IDE = CAN_ID_STD; 	 //Standard Id (11 bits for the identifier)
 8000de6:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <MX_CAN1_Init+0xd4>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
	TX_CAN_HEADER.DLC = 6;
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <MX_CAN1_Init+0xd4>)
 8000dee:	2206      	movs	r2, #6
 8000df0:	611a      	str	r2, [r3, #16]
	/* USER CODE END CAN1_Init 2 */

}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000154 	.word	0x20000154
 8000dfc:	40006400 	.word	0x40006400
 8000e00:	200000d8 	.word	0x200000d8
 8000e04:	200000a4 	.word	0x200000a4

08000e08 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e0e:	f107 0308 	add.w	r3, r7, #8
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000e24:	4b1e      	ldr	r3, [pc, #120]	; (8000ea0 <MX_TIM1_Init+0x98>)
 8000e26:	4a1f      	ldr	r2, [pc, #124]	; (8000ea4 <MX_TIM1_Init+0x9c>)
 8000e28:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 83;
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <MX_TIM1_Init+0x98>)
 8000e2c:	2253      	movs	r2, #83	; 0x53
 8000e2e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e30:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <MX_TIM1_Init+0x98>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 19999;
 8000e36:	4b1a      	ldr	r3, [pc, #104]	; (8000ea0 <MX_TIM1_Init+0x98>)
 8000e38:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000e3c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3e:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <MX_TIM1_Init+0x98>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000e44:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <MX_TIM1_Init+0x98>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <MX_TIM1_Init+0x98>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e50:	4813      	ldr	r0, [pc, #76]	; (8000ea0 <MX_TIM1_Init+0x98>)
 8000e52:	f002 f9c3 	bl	80031dc <HAL_TIM_Base_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM1_Init+0x58>
	{
		Error_Handler();
 8000e5c:	f000 f908 	bl	8001070 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e64:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e66:	f107 0308 	add.w	r3, r7, #8
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	480c      	ldr	r0, [pc, #48]	; (8000ea0 <MX_TIM1_Init+0x98>)
 8000e6e:	f002 fbe5 	bl	800363c <HAL_TIM_ConfigClockSource>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM1_Init+0x74>
	{
		Error_Handler();
 8000e78:	f000 f8fa 	bl	8001070 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e84:	463b      	mov	r3, r7
 8000e86:	4619      	mov	r1, r3
 8000e88:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <MX_TIM1_Init+0x98>)
 8000e8a:	f002 fe01 	bl	8003a90 <HAL_TIMEx_MasterConfigSynchronization>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM1_Init+0x90>
	{
		Error_Handler();
 8000e94:	f000 f8ec 	bl	8001070 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000e98:	bf00      	nop
 8000e9a:	3718      	adds	r7, #24
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	2000017c 	.word	0x2000017c
 8000ea4:	40010000 	.word	0x40010000

08000ea8 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eae:	f107 0308 	add.w	r3, r7, #8
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000ec4:	4b1d      	ldr	r3, [pc, #116]	; (8000f3c <MX_TIM2_Init+0x94>)
 8000ec6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eca:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 167;
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <MX_TIM2_Init+0x94>)
 8000ece:	22a7      	movs	r2, #167	; 0xa7
 8000ed0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <MX_TIM2_Init+0x94>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8000ed8:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <MX_TIM2_Init+0x94>)
 8000eda:	f04f 32ff 	mov.w	r2, #4294967295
 8000ede:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee0:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <MX_TIM2_Init+0x94>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <MX_TIM2_Init+0x94>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000eec:	4813      	ldr	r0, [pc, #76]	; (8000f3c <MX_TIM2_Init+0x94>)
 8000eee:	f002 f975 	bl	80031dc <HAL_TIM_Base_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM2_Init+0x54>
	{
		Error_Handler();
 8000ef8:	f000 f8ba 	bl	8001070 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000efc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f00:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f02:	f107 0308 	add.w	r3, r7, #8
 8000f06:	4619      	mov	r1, r3
 8000f08:	480c      	ldr	r0, [pc, #48]	; (8000f3c <MX_TIM2_Init+0x94>)
 8000f0a:	f002 fb97 	bl	800363c <HAL_TIM_ConfigClockSource>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM2_Init+0x70>
	{
		Error_Handler();
 8000f14:	f000 f8ac 	bl	8001070 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f20:	463b      	mov	r3, r7
 8000f22:	4619      	mov	r1, r3
 8000f24:	4805      	ldr	r0, [pc, #20]	; (8000f3c <MX_TIM2_Init+0x94>)
 8000f26:	f002 fdb3 	bl	8003a90 <HAL_TIMEx_MasterConfigSynchronization>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM2_Init+0x8c>
	{
		Error_Handler();
 8000f30:	f000 f89e 	bl	8001070 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	200001c4 	.word	0x200001c4

08000f40 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_UART4_Init+0x4c>)
 8000f46:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <MX_UART4_Init+0x50>)
 8000f48:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <MX_UART4_Init+0x4c>)
 8000f4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f50:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_UART4_Init+0x4c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <MX_UART4_Init+0x4c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <MX_UART4_Init+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <MX_UART4_Init+0x4c>)
 8000f66:	220c      	movs	r2, #12
 8000f68:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <MX_UART4_Init+0x4c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_UART4_Init+0x4c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_UART4_Init+0x4c>)
 8000f78:	f002 fe1a 	bl	8003bb0 <HAL_UART_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_UART4_Init+0x46>
	{
		Error_Handler();
 8000f82:	f000 f875 	bl	8001070 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	2000020c 	.word	0x2000020c
 8000f90:	40004c00 	.word	0x40004c00

08000f94 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	4b2e      	ldr	r3, [pc, #184]	; (8001068 <MX_GPIO_Init+0xd4>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a2d      	ldr	r2, [pc, #180]	; (8001068 <MX_GPIO_Init+0xd4>)
 8000fb4:	f043 0304 	orr.w	r3, r3, #4
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b2b      	ldr	r3, [pc, #172]	; (8001068 <MX_GPIO_Init+0xd4>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0304 	and.w	r3, r3, #4
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b27      	ldr	r3, [pc, #156]	; (8001068 <MX_GPIO_Init+0xd4>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a26      	ldr	r2, [pc, #152]	; (8001068 <MX_GPIO_Init+0xd4>)
 8000fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b24      	ldr	r3, [pc, #144]	; (8001068 <MX_GPIO_Init+0xd4>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	4b20      	ldr	r3, [pc, #128]	; (8001068 <MX_GPIO_Init+0xd4>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a1f      	ldr	r2, [pc, #124]	; (8001068 <MX_GPIO_Init+0xd4>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <MX_GPIO_Init+0xd4>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <MX_GPIO_Init+0xd4>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a18      	ldr	r2, [pc, #96]	; (8001068 <MX_GPIO_Init+0xd4>)
 8001008:	f043 0308 	orr.w	r3, r3, #8
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b16      	ldr	r3, [pc, #88]	; (8001068 <MX_GPIO_Init+0xd4>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0308 	and.w	r3, r3, #8
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	603b      	str	r3, [r7, #0]
 800101e:	4b12      	ldr	r3, [pc, #72]	; (8001068 <MX_GPIO_Init+0xd4>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a11      	ldr	r2, [pc, #68]	; (8001068 <MX_GPIO_Init+0xd4>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <MX_GPIO_Init+0xd4>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, xanhl_Pin|cam_Pin|do_Pin|xanhd_Pin, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800103c:	480b      	ldr	r0, [pc, #44]	; (800106c <MX_GPIO_Init+0xd8>)
 800103e:	f001 fc01 	bl	8002844 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : xanhl_Pin cam_Pin do_Pin xanhd_Pin */
	GPIO_InitStruct.Pin = xanhl_Pin|cam_Pin|do_Pin|xanhd_Pin;
 8001042:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001046:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001048:	2301      	movs	r3, #1
 800104a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	4804      	ldr	r0, [pc, #16]	; (800106c <MX_GPIO_Init+0xd8>)
 800105c:	f001 fa56 	bl	800250c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001060:	bf00      	nop
 8001062:	3728      	adds	r7, #40	; 0x28
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40023800 	.word	0x40023800
 800106c:	40020c00 	.word	0x40020c00

08001070 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* USER CODE END Error_Handler_Debug */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	4b14      	ldr	r3, [pc, #80]	; (80010dc <HAL_MspInit+0x5c>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	4a13      	ldr	r2, [pc, #76]	; (80010dc <HAL_MspInit+0x5c>)
 8001090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001094:	6453      	str	r3, [r2, #68]	; 0x44
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <HAL_MspInit+0x5c>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	603b      	str	r3, [r7, #0]
 80010a6:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <HAL_MspInit+0x5c>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	4a0c      	ldr	r2, [pc, #48]	; (80010dc <HAL_MspInit+0x5c>)
 80010ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b0:	6413      	str	r3, [r2, #64]	; 0x40
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <HAL_MspInit+0x5c>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 80010be:	2006      	movs	r0, #6
 80010c0:	f001 f950 	bl	8002364 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 1, 0);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2101      	movs	r1, #1
 80010c8:	2005      	movs	r0, #5
 80010ca:	f001 f956 	bl	800237a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80010ce:	2005      	movs	r0, #5
 80010d0:	f001 f96f 	bl	80023b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40023800 	.word	0x40023800

080010e0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a1d      	ldr	r2, [pc, #116]	; (8001174 <HAL_CAN_MspInit+0x94>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d134      	bne.n	800116c <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <HAL_CAN_MspInit+0x98>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	4a1b      	ldr	r2, [pc, #108]	; (8001178 <HAL_CAN_MspInit+0x98>)
 800110c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001110:	6413      	str	r3, [r2, #64]	; 0x40
 8001112:	4b19      	ldr	r3, [pc, #100]	; (8001178 <HAL_CAN_MspInit+0x98>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <HAL_CAN_MspInit+0x98>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a14      	ldr	r2, [pc, #80]	; (8001178 <HAL_CAN_MspInit+0x98>)
 8001128:	f043 0302 	orr.w	r3, r3, #2
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b12      	ldr	r3, [pc, #72]	; (8001178 <HAL_CAN_MspInit+0x98>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800113a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800113e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001144:	2301      	movs	r3, #1
 8001146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001148:	2303      	movs	r3, #3
 800114a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800114c:	2309      	movs	r3, #9
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4619      	mov	r1, r3
 8001156:	4809      	ldr	r0, [pc, #36]	; (800117c <HAL_CAN_MspInit+0x9c>)
 8001158:	f001 f9d8 	bl	800250c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	2101      	movs	r1, #1
 8001160:	2014      	movs	r0, #20
 8001162:	f001 f90a 	bl	800237a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001166:	2014      	movs	r0, #20
 8001168:	f001 f923 	bl	80023b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800116c:	bf00      	nop
 800116e:	3728      	adds	r7, #40	; 0x28
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40006400 	.word	0x40006400
 8001178:	40023800 	.word	0x40023800
 800117c:	40020400 	.word	0x40020400

08001180 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a18      	ldr	r2, [pc, #96]	; (80011f0 <HAL_TIM_Base_MspInit+0x70>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d116      	bne.n	80011c0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <HAL_TIM_Base_MspInit+0x74>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	4a16      	ldr	r2, [pc, #88]	; (80011f4 <HAL_TIM_Base_MspInit+0x74>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6453      	str	r3, [r2, #68]	; 0x44
 80011a2:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <HAL_TIM_Base_MspInit+0x74>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2101      	movs	r1, #1
 80011b2:	2019      	movs	r0, #25
 80011b4:	f001 f8e1 	bl	800237a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80011b8:	2019      	movs	r0, #25
 80011ba:	f001 f8fa 	bl	80023b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011be:	e012      	b.n	80011e6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011c8:	d10d      	bne.n	80011e6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <HAL_TIM_Base_MspInit+0x74>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a08      	ldr	r2, [pc, #32]	; (80011f4 <HAL_TIM_Base_MspInit+0x74>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_TIM_Base_MspInit+0x74>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
}
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40010000 	.word	0x40010000
 80011f4:	40023800 	.word	0x40023800

080011f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	; 0x28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a1d      	ldr	r2, [pc, #116]	; (800128c <HAL_UART_MspInit+0x94>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d134      	bne.n	8001284 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <HAL_UART_MspInit+0x98>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	4a1b      	ldr	r2, [pc, #108]	; (8001290 <HAL_UART_MspInit+0x98>)
 8001224:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001228:	6413      	str	r3, [r2, #64]	; 0x40
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <HAL_UART_MspInit+0x98>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	4b15      	ldr	r3, [pc, #84]	; (8001290 <HAL_UART_MspInit+0x98>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a14      	ldr	r2, [pc, #80]	; (8001290 <HAL_UART_MspInit+0x98>)
 8001240:	f043 0304 	orr.w	r3, r3, #4
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_UART_MspInit+0x98>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0304 	and.w	r3, r3, #4
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001252:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001264:	2308      	movs	r3, #8
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	4809      	ldr	r0, [pc, #36]	; (8001294 <HAL_UART_MspInit+0x9c>)
 8001270:	f001 f94c 	bl	800250c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001274:	2200      	movs	r2, #0
 8001276:	2100      	movs	r1, #0
 8001278:	2034      	movs	r0, #52	; 0x34
 800127a:	f001 f87e 	bl	800237a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800127e:	2034      	movs	r0, #52	; 0x34
 8001280:	f001 f897 	bl	80023b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001284:	bf00      	nop
 8001286:	3728      	adds	r7, #40	; 0x28
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40004c00 	.word	0x40004c00
 8001290:	40023800 	.word	0x40023800
 8001294:	40020800 	.word	0x40020800

08001298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800129c:	e7fe      	b.n	800129c <NMI_Handler+0x4>

0800129e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a2:	e7fe      	b.n	80012a2 <HardFault_Handler+0x4>

080012a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <MemManage_Handler+0x4>

080012aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ae:	e7fe      	b.n	80012ae <BusFault_Handler+0x4>

080012b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <UsageFault_Handler+0x4>

080012b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e4:	f000 f8ec 	bl	80014c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}

080012ec <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
	...

080012fc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001300:	4802      	ldr	r0, [pc, #8]	; (800130c <CAN1_RX0_IRQHandler+0x10>)
 8001302:	f000 fd30 	bl	8001d66 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000154 	.word	0x20000154

08001310 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001314:	4802      	ldr	r0, [pc, #8]	; (8001320 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001316:	f002 f889 	bl	800342c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	2000017c 	.word	0x2000017c

08001324 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <UART4_IRQHandler+0x10>)
 800132a:	f002 fd51 	bl	8003dd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	2000020c 	.word	0x2000020c

08001338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001340:	4a14      	ldr	r2, [pc, #80]	; (8001394 <_sbrk+0x5c>)
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <_sbrk+0x60>)
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <_sbrk+0x64>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d102      	bne.n	800135a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <_sbrk+0x64>)
 8001356:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <_sbrk+0x68>)
 8001358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <_sbrk+0x64>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	429a      	cmp	r2, r3
 8001366:	d207      	bcs.n	8001378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001368:	f003 fe9c 	bl	80050a4 <__errno>
 800136c:	4603      	mov	r3, r0
 800136e:	220c      	movs	r2, #12
 8001370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001372:	f04f 33ff 	mov.w	r3, #4294967295
 8001376:	e009      	b.n	800138c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <_sbrk+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800137e:	4b07      	ldr	r3, [pc, #28]	; (800139c <_sbrk+0x64>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	4a05      	ldr	r2, [pc, #20]	; (800139c <_sbrk+0x64>)
 8001388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138a:	68fb      	ldr	r3, [r7, #12]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20020000 	.word	0x20020000
 8001398:	00000400 	.word	0x00000400
 800139c:	200002ac 	.word	0x200002ac
 80013a0:	20000400 	.word	0x20000400

080013a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <SystemInit+0x20>)
 80013aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ae:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <SystemInit+0x20>)
 80013b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001400 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013cc:	480d      	ldr	r0, [pc, #52]	; (8001404 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013ce:	490e      	ldr	r1, [pc, #56]	; (8001408 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013d0:	4a0e      	ldr	r2, [pc, #56]	; (800140c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d4:	e002      	b.n	80013dc <LoopCopyDataInit>

080013d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013da:	3304      	adds	r3, #4

080013dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e0:	d3f9      	bcc.n	80013d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013e2:	4a0b      	ldr	r2, [pc, #44]	; (8001410 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013e4:	4c0b      	ldr	r4, [pc, #44]	; (8001414 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e8:	e001      	b.n	80013ee <LoopFillZerobss>

080013ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013ec:	3204      	adds	r2, #4

080013ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f0:	d3fb      	bcc.n	80013ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013f2:	f7ff ffd7 	bl	80013a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013f6:	f003 fe5b 	bl	80050b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013fa:	f7ff fa4d 	bl	8000898 <main>
  bx  lr    
 80013fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001400:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001408:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800140c:	08005a2c 	.word	0x08005a2c
  ldr r2, =_sbss
 8001410:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001414:	200003fc 	.word	0x200003fc

08001418 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001418:	e7fe      	b.n	8001418 <ADC_IRQHandler>
	...

0800141c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001420:	4b0e      	ldr	r3, [pc, #56]	; (800145c <HAL_Init+0x40>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0d      	ldr	r2, [pc, #52]	; (800145c <HAL_Init+0x40>)
 8001426:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800142a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <HAL_Init+0x40>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a0a      	ldr	r2, [pc, #40]	; (800145c <HAL_Init+0x40>)
 8001432:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001436:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <HAL_Init+0x40>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a07      	ldr	r2, [pc, #28]	; (800145c <HAL_Init+0x40>)
 800143e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001442:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001444:	2003      	movs	r0, #3
 8001446:	f000 ff8d 	bl	8002364 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800144a:	2000      	movs	r0, #0
 800144c:	f000 f808 	bl	8001460 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001450:	f7ff fe16 	bl	8001080 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40023c00 	.word	0x40023c00

08001460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <HAL_InitTick+0x54>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_InitTick+0x58>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4619      	mov	r1, r3
 8001472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001476:	fbb3 f3f1 	udiv	r3, r3, r1
 800147a:	fbb2 f3f3 	udiv	r3, r2, r3
 800147e:	4618      	mov	r0, r3
 8001480:	f000 ffa5 	bl	80023ce <HAL_SYSTICK_Config>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e00e      	b.n	80014ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b0f      	cmp	r3, #15
 8001492:	d80a      	bhi.n	80014aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001494:	2200      	movs	r2, #0
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
 800149c:	f000 ff6d 	bl	800237a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a0:	4a06      	ldr	r2, [pc, #24]	; (80014bc <HAL_InitTick+0x5c>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
 80014a8:	e000      	b.n	80014ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	2000002c 	.word	0x2000002c
 80014b8:	20000034 	.word	0x20000034
 80014bc:	20000030 	.word	0x20000030

080014c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_IncTick+0x20>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_IncTick+0x24>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4413      	add	r3, r2
 80014d0:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <HAL_IncTick+0x24>)
 80014d2:	6013      	str	r3, [r2, #0]
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	20000034 	.word	0x20000034
 80014e4:	200002b0 	.word	0x200002b0

080014e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return uwTick;
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <HAL_GetTick+0x14>)
 80014ee:	681b      	ldr	r3, [r3, #0]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	200002b0 	.word	0x200002b0

08001500 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e0ed      	b.n	80016ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d102      	bne.n	8001524 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff fdde 	bl	80010e0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0201 	orr.w	r2, r2, #1
 8001532:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001534:	f7ff ffd8 	bl	80014e8 <HAL_GetTick>
 8001538:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800153a:	e012      	b.n	8001562 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800153c:	f7ff ffd4 	bl	80014e8 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b0a      	cmp	r3, #10
 8001548:	d90b      	bls.n	8001562 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2205      	movs	r2, #5
 800155a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e0c5      	b.n	80016ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0e5      	beq.n	800153c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 0202 	bic.w	r2, r2, #2
 800157e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001580:	f7ff ffb2 	bl	80014e8 <HAL_GetTick>
 8001584:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001586:	e012      	b.n	80015ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001588:	f7ff ffae 	bl	80014e8 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b0a      	cmp	r3, #10
 8001594:	d90b      	bls.n	80015ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2205      	movs	r2, #5
 80015a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e09f      	b.n	80016ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1e5      	bne.n	8001588 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	7e1b      	ldrb	r3, [r3, #24]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d108      	bne.n	80015d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	e007      	b.n	80015e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	7e5b      	ldrb	r3, [r3, #25]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d108      	bne.n	8001600 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	e007      	b.n	8001610 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800160e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	7e9b      	ldrb	r3, [r3, #26]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d108      	bne.n	800162a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f042 0220 	orr.w	r2, r2, #32
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	e007      	b.n	800163a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0220 	bic.w	r2, r2, #32
 8001638:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	7edb      	ldrb	r3, [r3, #27]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d108      	bne.n	8001654 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f022 0210 	bic.w	r2, r2, #16
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	e007      	b.n	8001664 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 0210 	orr.w	r2, r2, #16
 8001662:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	7f1b      	ldrb	r3, [r3, #28]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d108      	bne.n	800167e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f042 0208 	orr.w	r2, r2, #8
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	e007      	b.n	800168e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f022 0208 	bic.w	r2, r2, #8
 800168c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	7f5b      	ldrb	r3, [r3, #29]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d108      	bne.n	80016a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f042 0204 	orr.w	r2, r2, #4
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	e007      	b.n	80016b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 0204 	bic.w	r2, r2, #4
 80016b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	431a      	orrs	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	431a      	orrs	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	ea42 0103 	orr.w	r1, r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	1e5a      	subs	r2, r3, #1
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b087      	sub	sp, #28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800170e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001710:	7cfb      	ldrb	r3, [r7, #19]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d003      	beq.n	800171e <HAL_CAN_ConfigFilter+0x26>
 8001716:	7cfb      	ldrb	r3, [r7, #19]
 8001718:	2b02      	cmp	r3, #2
 800171a:	f040 80be 	bne.w	800189a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800171e:	4b65      	ldr	r3, [pc, #404]	; (80018b4 <HAL_CAN_ConfigFilter+0x1bc>)
 8001720:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001728:	f043 0201 	orr.w	r2, r3, #1
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001738:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	021b      	lsls	r3, r3, #8
 800174e:	431a      	orrs	r2, r3
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	f003 031f 	and.w	r3, r3, #31
 800175e:	2201      	movs	r2, #1
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	43db      	mvns	r3, r3
 8001770:	401a      	ands	r2, r3
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	69db      	ldr	r3, [r3, #28]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d123      	bne.n	80017c8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	43db      	mvns	r3, r3
 800178a:	401a      	ands	r2, r3
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017a2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	3248      	adds	r2, #72	; 0x48
 80017a8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017bc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017be:	6979      	ldr	r1, [r7, #20]
 80017c0:	3348      	adds	r3, #72	; 0x48
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	440b      	add	r3, r1
 80017c6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d122      	bne.n	8001816 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	431a      	orrs	r2, r3
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80017f0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	3248      	adds	r2, #72	; 0x48
 80017f6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800180a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800180c:	6979      	ldr	r1, [r7, #20]
 800180e:	3348      	adds	r3, #72	; 0x48
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	440b      	add	r3, r1
 8001814:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d109      	bne.n	8001832 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	43db      	mvns	r3, r3
 8001828:	401a      	ands	r2, r3
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001830:	e007      	b.n	8001842 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	431a      	orrs	r2, r3
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d109      	bne.n	800185e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	43db      	mvns	r3, r3
 8001854:	401a      	ands	r2, r3
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800185c:	e007      	b.n	800186e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	431a      	orrs	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d107      	bne.n	8001886 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	431a      	orrs	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800188c:	f023 0201 	bic.w	r2, r3, #1
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	e006      	b.n	80018a8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
  }
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	371c      	adds	r7, #28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	40006400 	.word	0x40006400

080018b8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d12e      	bne.n	800192a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2202      	movs	r2, #2
 80018d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 0201 	bic.w	r2, r2, #1
 80018e2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80018e4:	f7ff fe00 	bl	80014e8 <HAL_GetTick>
 80018e8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80018ea:	e012      	b.n	8001912 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018ec:	f7ff fdfc 	bl	80014e8 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b0a      	cmp	r3, #10
 80018f8:	d90b      	bls.n	8001912 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2205      	movs	r2, #5
 800190a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e012      	b.n	8001938 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1e5      	bne.n	80018ec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001926:	2300      	movs	r3, #0
 8001928:	e006      	b.n	8001938 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
  }
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001940:	b480      	push	{r7}
 8001942:	b089      	sub	sp, #36	; 0x24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
 800194c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001954:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800195e:	7ffb      	ldrb	r3, [r7, #31]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d003      	beq.n	800196c <HAL_CAN_AddTxMessage+0x2c>
 8001964:	7ffb      	ldrb	r3, [r7, #31]
 8001966:	2b02      	cmp	r3, #2
 8001968:	f040 80b8 	bne.w	8001adc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10a      	bne.n	800198c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800197c:	2b00      	cmp	r3, #0
 800197e:	d105      	bne.n	800198c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 80a0 	beq.w	8001acc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	0e1b      	lsrs	r3, r3, #24
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	2b02      	cmp	r3, #2
 800199a:	d907      	bls.n	80019ac <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e09e      	b.n	8001aea <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80019ac:	2201      	movs	r2, #1
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	409a      	lsls	r2, r3
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d10d      	bne.n	80019da <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80019c8:	68f9      	ldr	r1, [r7, #12]
 80019ca:	6809      	ldr	r1, [r1, #0]
 80019cc:	431a      	orrs	r2, r3
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	3318      	adds	r3, #24
 80019d2:	011b      	lsls	r3, r3, #4
 80019d4:	440b      	add	r3, r1
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	e00f      	b.n	80019fa <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019e4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019ea:	68f9      	ldr	r1, [r7, #12]
 80019ec:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80019ee:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	3318      	adds	r3, #24
 80019f4:	011b      	lsls	r3, r3, #4
 80019f6:	440b      	add	r3, r1
 80019f8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6819      	ldr	r1, [r3, #0]
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	691a      	ldr	r2, [r3, #16]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	3318      	adds	r3, #24
 8001a06:	011b      	lsls	r3, r3, #4
 8001a08:	440b      	add	r3, r1
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	7d1b      	ldrb	r3, [r3, #20]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d111      	bne.n	8001a3a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	3318      	adds	r3, #24
 8001a1e:	011b      	lsls	r3, r3, #4
 8001a20:	4413      	add	r3, r2
 8001a22:	3304      	adds	r3, #4
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	6811      	ldr	r1, [r2, #0]
 8001a2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	3318      	adds	r3, #24
 8001a32:	011b      	lsls	r3, r3, #4
 8001a34:	440b      	add	r3, r1
 8001a36:	3304      	adds	r3, #4
 8001a38:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3307      	adds	r3, #7
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	061a      	lsls	r2, r3, #24
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3306      	adds	r3, #6
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	041b      	lsls	r3, r3, #16
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3305      	adds	r3, #5
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	021b      	lsls	r3, r3, #8
 8001a54:	4313      	orrs	r3, r2
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	3204      	adds	r2, #4
 8001a5a:	7812      	ldrb	r2, [r2, #0]
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	6811      	ldr	r1, [r2, #0]
 8001a62:	ea43 0200 	orr.w	r2, r3, r0
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	011b      	lsls	r3, r3, #4
 8001a6a:	440b      	add	r3, r1
 8001a6c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001a70:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3303      	adds	r3, #3
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	061a      	lsls	r2, r3, #24
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3302      	adds	r3, #2
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	041b      	lsls	r3, r3, #16
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3301      	adds	r3, #1
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	021b      	lsls	r3, r3, #8
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	7812      	ldrb	r2, [r2, #0]
 8001a92:	4610      	mov	r0, r2
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	6811      	ldr	r1, [r2, #0]
 8001a98:	ea43 0200 	orr.w	r2, r3, r0
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	440b      	add	r3, r1
 8001aa2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001aa6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	3318      	adds	r3, #24
 8001ab0:	011b      	lsls	r3, r3, #4
 8001ab2:	4413      	add	r3, r2
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	6811      	ldr	r1, [r2, #0]
 8001aba:	f043 0201 	orr.w	r2, r3, #1
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	3318      	adds	r3, #24
 8001ac2:	011b      	lsls	r3, r3, #4
 8001ac4:	440b      	add	r3, r1
 8001ac6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	e00e      	b.n	8001aea <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e006      	b.n	8001aea <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
  }
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3724      	adds	r7, #36	; 0x24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001af6:	b480      	push	{r7}
 8001af8:	b087      	sub	sp, #28
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	60f8      	str	r0, [r7, #12]
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
 8001b02:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b0a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b0c:	7dfb      	ldrb	r3, [r7, #23]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d003      	beq.n	8001b1a <HAL_CAN_GetRxMessage+0x24>
 8001b12:	7dfb      	ldrb	r3, [r7, #23]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	f040 80f3 	bne.w	8001d00 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10e      	bne.n	8001b3e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d116      	bne.n	8001b5c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e0e7      	b.n	8001d0e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d107      	bne.n	8001b5c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e0d8      	b.n	8001d0e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	331b      	adds	r3, #27
 8001b64:	011b      	lsls	r3, r3, #4
 8001b66:	4413      	add	r3, r2
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0204 	and.w	r2, r3, #4
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10c      	bne.n	8001b94 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	331b      	adds	r3, #27
 8001b82:	011b      	lsls	r3, r3, #4
 8001b84:	4413      	add	r3, r2
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	0d5b      	lsrs	r3, r3, #21
 8001b8a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	e00b      	b.n	8001bac <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	331b      	adds	r3, #27
 8001b9c:	011b      	lsls	r3, r3, #4
 8001b9e:	4413      	add	r3, r2
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	08db      	lsrs	r3, r3, #3
 8001ba4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	331b      	adds	r3, #27
 8001bb4:	011b      	lsls	r3, r3, #4
 8001bb6:	4413      	add	r3, r2
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0202 	and.w	r2, r3, #2
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	331b      	adds	r3, #27
 8001bca:	011b      	lsls	r3, r3, #4
 8001bcc:	4413      	add	r3, r2
 8001bce:	3304      	adds	r3, #4
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 020f 	and.w	r2, r3, #15
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	331b      	adds	r3, #27
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	4413      	add	r3, r2
 8001be6:	3304      	adds	r3, #4
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	0a1b      	lsrs	r3, r3, #8
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	331b      	adds	r3, #27
 8001bfa:	011b      	lsls	r3, r3, #4
 8001bfc:	4413      	add	r3, r2
 8001bfe:	3304      	adds	r3, #4
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	0c1b      	lsrs	r3, r3, #16
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	011b      	lsls	r3, r3, #4
 8001c12:	4413      	add	r3, r2
 8001c14:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	011b      	lsls	r3, r3, #4
 8001c28:	4413      	add	r3, r2
 8001c2a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	0a1a      	lsrs	r2, r3, #8
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	3301      	adds	r3, #1
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	011b      	lsls	r3, r3, #4
 8001c42:	4413      	add	r3, r2
 8001c44:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	0c1a      	lsrs	r2, r3, #16
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	3302      	adds	r3, #2
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	011b      	lsls	r3, r3, #4
 8001c5c:	4413      	add	r3, r2
 8001c5e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	0e1a      	lsrs	r2, r3, #24
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	3303      	adds	r3, #3
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	011b      	lsls	r3, r3, #4
 8001c76:	4413      	add	r3, r2
 8001c78:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	3304      	adds	r3, #4
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	011b      	lsls	r3, r3, #4
 8001c8e:	4413      	add	r3, r2
 8001c90:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	0a1a      	lsrs	r2, r3, #8
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	3305      	adds	r3, #5
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	011b      	lsls	r3, r3, #4
 8001ca8:	4413      	add	r3, r2
 8001caa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	0c1a      	lsrs	r2, r3, #16
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	3306      	adds	r3, #6
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	4413      	add	r3, r2
 8001cc4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	0e1a      	lsrs	r2, r3, #24
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	3307      	adds	r3, #7
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d108      	bne.n	8001cec <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f042 0220 	orr.w	r2, r2, #32
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	e007      	b.n	8001cfc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	691a      	ldr	r2, [r3, #16]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0220 	orr.w	r2, r2, #32
 8001cfa:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	e006      	b.n	8001d0e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d04:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
  }
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	371c      	adds	r7, #28
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b085      	sub	sp, #20
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d2a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d002      	beq.n	8001d38 <HAL_CAN_ActivateNotification+0x1e>
 8001d32:	7bfb      	ldrb	r3, [r7, #15]
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d109      	bne.n	8001d4c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6959      	ldr	r1, [r3, #20]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	e006      	b.n	8001d5a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
  }
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b08a      	sub	sp, #40	; 0x28
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001da2:	6a3b      	ldr	r3, [r7, #32]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d07c      	beq.n	8001ea6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d023      	beq.n	8001dfe <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 f983 	bl	80020d4 <HAL_CAN_TxMailbox0CompleteCallback>
 8001dce:	e016      	b.n	8001dfe <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d004      	beq.n	8001de4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
 8001de2:	e00c      	b.n	8001dfe <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d004      	beq.n	8001df8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
 8001df6:	e002      	b.n	8001dfe <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 f989 	bl	8002110 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d024      	beq.n	8001e52 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e10:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f963 	bl	80020e8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001e22:	e016      	b.n	8001e52 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d004      	beq.n	8001e38 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
 8001e36:	e00c      	b.n	8001e52 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d004      	beq.n	8001e4c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
 8001e4a:	e002      	b.n	8001e52 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f969 	bl	8002124 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d024      	beq.n	8001ea6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e64:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f943 	bl	80020fc <HAL_CAN_TxMailbox2CompleteCallback>
 8001e76:	e016      	b.n	8001ea6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d004      	beq.n	8001e8c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
 8001e8a:	e00c      	b.n	8001ea6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d004      	beq.n	8001ea0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9e:	e002      	b.n	8001ea6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f949 	bl	8002138 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ea6:	6a3b      	ldr	r3, [r7, #32]
 8001ea8:	f003 0308 	and.w	r3, r3, #8
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00c      	beq.n	8001eca <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f003 0310 	and.w	r3, r3, #16
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d007      	beq.n	8001eca <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2210      	movs	r2, #16
 8001ec8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001eca:	6a3b      	ldr	r3, [r7, #32]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00b      	beq.n	8001eec <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d006      	beq.n	8001eec <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2208      	movs	r2, #8
 8001ee4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f930 	bl	800214c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d009      	beq.n	8001f0a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d002      	beq.n	8001f0a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7fe fbab 	bl	8000660 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00c      	beq.n	8001f2e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	f003 0310 	and.w	r3, r3, #16
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d007      	beq.n	8001f2e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2210      	movs	r2, #16
 8001f2c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
 8001f30:	f003 0320 	and.w	r3, r3, #32
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00b      	beq.n	8001f50 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d006      	beq.n	8001f50 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2208      	movs	r2, #8
 8001f48:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f912 	bl	8002174 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001f50:	6a3b      	ldr	r3, [r7, #32]
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d009      	beq.n	8001f6e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f8f9 	bl	8002160 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001f6e:	6a3b      	ldr	r3, [r7, #32]
 8001f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00b      	beq.n	8001f90 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f003 0310 	and.w	r3, r3, #16
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d006      	beq.n	8001f90 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2210      	movs	r2, #16
 8001f88:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f8fc 	bl	8002188 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001f90:	6a3b      	ldr	r3, [r7, #32]
 8001f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00b      	beq.n	8001fb2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	f003 0308 	and.w	r3, r3, #8
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d006      	beq.n	8001fb2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2208      	movs	r2, #8
 8001faa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f8f5 	bl	800219c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001fb2:	6a3b      	ldr	r3, [r7, #32]
 8001fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d07b      	beq.n	80020b4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d072      	beq.n	80020ac <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d008      	beq.n	8001fe2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d008      	beq.n	8001ffe <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	f043 0302 	orr.w	r3, r3, #2
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
 8002000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002004:	2b00      	cmp	r3, #0
 8002006:	d008      	beq.n	800201a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	f043 0304 	orr.w	r3, r3, #4
 8002018:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800201a:	6a3b      	ldr	r3, [r7, #32]
 800201c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002020:	2b00      	cmp	r3, #0
 8002022:	d043      	beq.n	80020ac <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800202a:	2b00      	cmp	r3, #0
 800202c:	d03e      	beq.n	80020ac <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002034:	2b60      	cmp	r3, #96	; 0x60
 8002036:	d02b      	beq.n	8002090 <HAL_CAN_IRQHandler+0x32a>
 8002038:	2b60      	cmp	r3, #96	; 0x60
 800203a:	d82e      	bhi.n	800209a <HAL_CAN_IRQHandler+0x334>
 800203c:	2b50      	cmp	r3, #80	; 0x50
 800203e:	d022      	beq.n	8002086 <HAL_CAN_IRQHandler+0x320>
 8002040:	2b50      	cmp	r3, #80	; 0x50
 8002042:	d82a      	bhi.n	800209a <HAL_CAN_IRQHandler+0x334>
 8002044:	2b40      	cmp	r3, #64	; 0x40
 8002046:	d019      	beq.n	800207c <HAL_CAN_IRQHandler+0x316>
 8002048:	2b40      	cmp	r3, #64	; 0x40
 800204a:	d826      	bhi.n	800209a <HAL_CAN_IRQHandler+0x334>
 800204c:	2b30      	cmp	r3, #48	; 0x30
 800204e:	d010      	beq.n	8002072 <HAL_CAN_IRQHandler+0x30c>
 8002050:	2b30      	cmp	r3, #48	; 0x30
 8002052:	d822      	bhi.n	800209a <HAL_CAN_IRQHandler+0x334>
 8002054:	2b10      	cmp	r3, #16
 8002056:	d002      	beq.n	800205e <HAL_CAN_IRQHandler+0x2f8>
 8002058:	2b20      	cmp	r3, #32
 800205a:	d005      	beq.n	8002068 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800205c:	e01d      	b.n	800209a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	f043 0308 	orr.w	r3, r3, #8
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002066:	e019      	b.n	800209c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	f043 0310 	orr.w	r3, r3, #16
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002070:	e014      	b.n	800209c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	f043 0320 	orr.w	r3, r3, #32
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800207a:	e00f      	b.n	800209c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002084:	e00a      	b.n	800209c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800208e:	e005      	b.n	800209c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002098:	e000      	b.n	800209c <HAL_CAN_IRQHandler+0x336>
            break;
 800209a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	699a      	ldr	r2, [r3, #24]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80020aa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2204      	movs	r2, #4
 80020b2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d008      	beq.n	80020cc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	431a      	orrs	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f872 	bl	80021b0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80020cc:	bf00      	nop
 80020ce:	3728      	adds	r7, #40	; 0x28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021d4:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <__NVIC_SetPriorityGrouping+0x44>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021e0:	4013      	ands	r3, r2
 80021e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021f6:	4a04      	ldr	r2, [pc, #16]	; (8002208 <__NVIC_SetPriorityGrouping+0x44>)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	60d3      	str	r3, [r2, #12]
}
 80021fc:	bf00      	nop
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002210:	4b04      	ldr	r3, [pc, #16]	; (8002224 <__NVIC_GetPriorityGrouping+0x18>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	0a1b      	lsrs	r3, r3, #8
 8002216:	f003 0307 	and.w	r3, r3, #7
}
 800221a:	4618      	mov	r0, r3
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	2b00      	cmp	r3, #0
 8002238:	db0b      	blt.n	8002252 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	f003 021f 	and.w	r2, r3, #31
 8002240:	4907      	ldr	r1, [pc, #28]	; (8002260 <__NVIC_EnableIRQ+0x38>)
 8002242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002246:	095b      	lsrs	r3, r3, #5
 8002248:	2001      	movs	r0, #1
 800224a:	fa00 f202 	lsl.w	r2, r0, r2
 800224e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	e000e100 	.word	0xe000e100

08002264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	6039      	str	r1, [r7, #0]
 800226e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002274:	2b00      	cmp	r3, #0
 8002276:	db0a      	blt.n	800228e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	b2da      	uxtb	r2, r3
 800227c:	490c      	ldr	r1, [pc, #48]	; (80022b0 <__NVIC_SetPriority+0x4c>)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	0112      	lsls	r2, r2, #4
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	440b      	add	r3, r1
 8002288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800228c:	e00a      	b.n	80022a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	b2da      	uxtb	r2, r3
 8002292:	4908      	ldr	r1, [pc, #32]	; (80022b4 <__NVIC_SetPriority+0x50>)
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	3b04      	subs	r3, #4
 800229c:	0112      	lsls	r2, r2, #4
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	440b      	add	r3, r1
 80022a2:	761a      	strb	r2, [r3, #24]
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	e000e100 	.word	0xe000e100
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b089      	sub	sp, #36	; 0x24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f1c3 0307 	rsb	r3, r3, #7
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	bf28      	it	cs
 80022d6:	2304      	movcs	r3, #4
 80022d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	3304      	adds	r3, #4
 80022de:	2b06      	cmp	r3, #6
 80022e0:	d902      	bls.n	80022e8 <NVIC_EncodePriority+0x30>
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3b03      	subs	r3, #3
 80022e6:	e000      	b.n	80022ea <NVIC_EncodePriority+0x32>
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ec:	f04f 32ff 	mov.w	r2, #4294967295
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43da      	mvns	r2, r3
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	401a      	ands	r2, r3
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002300:	f04f 31ff 	mov.w	r1, #4294967295
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	fa01 f303 	lsl.w	r3, r1, r3
 800230a:	43d9      	mvns	r1, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002310:	4313      	orrs	r3, r2
         );
}
 8002312:	4618      	mov	r0, r3
 8002314:	3724      	adds	r7, #36	; 0x24
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
	...

08002320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3b01      	subs	r3, #1
 800232c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002330:	d301      	bcc.n	8002336 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002332:	2301      	movs	r3, #1
 8002334:	e00f      	b.n	8002356 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002336:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <SysTick_Config+0x40>)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3b01      	subs	r3, #1
 800233c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800233e:	210f      	movs	r1, #15
 8002340:	f04f 30ff 	mov.w	r0, #4294967295
 8002344:	f7ff ff8e 	bl	8002264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002348:	4b05      	ldr	r3, [pc, #20]	; (8002360 <SysTick_Config+0x40>)
 800234a:	2200      	movs	r2, #0
 800234c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800234e:	4b04      	ldr	r3, [pc, #16]	; (8002360 <SysTick_Config+0x40>)
 8002350:	2207      	movs	r2, #7
 8002352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	e000e010 	.word	0xe000e010

08002364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7ff ff29 	bl	80021c4 <__NVIC_SetPriorityGrouping>
}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800237a:	b580      	push	{r7, lr}
 800237c:	b086      	sub	sp, #24
 800237e:	af00      	add	r7, sp, #0
 8002380:	4603      	mov	r3, r0
 8002382:	60b9      	str	r1, [r7, #8]
 8002384:	607a      	str	r2, [r7, #4]
 8002386:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800238c:	f7ff ff3e 	bl	800220c <__NVIC_GetPriorityGrouping>
 8002390:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	68b9      	ldr	r1, [r7, #8]
 8002396:	6978      	ldr	r0, [r7, #20]
 8002398:	f7ff ff8e 	bl	80022b8 <NVIC_EncodePriority>
 800239c:	4602      	mov	r2, r0
 800239e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023a2:	4611      	mov	r1, r2
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff ff5d 	bl	8002264 <__NVIC_SetPriority>
}
 80023aa:	bf00      	nop
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	4603      	mov	r3, r0
 80023ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff ff31 	bl	8002228 <__NVIC_EnableIRQ>
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff ffa2 	bl	8002320 <SysTick_Config>
 80023dc:	4603      	mov	r3, r0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b084      	sub	sp, #16
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023f4:	f7ff f878 	bl	80014e8 <HAL_GetTick>
 80023f8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d008      	beq.n	8002418 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2280      	movs	r2, #128	; 0x80
 800240a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e052      	b.n	80024be <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0216 	bic.w	r2, r2, #22
 8002426:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695a      	ldr	r2, [r3, #20]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002436:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	2b00      	cmp	r3, #0
 800243e:	d103      	bne.n	8002448 <HAL_DMA_Abort+0x62>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002444:	2b00      	cmp	r3, #0
 8002446:	d007      	beq.n	8002458 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0208 	bic.w	r2, r2, #8
 8002456:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0201 	bic.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002468:	e013      	b.n	8002492 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800246a:	f7ff f83d 	bl	80014e8 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b05      	cmp	r3, #5
 8002476:	d90c      	bls.n	8002492 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2220      	movs	r2, #32
 800247c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2203      	movs	r2, #3
 8002482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e015      	b.n	80024be <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1e4      	bne.n	800246a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a4:	223f      	movs	r2, #63	; 0x3f
 80024a6:	409a      	lsls	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d004      	beq.n	80024e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2280      	movs	r2, #128	; 0x80
 80024de:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e00c      	b.n	80024fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2205      	movs	r2, #5
 80024e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0201 	bic.w	r2, r2, #1
 80024fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
	...

0800250c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800250c:	b480      	push	{r7}
 800250e:	b089      	sub	sp, #36	; 0x24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800251a:	2300      	movs	r3, #0
 800251c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800251e:	2300      	movs	r3, #0
 8002520:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
 8002526:	e16b      	b.n	8002800 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002528:	2201      	movs	r2, #1
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	4013      	ands	r3, r2
 800253a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	429a      	cmp	r2, r3
 8002542:	f040 815a 	bne.w	80027fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	2b01      	cmp	r3, #1
 8002550:	d005      	beq.n	800255e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800255a:	2b02      	cmp	r3, #2
 800255c:	d130      	bne.n	80025c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	2203      	movs	r2, #3
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43db      	mvns	r3, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4013      	ands	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4313      	orrs	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002594:	2201      	movs	r2, #1
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	091b      	lsrs	r3, r3, #4
 80025aa:	f003 0201 	and.w	r2, r3, #1
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 0303 	and.w	r3, r3, #3
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d017      	beq.n	80025fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	2203      	movs	r2, #3
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d123      	bne.n	8002650 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	08da      	lsrs	r2, r3, #3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3208      	adds	r2, #8
 8002610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002614:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	220f      	movs	r2, #15
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	08da      	lsrs	r2, r3, #3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3208      	adds	r2, #8
 800264a:	69b9      	ldr	r1, [r7, #24]
 800264c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	2203      	movs	r2, #3
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 0203 	and.w	r2, r3, #3
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80b4 	beq.w	80027fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	4b60      	ldr	r3, [pc, #384]	; (8002818 <HAL_GPIO_Init+0x30c>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	4a5f      	ldr	r2, [pc, #380]	; (8002818 <HAL_GPIO_Init+0x30c>)
 800269c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026a0:	6453      	str	r3, [r2, #68]	; 0x44
 80026a2:	4b5d      	ldr	r3, [pc, #372]	; (8002818 <HAL_GPIO_Init+0x30c>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ae:	4a5b      	ldr	r2, [pc, #364]	; (800281c <HAL_GPIO_Init+0x310>)
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	089b      	lsrs	r3, r3, #2
 80026b4:	3302      	adds	r3, #2
 80026b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	220f      	movs	r2, #15
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4013      	ands	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a52      	ldr	r2, [pc, #328]	; (8002820 <HAL_GPIO_Init+0x314>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d02b      	beq.n	8002732 <HAL_GPIO_Init+0x226>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a51      	ldr	r2, [pc, #324]	; (8002824 <HAL_GPIO_Init+0x318>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d025      	beq.n	800272e <HAL_GPIO_Init+0x222>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a50      	ldr	r2, [pc, #320]	; (8002828 <HAL_GPIO_Init+0x31c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d01f      	beq.n	800272a <HAL_GPIO_Init+0x21e>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a4f      	ldr	r2, [pc, #316]	; (800282c <HAL_GPIO_Init+0x320>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d019      	beq.n	8002726 <HAL_GPIO_Init+0x21a>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a4e      	ldr	r2, [pc, #312]	; (8002830 <HAL_GPIO_Init+0x324>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d013      	beq.n	8002722 <HAL_GPIO_Init+0x216>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a4d      	ldr	r2, [pc, #308]	; (8002834 <HAL_GPIO_Init+0x328>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d00d      	beq.n	800271e <HAL_GPIO_Init+0x212>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a4c      	ldr	r2, [pc, #304]	; (8002838 <HAL_GPIO_Init+0x32c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d007      	beq.n	800271a <HAL_GPIO_Init+0x20e>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a4b      	ldr	r2, [pc, #300]	; (800283c <HAL_GPIO_Init+0x330>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d101      	bne.n	8002716 <HAL_GPIO_Init+0x20a>
 8002712:	2307      	movs	r3, #7
 8002714:	e00e      	b.n	8002734 <HAL_GPIO_Init+0x228>
 8002716:	2308      	movs	r3, #8
 8002718:	e00c      	b.n	8002734 <HAL_GPIO_Init+0x228>
 800271a:	2306      	movs	r3, #6
 800271c:	e00a      	b.n	8002734 <HAL_GPIO_Init+0x228>
 800271e:	2305      	movs	r3, #5
 8002720:	e008      	b.n	8002734 <HAL_GPIO_Init+0x228>
 8002722:	2304      	movs	r3, #4
 8002724:	e006      	b.n	8002734 <HAL_GPIO_Init+0x228>
 8002726:	2303      	movs	r3, #3
 8002728:	e004      	b.n	8002734 <HAL_GPIO_Init+0x228>
 800272a:	2302      	movs	r3, #2
 800272c:	e002      	b.n	8002734 <HAL_GPIO_Init+0x228>
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <HAL_GPIO_Init+0x228>
 8002732:	2300      	movs	r3, #0
 8002734:	69fa      	ldr	r2, [r7, #28]
 8002736:	f002 0203 	and.w	r2, r2, #3
 800273a:	0092      	lsls	r2, r2, #2
 800273c:	4093      	lsls	r3, r2
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002744:	4935      	ldr	r1, [pc, #212]	; (800281c <HAL_GPIO_Init+0x310>)
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	089b      	lsrs	r3, r3, #2
 800274a:	3302      	adds	r3, #2
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002752:	4b3b      	ldr	r3, [pc, #236]	; (8002840 <HAL_GPIO_Init+0x334>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	43db      	mvns	r3, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002776:	4a32      	ldr	r2, [pc, #200]	; (8002840 <HAL_GPIO_Init+0x334>)
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800277c:	4b30      	ldr	r3, [pc, #192]	; (8002840 <HAL_GPIO_Init+0x334>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027a0:	4a27      	ldr	r2, [pc, #156]	; (8002840 <HAL_GPIO_Init+0x334>)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027a6:	4b26      	ldr	r3, [pc, #152]	; (8002840 <HAL_GPIO_Init+0x334>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	43db      	mvns	r3, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4013      	ands	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ca:	4a1d      	ldr	r2, [pc, #116]	; (8002840 <HAL_GPIO_Init+0x334>)
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027d0:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <HAL_GPIO_Init+0x334>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027f4:	4a12      	ldr	r2, [pc, #72]	; (8002840 <HAL_GPIO_Init+0x334>)
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	3301      	adds	r3, #1
 80027fe:	61fb      	str	r3, [r7, #28]
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	2b0f      	cmp	r3, #15
 8002804:	f67f ae90 	bls.w	8002528 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002808:	bf00      	nop
 800280a:	bf00      	nop
 800280c:	3724      	adds	r7, #36	; 0x24
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	40023800 	.word	0x40023800
 800281c:	40013800 	.word	0x40013800
 8002820:	40020000 	.word	0x40020000
 8002824:	40020400 	.word	0x40020400
 8002828:	40020800 	.word	0x40020800
 800282c:	40020c00 	.word	0x40020c00
 8002830:	40021000 	.word	0x40021000
 8002834:	40021400 	.word	0x40021400
 8002838:	40021800 	.word	0x40021800
 800283c:	40021c00 	.word	0x40021c00
 8002840:	40013c00 	.word	0x40013c00

08002844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	460b      	mov	r3, r1
 800284e:	807b      	strh	r3, [r7, #2]
 8002850:	4613      	mov	r3, r2
 8002852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002854:	787b      	ldrb	r3, [r7, #1]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800285a:	887a      	ldrh	r2, [r7, #2]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002860:	e003      	b.n	800286a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002862:	887b      	ldrh	r3, [r7, #2]
 8002864:	041a      	lsls	r2, r3, #16
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	619a      	str	r2, [r3, #24]
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002876:	b480      	push	{r7}
 8002878:	b085      	sub	sp, #20
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	460b      	mov	r3, r1
 8002880:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002888:	887a      	ldrh	r2, [r7, #2]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	4013      	ands	r3, r2
 800288e:	041a      	lsls	r2, r3, #16
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	43d9      	mvns	r1, r3
 8002894:	887b      	ldrh	r3, [r7, #2]
 8002896:	400b      	ands	r3, r1
 8002898:	431a      	orrs	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	619a      	str	r2, [r3, #24]
}
 800289e:	bf00      	nop
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
	...

080028ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e267      	b.n	8002d8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d075      	beq.n	80029b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028ca:	4b88      	ldr	r3, [pc, #544]	; (8002aec <HAL_RCC_OscConfig+0x240>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d00c      	beq.n	80028f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028d6:	4b85      	ldr	r3, [pc, #532]	; (8002aec <HAL_RCC_OscConfig+0x240>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d112      	bne.n	8002908 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028e2:	4b82      	ldr	r3, [pc, #520]	; (8002aec <HAL_RCC_OscConfig+0x240>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028ee:	d10b      	bne.n	8002908 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f0:	4b7e      	ldr	r3, [pc, #504]	; (8002aec <HAL_RCC_OscConfig+0x240>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d05b      	beq.n	80029b4 <HAL_RCC_OscConfig+0x108>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d157      	bne.n	80029b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e242      	b.n	8002d8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002910:	d106      	bne.n	8002920 <HAL_RCC_OscConfig+0x74>
 8002912:	4b76      	ldr	r3, [pc, #472]	; (8002aec <HAL_RCC_OscConfig+0x240>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a75      	ldr	r2, [pc, #468]	; (8002aec <HAL_RCC_OscConfig+0x240>)
 8002918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	e01d      	b.n	800295c <HAL_RCC_OscConfig+0xb0>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002928:	d10c      	bne.n	8002944 <HAL_RCC_OscConfig+0x98>
 800292a:	4b70      	ldr	r3, [pc, #448]	; (8002aec <HAL_RCC_OscConfig+0x240>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a6f      	ldr	r2, [pc, #444]	; (8002aec <HAL_RCC_OscConfig+0x240>)
 8002930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	4b6d      	ldr	r3, [pc, #436]	; (8002aec <HAL_RCC_OscConfig+0x240>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a6c      	ldr	r2, [pc, #432]	; (8002aec <HAL_RCC_OscConfig+0x240>)
 800293c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	e00b      	b.n	800295c <HAL_RCC_OscConfig+0xb0>
 8002944:	4b69      	ldr	r3, [pc, #420]	; (8002aec <HAL_RCC_OscConfig+0x240>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a68      	ldr	r2, [pc, #416]	; (8002aec <HAL_RCC_OscConfig+0x240>)
 800294a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800294e:	6013      	str	r3, [r2, #0]
 8002950:	4b66      	ldr	r3, [pc, #408]	; (8002aec <HAL_RCC_OscConfig+0x240>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a65      	ldr	r2, [pc, #404]	; (8002aec <HAL_RCC_OscConfig+0x240>)
 8002956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800295a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d013      	beq.n	800298c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002964:	f7fe fdc0 	bl	80014e8 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800296c:	f7fe fdbc 	bl	80014e8 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b64      	cmp	r3, #100	; 0x64
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e207      	b.n	8002d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297e:	4b5b      	ldr	r3, [pc, #364]	; (8002aec <HAL_RCC_OscConfig+0x240>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f0      	beq.n	800296c <HAL_RCC_OscConfig+0xc0>
 800298a:	e014      	b.n	80029b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7fe fdac 	bl	80014e8 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002994:	f7fe fda8 	bl	80014e8 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b64      	cmp	r3, #100	; 0x64
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e1f3      	b.n	8002d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a6:	4b51      	ldr	r3, [pc, #324]	; (8002aec <HAL_RCC_OscConfig+0x240>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f0      	bne.n	8002994 <HAL_RCC_OscConfig+0xe8>
 80029b2:	e000      	b.n	80029b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d063      	beq.n	8002a8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029c2:	4b4a      	ldr	r3, [pc, #296]	; (8002aec <HAL_RCC_OscConfig+0x240>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 030c 	and.w	r3, r3, #12
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00b      	beq.n	80029e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ce:	4b47      	ldr	r3, [pc, #284]	; (8002aec <HAL_RCC_OscConfig+0x240>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d11c      	bne.n	8002a14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029da:	4b44      	ldr	r3, [pc, #272]	; (8002aec <HAL_RCC_OscConfig+0x240>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d116      	bne.n	8002a14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e6:	4b41      	ldr	r3, [pc, #260]	; (8002aec <HAL_RCC_OscConfig+0x240>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d005      	beq.n	80029fe <HAL_RCC_OscConfig+0x152>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d001      	beq.n	80029fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e1c7      	b.n	8002d8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fe:	4b3b      	ldr	r3, [pc, #236]	; (8002aec <HAL_RCC_OscConfig+0x240>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	4937      	ldr	r1, [pc, #220]	; (8002aec <HAL_RCC_OscConfig+0x240>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a12:	e03a      	b.n	8002a8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d020      	beq.n	8002a5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a1c:	4b34      	ldr	r3, [pc, #208]	; (8002af0 <HAL_RCC_OscConfig+0x244>)
 8002a1e:	2201      	movs	r2, #1
 8002a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a22:	f7fe fd61 	bl	80014e8 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a2a:	f7fe fd5d 	bl	80014e8 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e1a8      	b.n	8002d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3c:	4b2b      	ldr	r3, [pc, #172]	; (8002aec <HAL_RCC_OscConfig+0x240>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0f0      	beq.n	8002a2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a48:	4b28      	ldr	r3, [pc, #160]	; (8002aec <HAL_RCC_OscConfig+0x240>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	4925      	ldr	r1, [pc, #148]	; (8002aec <HAL_RCC_OscConfig+0x240>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	600b      	str	r3, [r1, #0]
 8002a5c:	e015      	b.n	8002a8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a5e:	4b24      	ldr	r3, [pc, #144]	; (8002af0 <HAL_RCC_OscConfig+0x244>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a64:	f7fe fd40 	bl	80014e8 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a6c:	f7fe fd3c 	bl	80014e8 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e187      	b.n	8002d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a7e:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <HAL_RCC_OscConfig+0x240>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d036      	beq.n	8002b04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d016      	beq.n	8002acc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a9e:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <HAL_RCC_OscConfig+0x248>)
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa4:	f7fe fd20 	bl	80014e8 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aac:	f7fe fd1c 	bl	80014e8 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e167      	b.n	8002d8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002abe:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <HAL_RCC_OscConfig+0x240>)
 8002ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0f0      	beq.n	8002aac <HAL_RCC_OscConfig+0x200>
 8002aca:	e01b      	b.n	8002b04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002acc:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <HAL_RCC_OscConfig+0x248>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad2:	f7fe fd09 	bl	80014e8 <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad8:	e00e      	b.n	8002af8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ada:	f7fe fd05 	bl	80014e8 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d907      	bls.n	8002af8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e150      	b.n	8002d8e <HAL_RCC_OscConfig+0x4e2>
 8002aec:	40023800 	.word	0x40023800
 8002af0:	42470000 	.word	0x42470000
 8002af4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af8:	4b88      	ldr	r3, [pc, #544]	; (8002d1c <HAL_RCC_OscConfig+0x470>)
 8002afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1ea      	bne.n	8002ada <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 8097 	beq.w	8002c40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b12:	2300      	movs	r3, #0
 8002b14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b16:	4b81      	ldr	r3, [pc, #516]	; (8002d1c <HAL_RCC_OscConfig+0x470>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10f      	bne.n	8002b42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	4b7d      	ldr	r3, [pc, #500]	; (8002d1c <HAL_RCC_OscConfig+0x470>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	4a7c      	ldr	r2, [pc, #496]	; (8002d1c <HAL_RCC_OscConfig+0x470>)
 8002b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b30:	6413      	str	r3, [r2, #64]	; 0x40
 8002b32:	4b7a      	ldr	r3, [pc, #488]	; (8002d1c <HAL_RCC_OscConfig+0x470>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	60bb      	str	r3, [r7, #8]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b42:	4b77      	ldr	r3, [pc, #476]	; (8002d20 <HAL_RCC_OscConfig+0x474>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d118      	bne.n	8002b80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b4e:	4b74      	ldr	r3, [pc, #464]	; (8002d20 <HAL_RCC_OscConfig+0x474>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a73      	ldr	r2, [pc, #460]	; (8002d20 <HAL_RCC_OscConfig+0x474>)
 8002b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b5a:	f7fe fcc5 	bl	80014e8 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b62:	f7fe fcc1 	bl	80014e8 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e10c      	b.n	8002d8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b74:	4b6a      	ldr	r3, [pc, #424]	; (8002d20 <HAL_RCC_OscConfig+0x474>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0f0      	beq.n	8002b62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d106      	bne.n	8002b96 <HAL_RCC_OscConfig+0x2ea>
 8002b88:	4b64      	ldr	r3, [pc, #400]	; (8002d1c <HAL_RCC_OscConfig+0x470>)
 8002b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8c:	4a63      	ldr	r2, [pc, #396]	; (8002d1c <HAL_RCC_OscConfig+0x470>)
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	6713      	str	r3, [r2, #112]	; 0x70
 8002b94:	e01c      	b.n	8002bd0 <HAL_RCC_OscConfig+0x324>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	2b05      	cmp	r3, #5
 8002b9c:	d10c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x30c>
 8002b9e:	4b5f      	ldr	r3, [pc, #380]	; (8002d1c <HAL_RCC_OscConfig+0x470>)
 8002ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba2:	4a5e      	ldr	r2, [pc, #376]	; (8002d1c <HAL_RCC_OscConfig+0x470>)
 8002ba4:	f043 0304 	orr.w	r3, r3, #4
 8002ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8002baa:	4b5c      	ldr	r3, [pc, #368]	; (8002d1c <HAL_RCC_OscConfig+0x470>)
 8002bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bae:	4a5b      	ldr	r2, [pc, #364]	; (8002d1c <HAL_RCC_OscConfig+0x470>)
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb6:	e00b      	b.n	8002bd0 <HAL_RCC_OscConfig+0x324>
 8002bb8:	4b58      	ldr	r3, [pc, #352]	; (8002d1c <HAL_RCC_OscConfig+0x470>)
 8002bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbc:	4a57      	ldr	r2, [pc, #348]	; (8002d1c <HAL_RCC_OscConfig+0x470>)
 8002bbe:	f023 0301 	bic.w	r3, r3, #1
 8002bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc4:	4b55      	ldr	r3, [pc, #340]	; (8002d1c <HAL_RCC_OscConfig+0x470>)
 8002bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc8:	4a54      	ldr	r2, [pc, #336]	; (8002d1c <HAL_RCC_OscConfig+0x470>)
 8002bca:	f023 0304 	bic.w	r3, r3, #4
 8002bce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d015      	beq.n	8002c04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd8:	f7fe fc86 	bl	80014e8 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bde:	e00a      	b.n	8002bf6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002be0:	f7fe fc82 	bl	80014e8 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e0cb      	b.n	8002d8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf6:	4b49      	ldr	r3, [pc, #292]	; (8002d1c <HAL_RCC_OscConfig+0x470>)
 8002bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0ee      	beq.n	8002be0 <HAL_RCC_OscConfig+0x334>
 8002c02:	e014      	b.n	8002c2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c04:	f7fe fc70 	bl	80014e8 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c0a:	e00a      	b.n	8002c22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c0c:	f7fe fc6c 	bl	80014e8 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e0b5      	b.n	8002d8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c22:	4b3e      	ldr	r3, [pc, #248]	; (8002d1c <HAL_RCC_OscConfig+0x470>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1ee      	bne.n	8002c0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c2e:	7dfb      	ldrb	r3, [r7, #23]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d105      	bne.n	8002c40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c34:	4b39      	ldr	r3, [pc, #228]	; (8002d1c <HAL_RCC_OscConfig+0x470>)
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	4a38      	ldr	r2, [pc, #224]	; (8002d1c <HAL_RCC_OscConfig+0x470>)
 8002c3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 80a1 	beq.w	8002d8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c4a:	4b34      	ldr	r3, [pc, #208]	; (8002d1c <HAL_RCC_OscConfig+0x470>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
 8002c52:	2b08      	cmp	r3, #8
 8002c54:	d05c      	beq.n	8002d10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d141      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5e:	4b31      	ldr	r3, [pc, #196]	; (8002d24 <HAL_RCC_OscConfig+0x478>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c64:	f7fe fc40 	bl	80014e8 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c6c:	f7fe fc3c 	bl	80014e8 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e087      	b.n	8002d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7e:	4b27      	ldr	r3, [pc, #156]	; (8002d1c <HAL_RCC_OscConfig+0x470>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69da      	ldr	r2, [r3, #28]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	019b      	lsls	r3, r3, #6
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca0:	085b      	lsrs	r3, r3, #1
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	041b      	lsls	r3, r3, #16
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	061b      	lsls	r3, r3, #24
 8002cae:	491b      	ldr	r1, [pc, #108]	; (8002d1c <HAL_RCC_OscConfig+0x470>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cb4:	4b1b      	ldr	r3, [pc, #108]	; (8002d24 <HAL_RCC_OscConfig+0x478>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cba:	f7fe fc15 	bl	80014e8 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc2:	f7fe fc11 	bl	80014e8 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e05c      	b.n	8002d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd4:	4b11      	ldr	r3, [pc, #68]	; (8002d1c <HAL_RCC_OscConfig+0x470>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0f0      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x416>
 8002ce0:	e054      	b.n	8002d8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce2:	4b10      	ldr	r3, [pc, #64]	; (8002d24 <HAL_RCC_OscConfig+0x478>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce8:	f7fe fbfe 	bl	80014e8 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf0:	f7fe fbfa 	bl	80014e8 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e045      	b.n	8002d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d02:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <HAL_RCC_OscConfig+0x470>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f0      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x444>
 8002d0e:	e03d      	b.n	8002d8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d107      	bne.n	8002d28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e038      	b.n	8002d8e <HAL_RCC_OscConfig+0x4e2>
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	40007000 	.word	0x40007000
 8002d24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d28:	4b1b      	ldr	r3, [pc, #108]	; (8002d98 <HAL_RCC_OscConfig+0x4ec>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d028      	beq.n	8002d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d121      	bne.n	8002d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d11a      	bne.n	8002d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d58:	4013      	ands	r3, r2
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d111      	bne.n	8002d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6e:	085b      	lsrs	r3, r3, #1
 8002d70:	3b01      	subs	r3, #1
 8002d72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d107      	bne.n	8002d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d001      	beq.n	8002d8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e000      	b.n	8002d8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40023800 	.word	0x40023800

08002d9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e0cc      	b.n	8002f4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002db0:	4b68      	ldr	r3, [pc, #416]	; (8002f54 <HAL_RCC_ClockConfig+0x1b8>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d90c      	bls.n	8002dd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dbe:	4b65      	ldr	r3, [pc, #404]	; (8002f54 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc6:	4b63      	ldr	r3, [pc, #396]	; (8002f54 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e0b8      	b.n	8002f4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d020      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d005      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002df0:	4b59      	ldr	r3, [pc, #356]	; (8002f58 <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	4a58      	ldr	r2, [pc, #352]	; (8002f58 <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0308 	and.w	r3, r3, #8
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d005      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e08:	4b53      	ldr	r3, [pc, #332]	; (8002f58 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	4a52      	ldr	r2, [pc, #328]	; (8002f58 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e14:	4b50      	ldr	r3, [pc, #320]	; (8002f58 <HAL_RCC_ClockConfig+0x1bc>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	494d      	ldr	r1, [pc, #308]	; (8002f58 <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d044      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d107      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3a:	4b47      	ldr	r3, [pc, #284]	; (8002f58 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d119      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e07f      	b.n	8002f4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d003      	beq.n	8002e5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e56:	2b03      	cmp	r3, #3
 8002e58:	d107      	bne.n	8002e6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e5a:	4b3f      	ldr	r3, [pc, #252]	; (8002f58 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d109      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e06f      	b.n	8002f4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6a:	4b3b      	ldr	r3, [pc, #236]	; (8002f58 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e067      	b.n	8002f4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e7a:	4b37      	ldr	r3, [pc, #220]	; (8002f58 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f023 0203 	bic.w	r2, r3, #3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	4934      	ldr	r1, [pc, #208]	; (8002f58 <HAL_RCC_ClockConfig+0x1bc>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e8c:	f7fe fb2c 	bl	80014e8 <HAL_GetTick>
 8002e90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e92:	e00a      	b.n	8002eaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e94:	f7fe fb28 	bl	80014e8 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e04f      	b.n	8002f4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eaa:	4b2b      	ldr	r3, [pc, #172]	; (8002f58 <HAL_RCC_ClockConfig+0x1bc>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 020c 	and.w	r2, r3, #12
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d1eb      	bne.n	8002e94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ebc:	4b25      	ldr	r3, [pc, #148]	; (8002f54 <HAL_RCC_ClockConfig+0x1b8>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d20c      	bcs.n	8002ee4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eca:	4b22      	ldr	r3, [pc, #136]	; (8002f54 <HAL_RCC_ClockConfig+0x1b8>)
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed2:	4b20      	ldr	r3, [pc, #128]	; (8002f54 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0307 	and.w	r3, r3, #7
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d001      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e032      	b.n	8002f4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d008      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ef0:	4b19      	ldr	r3, [pc, #100]	; (8002f58 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	4916      	ldr	r1, [pc, #88]	; (8002f58 <HAL_RCC_ClockConfig+0x1bc>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d009      	beq.n	8002f22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f0e:	4b12      	ldr	r3, [pc, #72]	; (8002f58 <HAL_RCC_ClockConfig+0x1bc>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	490e      	ldr	r1, [pc, #56]	; (8002f58 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f22:	f000 f821 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8002f26:	4602      	mov	r2, r0
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	091b      	lsrs	r3, r3, #4
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	490a      	ldr	r1, [pc, #40]	; (8002f5c <HAL_RCC_ClockConfig+0x1c0>)
 8002f34:	5ccb      	ldrb	r3, [r1, r3]
 8002f36:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3a:	4a09      	ldr	r2, [pc, #36]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f3e:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fe fa8c 	bl	8001460 <HAL_InitTick>

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40023c00 	.word	0x40023c00
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	080059d0 	.word	0x080059d0
 8002f60:	2000002c 	.word	0x2000002c
 8002f64:	20000030 	.word	0x20000030

08002f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f6c:	b094      	sub	sp, #80	; 0x50
 8002f6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	647b      	str	r3, [r7, #68]	; 0x44
 8002f74:	2300      	movs	r3, #0
 8002f76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f78:	2300      	movs	r3, #0
 8002f7a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f80:	4b79      	ldr	r3, [pc, #484]	; (8003168 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f003 030c 	and.w	r3, r3, #12
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d00d      	beq.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x40>
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	f200 80e1 	bhi.w	8003154 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <HAL_RCC_GetSysClockFreq+0x34>
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	d003      	beq.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f9a:	e0db      	b.n	8003154 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f9c:	4b73      	ldr	r3, [pc, #460]	; (800316c <HAL_RCC_GetSysClockFreq+0x204>)
 8002f9e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002fa0:	e0db      	b.n	800315a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fa2:	4b73      	ldr	r3, [pc, #460]	; (8003170 <HAL_RCC_GetSysClockFreq+0x208>)
 8002fa4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fa6:	e0d8      	b.n	800315a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fa8:	4b6f      	ldr	r3, [pc, #444]	; (8003168 <HAL_RCC_GetSysClockFreq+0x200>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fb0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fb2:	4b6d      	ldr	r3, [pc, #436]	; (8003168 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d063      	beq.n	8003086 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fbe:	4b6a      	ldr	r3, [pc, #424]	; (8003168 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	099b      	lsrs	r3, r3, #6
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fc8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fd0:	633b      	str	r3, [r7, #48]	; 0x30
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	637b      	str	r3, [r7, #52]	; 0x34
 8002fd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fda:	4622      	mov	r2, r4
 8002fdc:	462b      	mov	r3, r5
 8002fde:	f04f 0000 	mov.w	r0, #0
 8002fe2:	f04f 0100 	mov.w	r1, #0
 8002fe6:	0159      	lsls	r1, r3, #5
 8002fe8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fec:	0150      	lsls	r0, r2, #5
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	4621      	mov	r1, r4
 8002ff4:	1a51      	subs	r1, r2, r1
 8002ff6:	6139      	str	r1, [r7, #16]
 8002ff8:	4629      	mov	r1, r5
 8002ffa:	eb63 0301 	sbc.w	r3, r3, r1
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	f04f 0200 	mov.w	r2, #0
 8003004:	f04f 0300 	mov.w	r3, #0
 8003008:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800300c:	4659      	mov	r1, fp
 800300e:	018b      	lsls	r3, r1, #6
 8003010:	4651      	mov	r1, sl
 8003012:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003016:	4651      	mov	r1, sl
 8003018:	018a      	lsls	r2, r1, #6
 800301a:	4651      	mov	r1, sl
 800301c:	ebb2 0801 	subs.w	r8, r2, r1
 8003020:	4659      	mov	r1, fp
 8003022:	eb63 0901 	sbc.w	r9, r3, r1
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	f04f 0300 	mov.w	r3, #0
 800302e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003032:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003036:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800303a:	4690      	mov	r8, r2
 800303c:	4699      	mov	r9, r3
 800303e:	4623      	mov	r3, r4
 8003040:	eb18 0303 	adds.w	r3, r8, r3
 8003044:	60bb      	str	r3, [r7, #8]
 8003046:	462b      	mov	r3, r5
 8003048:	eb49 0303 	adc.w	r3, r9, r3
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800305a:	4629      	mov	r1, r5
 800305c:	024b      	lsls	r3, r1, #9
 800305e:	4621      	mov	r1, r4
 8003060:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003064:	4621      	mov	r1, r4
 8003066:	024a      	lsls	r2, r1, #9
 8003068:	4610      	mov	r0, r2
 800306a:	4619      	mov	r1, r3
 800306c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800306e:	2200      	movs	r2, #0
 8003070:	62bb      	str	r3, [r7, #40]	; 0x28
 8003072:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003074:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003078:	f7fd f8fa 	bl	8000270 <__aeabi_uldivmod>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4613      	mov	r3, r2
 8003082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003084:	e058      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003086:	4b38      	ldr	r3, [pc, #224]	; (8003168 <HAL_RCC_GetSysClockFreq+0x200>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	099b      	lsrs	r3, r3, #6
 800308c:	2200      	movs	r2, #0
 800308e:	4618      	mov	r0, r3
 8003090:	4611      	mov	r1, r2
 8003092:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003096:	623b      	str	r3, [r7, #32]
 8003098:	2300      	movs	r3, #0
 800309a:	627b      	str	r3, [r7, #36]	; 0x24
 800309c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030a0:	4642      	mov	r2, r8
 80030a2:	464b      	mov	r3, r9
 80030a4:	f04f 0000 	mov.w	r0, #0
 80030a8:	f04f 0100 	mov.w	r1, #0
 80030ac:	0159      	lsls	r1, r3, #5
 80030ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030b2:	0150      	lsls	r0, r2, #5
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4641      	mov	r1, r8
 80030ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80030be:	4649      	mov	r1, r9
 80030c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030d8:	ebb2 040a 	subs.w	r4, r2, sl
 80030dc:	eb63 050b 	sbc.w	r5, r3, fp
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	00eb      	lsls	r3, r5, #3
 80030ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030ee:	00e2      	lsls	r2, r4, #3
 80030f0:	4614      	mov	r4, r2
 80030f2:	461d      	mov	r5, r3
 80030f4:	4643      	mov	r3, r8
 80030f6:	18e3      	adds	r3, r4, r3
 80030f8:	603b      	str	r3, [r7, #0]
 80030fa:	464b      	mov	r3, r9
 80030fc:	eb45 0303 	adc.w	r3, r5, r3
 8003100:	607b      	str	r3, [r7, #4]
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	f04f 0300 	mov.w	r3, #0
 800310a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800310e:	4629      	mov	r1, r5
 8003110:	028b      	lsls	r3, r1, #10
 8003112:	4621      	mov	r1, r4
 8003114:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003118:	4621      	mov	r1, r4
 800311a:	028a      	lsls	r2, r1, #10
 800311c:	4610      	mov	r0, r2
 800311e:	4619      	mov	r1, r3
 8003120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003122:	2200      	movs	r2, #0
 8003124:	61bb      	str	r3, [r7, #24]
 8003126:	61fa      	str	r2, [r7, #28]
 8003128:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800312c:	f7fd f8a0 	bl	8000270 <__aeabi_uldivmod>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4613      	mov	r3, r2
 8003136:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003138:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <HAL_RCC_GetSysClockFreq+0x200>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	0c1b      	lsrs	r3, r3, #16
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	3301      	adds	r3, #1
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003148:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800314a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800314c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003150:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003152:	e002      	b.n	800315a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003154:	4b05      	ldr	r3, [pc, #20]	; (800316c <HAL_RCC_GetSysClockFreq+0x204>)
 8003156:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003158:	bf00      	nop
    }
  }
  return sysclockfreq;
 800315a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800315c:	4618      	mov	r0, r3
 800315e:	3750      	adds	r7, #80	; 0x50
 8003160:	46bd      	mov	sp, r7
 8003162:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003166:	bf00      	nop
 8003168:	40023800 	.word	0x40023800
 800316c:	00f42400 	.word	0x00f42400
 8003170:	007a1200 	.word	0x007a1200

08003174 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003178:	4b03      	ldr	r3, [pc, #12]	; (8003188 <HAL_RCC_GetHCLKFreq+0x14>)
 800317a:	681b      	ldr	r3, [r3, #0]
}
 800317c:	4618      	mov	r0, r3
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	2000002c 	.word	0x2000002c

0800318c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003190:	f7ff fff0 	bl	8003174 <HAL_RCC_GetHCLKFreq>
 8003194:	4602      	mov	r2, r0
 8003196:	4b05      	ldr	r3, [pc, #20]	; (80031ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	0a9b      	lsrs	r3, r3, #10
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	4903      	ldr	r1, [pc, #12]	; (80031b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031a2:	5ccb      	ldrb	r3, [r1, r3]
 80031a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40023800 	.word	0x40023800
 80031b0:	080059e0 	.word	0x080059e0

080031b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031b8:	f7ff ffdc 	bl	8003174 <HAL_RCC_GetHCLKFreq>
 80031bc:	4602      	mov	r2, r0
 80031be:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	0b5b      	lsrs	r3, r3, #13
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	4903      	ldr	r1, [pc, #12]	; (80031d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ca:	5ccb      	ldrb	r3, [r1, r3]
 80031cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40023800 	.word	0x40023800
 80031d8:	080059e0 	.word	0x080059e0

080031dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e041      	b.n	8003272 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d106      	bne.n	8003208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7fd ffbc 	bl	8001180 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3304      	adds	r3, #4
 8003218:	4619      	mov	r1, r3
 800321a:	4610      	mov	r0, r2
 800321c:	f000 fafe 	bl	800381c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
	...

0800327c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b01      	cmp	r3, #1
 800328e:	d001      	beq.n	8003294 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e046      	b.n	8003322 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a23      	ldr	r2, [pc, #140]	; (8003330 <HAL_TIM_Base_Start+0xb4>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d022      	beq.n	80032ec <HAL_TIM_Base_Start+0x70>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ae:	d01d      	beq.n	80032ec <HAL_TIM_Base_Start+0x70>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a1f      	ldr	r2, [pc, #124]	; (8003334 <HAL_TIM_Base_Start+0xb8>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d018      	beq.n	80032ec <HAL_TIM_Base_Start+0x70>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a1e      	ldr	r2, [pc, #120]	; (8003338 <HAL_TIM_Base_Start+0xbc>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d013      	beq.n	80032ec <HAL_TIM_Base_Start+0x70>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a1c      	ldr	r2, [pc, #112]	; (800333c <HAL_TIM_Base_Start+0xc0>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d00e      	beq.n	80032ec <HAL_TIM_Base_Start+0x70>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a1b      	ldr	r2, [pc, #108]	; (8003340 <HAL_TIM_Base_Start+0xc4>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d009      	beq.n	80032ec <HAL_TIM_Base_Start+0x70>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a19      	ldr	r2, [pc, #100]	; (8003344 <HAL_TIM_Base_Start+0xc8>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d004      	beq.n	80032ec <HAL_TIM_Base_Start+0x70>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a18      	ldr	r2, [pc, #96]	; (8003348 <HAL_TIM_Base_Start+0xcc>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d111      	bne.n	8003310 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2b06      	cmp	r3, #6
 80032fc:	d010      	beq.n	8003320 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f042 0201 	orr.w	r2, r2, #1
 800330c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800330e:	e007      	b.n	8003320 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40010000 	.word	0x40010000
 8003334:	40000400 	.word	0x40000400
 8003338:	40000800 	.word	0x40000800
 800333c:	40000c00 	.word	0x40000c00
 8003340:	40010400 	.word	0x40010400
 8003344:	40014000 	.word	0x40014000
 8003348:	40001800 	.word	0x40001800

0800334c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b01      	cmp	r3, #1
 800335e:	d001      	beq.n	8003364 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e04e      	b.n	8003402 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0201 	orr.w	r2, r2, #1
 800337a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a23      	ldr	r2, [pc, #140]	; (8003410 <HAL_TIM_Base_Start_IT+0xc4>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d022      	beq.n	80033cc <HAL_TIM_Base_Start_IT+0x80>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800338e:	d01d      	beq.n	80033cc <HAL_TIM_Base_Start_IT+0x80>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a1f      	ldr	r2, [pc, #124]	; (8003414 <HAL_TIM_Base_Start_IT+0xc8>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d018      	beq.n	80033cc <HAL_TIM_Base_Start_IT+0x80>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a1e      	ldr	r2, [pc, #120]	; (8003418 <HAL_TIM_Base_Start_IT+0xcc>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d013      	beq.n	80033cc <HAL_TIM_Base_Start_IT+0x80>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a1c      	ldr	r2, [pc, #112]	; (800341c <HAL_TIM_Base_Start_IT+0xd0>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d00e      	beq.n	80033cc <HAL_TIM_Base_Start_IT+0x80>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a1b      	ldr	r2, [pc, #108]	; (8003420 <HAL_TIM_Base_Start_IT+0xd4>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d009      	beq.n	80033cc <HAL_TIM_Base_Start_IT+0x80>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a19      	ldr	r2, [pc, #100]	; (8003424 <HAL_TIM_Base_Start_IT+0xd8>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d004      	beq.n	80033cc <HAL_TIM_Base_Start_IT+0x80>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a18      	ldr	r2, [pc, #96]	; (8003428 <HAL_TIM_Base_Start_IT+0xdc>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d111      	bne.n	80033f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 0307 	and.w	r3, r3, #7
 80033d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2b06      	cmp	r3, #6
 80033dc:	d010      	beq.n	8003400 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f042 0201 	orr.w	r2, r2, #1
 80033ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ee:	e007      	b.n	8003400 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0201 	orr.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40010000 	.word	0x40010000
 8003414:	40000400 	.word	0x40000400
 8003418:	40000800 	.word	0x40000800
 800341c:	40000c00 	.word	0x40000c00
 8003420:	40010400 	.word	0x40010400
 8003424:	40014000 	.word	0x40014000
 8003428:	40001800 	.word	0x40001800

0800342c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b02      	cmp	r3, #2
 8003440:	d122      	bne.n	8003488 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b02      	cmp	r3, #2
 800344e:	d11b      	bne.n	8003488 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f06f 0202 	mvn.w	r2, #2
 8003458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f9b5 	bl	80037de <HAL_TIM_IC_CaptureCallback>
 8003474:	e005      	b.n	8003482 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f9a7 	bl	80037ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f9b8 	bl	80037f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	f003 0304 	and.w	r3, r3, #4
 8003492:	2b04      	cmp	r3, #4
 8003494:	d122      	bne.n	80034dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b04      	cmp	r3, #4
 80034a2:	d11b      	bne.n	80034dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f06f 0204 	mvn.w	r2, #4
 80034ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2202      	movs	r2, #2
 80034b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f98b 	bl	80037de <HAL_TIM_IC_CaptureCallback>
 80034c8:	e005      	b.n	80034d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f97d 	bl	80037ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f98e 	bl	80037f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d122      	bne.n	8003530 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f003 0308 	and.w	r3, r3, #8
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d11b      	bne.n	8003530 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f06f 0208 	mvn.w	r2, #8
 8003500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2204      	movs	r2, #4
 8003506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f961 	bl	80037de <HAL_TIM_IC_CaptureCallback>
 800351c:	e005      	b.n	800352a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f953 	bl	80037ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 f964 	bl	80037f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	f003 0310 	and.w	r3, r3, #16
 800353a:	2b10      	cmp	r3, #16
 800353c:	d122      	bne.n	8003584 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f003 0310 	and.w	r3, r3, #16
 8003548:	2b10      	cmp	r3, #16
 800354a:	d11b      	bne.n	8003584 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f06f 0210 	mvn.w	r2, #16
 8003554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2208      	movs	r2, #8
 800355a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f937 	bl	80037de <HAL_TIM_IC_CaptureCallback>
 8003570:	e005      	b.n	800357e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f929 	bl	80037ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f93a 	bl	80037f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b01      	cmp	r3, #1
 8003590:	d10e      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b01      	cmp	r3, #1
 800359e:	d107      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f06f 0201 	mvn.w	r2, #1
 80035a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7fc ffde 	bl	800056c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ba:	2b80      	cmp	r3, #128	; 0x80
 80035bc:	d10e      	bne.n	80035dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c8:	2b80      	cmp	r3, #128	; 0x80
 80035ca:	d107      	bne.n	80035dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 fae0 	bl	8003b9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e6:	2b40      	cmp	r3, #64	; 0x40
 80035e8:	d10e      	bne.n	8003608 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f4:	2b40      	cmp	r3, #64	; 0x40
 80035f6:	d107      	bne.n	8003608 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f8ff 	bl	8003806 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	2b20      	cmp	r3, #32
 8003614:	d10e      	bne.n	8003634 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f003 0320 	and.w	r3, r3, #32
 8003620:	2b20      	cmp	r3, #32
 8003622:	d107      	bne.n	8003634 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f06f 0220 	mvn.w	r2, #32
 800362c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 faaa 	bl	8003b88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003634:	bf00      	nop
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003646:	2300      	movs	r3, #0
 8003648:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003650:	2b01      	cmp	r3, #1
 8003652:	d101      	bne.n	8003658 <HAL_TIM_ConfigClockSource+0x1c>
 8003654:	2302      	movs	r3, #2
 8003656:	e0b4      	b.n	80037c2 <HAL_TIM_ConfigClockSource+0x186>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003676:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800367e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003690:	d03e      	beq.n	8003710 <HAL_TIM_ConfigClockSource+0xd4>
 8003692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003696:	f200 8087 	bhi.w	80037a8 <HAL_TIM_ConfigClockSource+0x16c>
 800369a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800369e:	f000 8086 	beq.w	80037ae <HAL_TIM_ConfigClockSource+0x172>
 80036a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a6:	d87f      	bhi.n	80037a8 <HAL_TIM_ConfigClockSource+0x16c>
 80036a8:	2b70      	cmp	r3, #112	; 0x70
 80036aa:	d01a      	beq.n	80036e2 <HAL_TIM_ConfigClockSource+0xa6>
 80036ac:	2b70      	cmp	r3, #112	; 0x70
 80036ae:	d87b      	bhi.n	80037a8 <HAL_TIM_ConfigClockSource+0x16c>
 80036b0:	2b60      	cmp	r3, #96	; 0x60
 80036b2:	d050      	beq.n	8003756 <HAL_TIM_ConfigClockSource+0x11a>
 80036b4:	2b60      	cmp	r3, #96	; 0x60
 80036b6:	d877      	bhi.n	80037a8 <HAL_TIM_ConfigClockSource+0x16c>
 80036b8:	2b50      	cmp	r3, #80	; 0x50
 80036ba:	d03c      	beq.n	8003736 <HAL_TIM_ConfigClockSource+0xfa>
 80036bc:	2b50      	cmp	r3, #80	; 0x50
 80036be:	d873      	bhi.n	80037a8 <HAL_TIM_ConfigClockSource+0x16c>
 80036c0:	2b40      	cmp	r3, #64	; 0x40
 80036c2:	d058      	beq.n	8003776 <HAL_TIM_ConfigClockSource+0x13a>
 80036c4:	2b40      	cmp	r3, #64	; 0x40
 80036c6:	d86f      	bhi.n	80037a8 <HAL_TIM_ConfigClockSource+0x16c>
 80036c8:	2b30      	cmp	r3, #48	; 0x30
 80036ca:	d064      	beq.n	8003796 <HAL_TIM_ConfigClockSource+0x15a>
 80036cc:	2b30      	cmp	r3, #48	; 0x30
 80036ce:	d86b      	bhi.n	80037a8 <HAL_TIM_ConfigClockSource+0x16c>
 80036d0:	2b20      	cmp	r3, #32
 80036d2:	d060      	beq.n	8003796 <HAL_TIM_ConfigClockSource+0x15a>
 80036d4:	2b20      	cmp	r3, #32
 80036d6:	d867      	bhi.n	80037a8 <HAL_TIM_ConfigClockSource+0x16c>
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d05c      	beq.n	8003796 <HAL_TIM_ConfigClockSource+0x15a>
 80036dc:	2b10      	cmp	r3, #16
 80036de:	d05a      	beq.n	8003796 <HAL_TIM_ConfigClockSource+0x15a>
 80036e0:	e062      	b.n	80037a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6818      	ldr	r0, [r3, #0]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	6899      	ldr	r1, [r3, #8]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f000 f9ad 	bl	8003a50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003704:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	609a      	str	r2, [r3, #8]
      break;
 800370e:	e04f      	b.n	80037b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6818      	ldr	r0, [r3, #0]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	6899      	ldr	r1, [r3, #8]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f000 f996 	bl	8003a50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689a      	ldr	r2, [r3, #8]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003732:	609a      	str	r2, [r3, #8]
      break;
 8003734:	e03c      	b.n	80037b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6818      	ldr	r0, [r3, #0]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	6859      	ldr	r1, [r3, #4]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	461a      	mov	r2, r3
 8003744:	f000 f90a 	bl	800395c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2150      	movs	r1, #80	; 0x50
 800374e:	4618      	mov	r0, r3
 8003750:	f000 f963 	bl	8003a1a <TIM_ITRx_SetConfig>
      break;
 8003754:	e02c      	b.n	80037b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6818      	ldr	r0, [r3, #0]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	6859      	ldr	r1, [r3, #4]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	461a      	mov	r2, r3
 8003764:	f000 f929 	bl	80039ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2160      	movs	r1, #96	; 0x60
 800376e:	4618      	mov	r0, r3
 8003770:	f000 f953 	bl	8003a1a <TIM_ITRx_SetConfig>
      break;
 8003774:	e01c      	b.n	80037b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6818      	ldr	r0, [r3, #0]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	6859      	ldr	r1, [r3, #4]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	461a      	mov	r2, r3
 8003784:	f000 f8ea 	bl	800395c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2140      	movs	r1, #64	; 0x40
 800378e:	4618      	mov	r0, r3
 8003790:	f000 f943 	bl	8003a1a <TIM_ITRx_SetConfig>
      break;
 8003794:	e00c      	b.n	80037b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4619      	mov	r1, r3
 80037a0:	4610      	mov	r0, r2
 80037a2:	f000 f93a 	bl	8003a1a <TIM_ITRx_SetConfig>
      break;
 80037a6:	e003      	b.n	80037b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	73fb      	strb	r3, [r7, #15]
      break;
 80037ac:	e000      	b.n	80037b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80037ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
	...

0800381c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a40      	ldr	r2, [pc, #256]	; (8003930 <TIM_Base_SetConfig+0x114>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d013      	beq.n	800385c <TIM_Base_SetConfig+0x40>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800383a:	d00f      	beq.n	800385c <TIM_Base_SetConfig+0x40>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a3d      	ldr	r2, [pc, #244]	; (8003934 <TIM_Base_SetConfig+0x118>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d00b      	beq.n	800385c <TIM_Base_SetConfig+0x40>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a3c      	ldr	r2, [pc, #240]	; (8003938 <TIM_Base_SetConfig+0x11c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d007      	beq.n	800385c <TIM_Base_SetConfig+0x40>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a3b      	ldr	r2, [pc, #236]	; (800393c <TIM_Base_SetConfig+0x120>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d003      	beq.n	800385c <TIM_Base_SetConfig+0x40>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a3a      	ldr	r2, [pc, #232]	; (8003940 <TIM_Base_SetConfig+0x124>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d108      	bne.n	800386e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003862:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a2f      	ldr	r2, [pc, #188]	; (8003930 <TIM_Base_SetConfig+0x114>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d02b      	beq.n	80038ce <TIM_Base_SetConfig+0xb2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800387c:	d027      	beq.n	80038ce <TIM_Base_SetConfig+0xb2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a2c      	ldr	r2, [pc, #176]	; (8003934 <TIM_Base_SetConfig+0x118>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d023      	beq.n	80038ce <TIM_Base_SetConfig+0xb2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a2b      	ldr	r2, [pc, #172]	; (8003938 <TIM_Base_SetConfig+0x11c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d01f      	beq.n	80038ce <TIM_Base_SetConfig+0xb2>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a2a      	ldr	r2, [pc, #168]	; (800393c <TIM_Base_SetConfig+0x120>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d01b      	beq.n	80038ce <TIM_Base_SetConfig+0xb2>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a29      	ldr	r2, [pc, #164]	; (8003940 <TIM_Base_SetConfig+0x124>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d017      	beq.n	80038ce <TIM_Base_SetConfig+0xb2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a28      	ldr	r2, [pc, #160]	; (8003944 <TIM_Base_SetConfig+0x128>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d013      	beq.n	80038ce <TIM_Base_SetConfig+0xb2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a27      	ldr	r2, [pc, #156]	; (8003948 <TIM_Base_SetConfig+0x12c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d00f      	beq.n	80038ce <TIM_Base_SetConfig+0xb2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a26      	ldr	r2, [pc, #152]	; (800394c <TIM_Base_SetConfig+0x130>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d00b      	beq.n	80038ce <TIM_Base_SetConfig+0xb2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a25      	ldr	r2, [pc, #148]	; (8003950 <TIM_Base_SetConfig+0x134>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d007      	beq.n	80038ce <TIM_Base_SetConfig+0xb2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a24      	ldr	r2, [pc, #144]	; (8003954 <TIM_Base_SetConfig+0x138>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d003      	beq.n	80038ce <TIM_Base_SetConfig+0xb2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a23      	ldr	r2, [pc, #140]	; (8003958 <TIM_Base_SetConfig+0x13c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d108      	bne.n	80038e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	4313      	orrs	r3, r2
 80038de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a0a      	ldr	r2, [pc, #40]	; (8003930 <TIM_Base_SetConfig+0x114>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d003      	beq.n	8003914 <TIM_Base_SetConfig+0xf8>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a0c      	ldr	r2, [pc, #48]	; (8003940 <TIM_Base_SetConfig+0x124>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d103      	bne.n	800391c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	691a      	ldr	r2, [r3, #16]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	615a      	str	r2, [r3, #20]
}
 8003922:	bf00      	nop
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	40010000 	.word	0x40010000
 8003934:	40000400 	.word	0x40000400
 8003938:	40000800 	.word	0x40000800
 800393c:	40000c00 	.word	0x40000c00
 8003940:	40010400 	.word	0x40010400
 8003944:	40014000 	.word	0x40014000
 8003948:	40014400 	.word	0x40014400
 800394c:	40014800 	.word	0x40014800
 8003950:	40001800 	.word	0x40001800
 8003954:	40001c00 	.word	0x40001c00
 8003958:	40002000 	.word	0x40002000

0800395c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	f023 0201 	bic.w	r2, r3, #1
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003986:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	4313      	orrs	r3, r2
 8003990:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f023 030a 	bic.w	r3, r3, #10
 8003998:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	4313      	orrs	r3, r2
 80039a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	621a      	str	r2, [r3, #32]
}
 80039ae:	bf00      	nop
 80039b0:	371c      	adds	r7, #28
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b087      	sub	sp, #28
 80039be:	af00      	add	r7, sp, #0
 80039c0:	60f8      	str	r0, [r7, #12]
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	f023 0210 	bic.w	r2, r3, #16
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	031b      	lsls	r3, r3, #12
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	621a      	str	r2, [r3, #32]
}
 8003a0e:	bf00      	nop
 8003a10:	371c      	adds	r7, #28
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b085      	sub	sp, #20
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f043 0307 	orr.w	r3, r3, #7
 8003a3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	609a      	str	r2, [r3, #8]
}
 8003a44:	bf00      	nop
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	021a      	lsls	r2, r3, #8
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	431a      	orrs	r2, r3
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	609a      	str	r2, [r3, #8]
}
 8003a84:	bf00      	nop
 8003a86:	371c      	adds	r7, #28
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e05a      	b.n	8003b5e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ace:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a21      	ldr	r2, [pc, #132]	; (8003b6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d022      	beq.n	8003b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af4:	d01d      	beq.n	8003b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a1d      	ldr	r2, [pc, #116]	; (8003b70 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d018      	beq.n	8003b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a1b      	ldr	r2, [pc, #108]	; (8003b74 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d013      	beq.n	8003b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a1a      	ldr	r2, [pc, #104]	; (8003b78 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d00e      	beq.n	8003b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a18      	ldr	r2, [pc, #96]	; (8003b7c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d009      	beq.n	8003b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a17      	ldr	r2, [pc, #92]	; (8003b80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d004      	beq.n	8003b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a15      	ldr	r2, [pc, #84]	; (8003b84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d10c      	bne.n	8003b4c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3714      	adds	r7, #20
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	40010000 	.word	0x40010000
 8003b70:	40000400 	.word	0x40000400
 8003b74:	40000800 	.word	0x40000800
 8003b78:	40000c00 	.word	0x40000c00
 8003b7c:	40010400 	.word	0x40010400
 8003b80:	40014000 	.word	0x40014000
 8003b84:	40001800 	.word	0x40001800

08003b88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e03f      	b.n	8003c42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d106      	bne.n	8003bdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7fd fb0e 	bl	80011f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2224      	movs	r2, #36	; 0x24
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 fddf 	bl	80047b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695a      	ldr	r2, [r3, #20]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b08a      	sub	sp, #40	; 0x28
 8003c4e:	af02      	add	r7, sp, #8
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	603b      	str	r3, [r7, #0]
 8003c56:	4613      	mov	r3, r2
 8003c58:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	d17c      	bne.n	8003d64 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <HAL_UART_Transmit+0x2c>
 8003c70:	88fb      	ldrh	r3, [r7, #6]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e075      	b.n	8003d66 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_UART_Transmit+0x3e>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e06e      	b.n	8003d66 <HAL_UART_Transmit+0x11c>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2221      	movs	r2, #33	; 0x21
 8003c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c9e:	f7fd fc23 	bl	80014e8 <HAL_GetTick>
 8003ca2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	88fa      	ldrh	r2, [r7, #6]
 8003ca8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	88fa      	ldrh	r2, [r7, #6]
 8003cae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb8:	d108      	bne.n	8003ccc <HAL_UART_Transmit+0x82>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d104      	bne.n	8003ccc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	61bb      	str	r3, [r7, #24]
 8003cca:	e003      	b.n	8003cd4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003cdc:	e02a      	b.n	8003d34 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2180      	movs	r1, #128	; 0x80
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 fb1f 	bl	800432c <UART_WaitOnFlagUntilTimeout>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e036      	b.n	8003d66 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10b      	bne.n	8003d16 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	3302      	adds	r3, #2
 8003d12:	61bb      	str	r3, [r7, #24]
 8003d14:	e007      	b.n	8003d26 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	781a      	ldrb	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	3301      	adds	r3, #1
 8003d24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1cf      	bne.n	8003cde <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2200      	movs	r2, #0
 8003d46:	2140      	movs	r1, #64	; 0x40
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f000 faef 	bl	800432c <UART_WaitOnFlagUntilTimeout>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e006      	b.n	8003d66 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	e000      	b.n	8003d66 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d64:	2302      	movs	r3, #2
  }
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3720      	adds	r7, #32
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b084      	sub	sp, #16
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b20      	cmp	r3, #32
 8003d86:	d11d      	bne.n	8003dc4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <HAL_UART_Receive_IT+0x26>
 8003d8e:	88fb      	ldrh	r3, [r7, #6]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e016      	b.n	8003dc6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d101      	bne.n	8003da6 <HAL_UART_Receive_IT+0x38>
 8003da2:	2302      	movs	r3, #2
 8003da4:	e00f      	b.n	8003dc6 <HAL_UART_Receive_IT+0x58>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003db4:	88fb      	ldrh	r3, [r7, #6]
 8003db6:	461a      	mov	r2, r3
 8003db8:	68b9      	ldr	r1, [r7, #8]
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 fb24 	bl	8004408 <UART_Start_Receive_IT>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	e000      	b.n	8003dc6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003dc4:	2302      	movs	r3, #2
  }
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b0ba      	sub	sp, #232	; 0xe8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003e0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10f      	bne.n	8003e36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e1a:	f003 0320 	and.w	r3, r3, #32
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d009      	beq.n	8003e36 <HAL_UART_IRQHandler+0x66>
 8003e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e26:	f003 0320 	and.w	r3, r3, #32
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 fc07 	bl	8004642 <UART_Receive_IT>
      return;
 8003e34:	e256      	b.n	80042e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 80de 	beq.w	8003ffc <HAL_UART_IRQHandler+0x22c>
 8003e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d106      	bne.n	8003e5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e50:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 80d1 	beq.w	8003ffc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00b      	beq.n	8003e7e <HAL_UART_IRQHandler+0xae>
 8003e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d005      	beq.n	8003e7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	f043 0201 	orr.w	r2, r3, #1
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e82:	f003 0304 	and.w	r3, r3, #4
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00b      	beq.n	8003ea2 <HAL_UART_IRQHandler+0xd2>
 8003e8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d005      	beq.n	8003ea2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	f043 0202 	orr.w	r2, r3, #2
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00b      	beq.n	8003ec6 <HAL_UART_IRQHandler+0xf6>
 8003eae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d005      	beq.n	8003ec6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	f043 0204 	orr.w	r2, r3, #4
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eca:	f003 0308 	and.w	r3, r3, #8
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d011      	beq.n	8003ef6 <HAL_UART_IRQHandler+0x126>
 8003ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ed6:	f003 0320 	and.w	r3, r3, #32
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d105      	bne.n	8003eea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d005      	beq.n	8003ef6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	f043 0208 	orr.w	r2, r3, #8
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 81ed 	beq.w	80042da <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f04:	f003 0320 	and.w	r3, r3, #32
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d008      	beq.n	8003f1e <HAL_UART_IRQHandler+0x14e>
 8003f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f10:	f003 0320 	and.w	r3, r3, #32
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d002      	beq.n	8003f1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 fb92 	bl	8004642 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f28:	2b40      	cmp	r3, #64	; 0x40
 8003f2a:	bf0c      	ite	eq
 8003f2c:	2301      	moveq	r3, #1
 8003f2e:	2300      	movne	r3, #0
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d103      	bne.n	8003f4a <HAL_UART_IRQHandler+0x17a>
 8003f42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d04f      	beq.n	8003fea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 fa9a 	bl	8004484 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5a:	2b40      	cmp	r3, #64	; 0x40
 8003f5c:	d141      	bne.n	8003fe2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3314      	adds	r3, #20
 8003f64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f6c:	e853 3f00 	ldrex	r3, [r3]
 8003f70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3314      	adds	r3, #20
 8003f86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f9a:	e841 2300 	strex	r3, r2, [r1]
 8003f9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003fa2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1d9      	bne.n	8003f5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d013      	beq.n	8003fda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb6:	4a7d      	ldr	r2, [pc, #500]	; (80041ac <HAL_UART_IRQHandler+0x3dc>)
 8003fb8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fe fa81 	bl	80024c6 <HAL_DMA_Abort_IT>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d016      	beq.n	8003ff8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fd4:	4610      	mov	r0, r2
 8003fd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd8:	e00e      	b.n	8003ff8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f990 	bl	8004300 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe0:	e00a      	b.n	8003ff8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f98c 	bl	8004300 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe8:	e006      	b.n	8003ff8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f988 	bl	8004300 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003ff6:	e170      	b.n	80042da <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff8:	bf00      	nop
    return;
 8003ffa:	e16e      	b.n	80042da <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004000:	2b01      	cmp	r3, #1
 8004002:	f040 814a 	bne.w	800429a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800400a:	f003 0310 	and.w	r3, r3, #16
 800400e:	2b00      	cmp	r3, #0
 8004010:	f000 8143 	beq.w	800429a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004018:	f003 0310 	and.w	r3, r3, #16
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 813c 	beq.w	800429a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004022:	2300      	movs	r3, #0
 8004024:	60bb      	str	r3, [r7, #8]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	60bb      	str	r3, [r7, #8]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	60bb      	str	r3, [r7, #8]
 8004036:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004042:	2b40      	cmp	r3, #64	; 0x40
 8004044:	f040 80b4 	bne.w	80041b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004054:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 8140 	beq.w	80042de <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004062:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004066:	429a      	cmp	r2, r3
 8004068:	f080 8139 	bcs.w	80042de <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004072:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800407e:	f000 8088 	beq.w	8004192 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	330c      	adds	r3, #12
 8004088:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004098:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800409c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	330c      	adds	r3, #12
 80040aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80040ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80040ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80040be:	e841 2300 	strex	r3, r2, [r1]
 80040c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80040c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1d9      	bne.n	8004082 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	3314      	adds	r3, #20
 80040d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040d8:	e853 3f00 	ldrex	r3, [r3]
 80040dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80040de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040e0:	f023 0301 	bic.w	r3, r3, #1
 80040e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	3314      	adds	r3, #20
 80040ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80040f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80040fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80040fe:	e841 2300 	strex	r3, r2, [r1]
 8004102:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004104:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1e1      	bne.n	80040ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	3314      	adds	r3, #20
 8004110:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004112:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004114:	e853 3f00 	ldrex	r3, [r3]
 8004118:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800411a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800411c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004120:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	3314      	adds	r3, #20
 800412a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800412e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004130:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004132:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004134:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004136:	e841 2300 	strex	r3, r2, [r1]
 800413a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800413c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1e3      	bne.n	800410a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2220      	movs	r2, #32
 8004146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	330c      	adds	r3, #12
 8004156:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800415a:	e853 3f00 	ldrex	r3, [r3]
 800415e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004162:	f023 0310 	bic.w	r3, r3, #16
 8004166:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	330c      	adds	r3, #12
 8004170:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004174:	65ba      	str	r2, [r7, #88]	; 0x58
 8004176:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004178:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800417a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800417c:	e841 2300 	strex	r3, r2, [r1]
 8004180:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1e3      	bne.n	8004150 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418c:	4618      	mov	r0, r3
 800418e:	f7fe f92a 	bl	80023e6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800419a:	b29b      	uxth	r3, r3
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	b29b      	uxth	r3, r3
 80041a0:	4619      	mov	r1, r3
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f8b6 	bl	8004314 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041a8:	e099      	b.n	80042de <HAL_UART_IRQHandler+0x50e>
 80041aa:	bf00      	nop
 80041ac:	0800454b 	.word	0x0800454b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f000 808b 	beq.w	80042e2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80041cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 8086 	beq.w	80042e2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	330c      	adds	r3, #12
 80041dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e0:	e853 3f00 	ldrex	r3, [r3]
 80041e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	330c      	adds	r3, #12
 80041f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80041fa:	647a      	str	r2, [r7, #68]	; 0x44
 80041fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004200:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004202:	e841 2300 	strex	r3, r2, [r1]
 8004206:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1e3      	bne.n	80041d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	3314      	adds	r3, #20
 8004214:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	e853 3f00 	ldrex	r3, [r3]
 800421c:	623b      	str	r3, [r7, #32]
   return(result);
 800421e:	6a3b      	ldr	r3, [r7, #32]
 8004220:	f023 0301 	bic.w	r3, r3, #1
 8004224:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3314      	adds	r3, #20
 800422e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004232:	633a      	str	r2, [r7, #48]	; 0x30
 8004234:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004236:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800423a:	e841 2300 	strex	r3, r2, [r1]
 800423e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1e3      	bne.n	800420e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	330c      	adds	r3, #12
 800425a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	e853 3f00 	ldrex	r3, [r3]
 8004262:	60fb      	str	r3, [r7, #12]
   return(result);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f023 0310 	bic.w	r3, r3, #16
 800426a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	330c      	adds	r3, #12
 8004274:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004278:	61fa      	str	r2, [r7, #28]
 800427a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427c:	69b9      	ldr	r1, [r7, #24]
 800427e:	69fa      	ldr	r2, [r7, #28]
 8004280:	e841 2300 	strex	r3, r2, [r1]
 8004284:	617b      	str	r3, [r7, #20]
   return(result);
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1e3      	bne.n	8004254 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800428c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004290:	4619      	mov	r1, r3
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f83e 	bl	8004314 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004298:	e023      	b.n	80042e2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800429a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800429e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d009      	beq.n	80042ba <HAL_UART_IRQHandler+0x4ea>
 80042a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f95d 	bl	8004572 <UART_Transmit_IT>
    return;
 80042b8:	e014      	b.n	80042e4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80042ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00e      	beq.n	80042e4 <HAL_UART_IRQHandler+0x514>
 80042c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d008      	beq.n	80042e4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f99d 	bl	8004612 <UART_EndTransmit_IT>
    return;
 80042d8:	e004      	b.n	80042e4 <HAL_UART_IRQHandler+0x514>
    return;
 80042da:	bf00      	nop
 80042dc:	e002      	b.n	80042e4 <HAL_UART_IRQHandler+0x514>
      return;
 80042de:	bf00      	nop
 80042e0:	e000      	b.n	80042e4 <HAL_UART_IRQHandler+0x514>
      return;
 80042e2:	bf00      	nop
  }
}
 80042e4:	37e8      	adds	r7, #232	; 0xe8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop

080042ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	460b      	mov	r3, r1
 800431e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b090      	sub	sp, #64	; 0x40
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	603b      	str	r3, [r7, #0]
 8004338:	4613      	mov	r3, r2
 800433a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800433c:	e050      	b.n	80043e0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800433e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004344:	d04c      	beq.n	80043e0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004348:	2b00      	cmp	r3, #0
 800434a:	d007      	beq.n	800435c <UART_WaitOnFlagUntilTimeout+0x30>
 800434c:	f7fd f8cc 	bl	80014e8 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004358:	429a      	cmp	r2, r3
 800435a:	d241      	bcs.n	80043e0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	330c      	adds	r3, #12
 8004362:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004366:	e853 3f00 	ldrex	r3, [r3]
 800436a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004372:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	330c      	adds	r3, #12
 800437a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800437c:	637a      	str	r2, [r7, #52]	; 0x34
 800437e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004380:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004384:	e841 2300 	strex	r3, r2, [r1]
 8004388:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800438a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1e5      	bne.n	800435c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3314      	adds	r3, #20
 8004396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	e853 3f00 	ldrex	r3, [r3]
 800439e:	613b      	str	r3, [r7, #16]
   return(result);
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f023 0301 	bic.w	r3, r3, #1
 80043a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3314      	adds	r3, #20
 80043ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043b0:	623a      	str	r2, [r7, #32]
 80043b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b4:	69f9      	ldr	r1, [r7, #28]
 80043b6:	6a3a      	ldr	r2, [r7, #32]
 80043b8:	e841 2300 	strex	r3, r2, [r1]
 80043bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1e5      	bne.n	8004390 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e00f      	b.n	8004400 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	4013      	ands	r3, r2
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	bf0c      	ite	eq
 80043f0:	2301      	moveq	r3, #1
 80043f2:	2300      	movne	r3, #0
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	461a      	mov	r2, r3
 80043f8:	79fb      	ldrb	r3, [r7, #7]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d09f      	beq.n	800433e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3740      	adds	r7, #64	; 0x40
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	4613      	mov	r3, r2
 8004414:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	88fa      	ldrh	r2, [r7, #6]
 8004420:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	88fa      	ldrh	r2, [r7, #6]
 8004426:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2222      	movs	r2, #34	; 0x22
 8004432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d007      	beq.n	8004456 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68da      	ldr	r2, [r3, #12]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004454:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	695a      	ldr	r2, [r3, #20]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f042 0201 	orr.w	r2, r2, #1
 8004464:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68da      	ldr	r2, [r3, #12]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f042 0220 	orr.w	r2, r2, #32
 8004474:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004484:	b480      	push	{r7}
 8004486:	b095      	sub	sp, #84	; 0x54
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	330c      	adds	r3, #12
 8004492:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004496:	e853 3f00 	ldrex	r3, [r3]
 800449a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800449c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	330c      	adds	r3, #12
 80044aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044ac:	643a      	str	r2, [r7, #64]	; 0x40
 80044ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044b4:	e841 2300 	strex	r3, r2, [r1]
 80044b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1e5      	bne.n	800448c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	3314      	adds	r3, #20
 80044c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	e853 3f00 	ldrex	r3, [r3]
 80044ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f023 0301 	bic.w	r3, r3, #1
 80044d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3314      	adds	r3, #20
 80044de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044e8:	e841 2300 	strex	r3, r2, [r1]
 80044ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1e5      	bne.n	80044c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d119      	bne.n	8004530 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	330c      	adds	r3, #12
 8004502:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	e853 3f00 	ldrex	r3, [r3]
 800450a:	60bb      	str	r3, [r7, #8]
   return(result);
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f023 0310 	bic.w	r3, r3, #16
 8004512:	647b      	str	r3, [r7, #68]	; 0x44
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	330c      	adds	r3, #12
 800451a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800451c:	61ba      	str	r2, [r7, #24]
 800451e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004520:	6979      	ldr	r1, [r7, #20]
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	e841 2300 	strex	r3, r2, [r1]
 8004528:	613b      	str	r3, [r7, #16]
   return(result);
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1e5      	bne.n	80044fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800453e:	bf00      	nop
 8004540:	3754      	adds	r7, #84	; 0x54
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b084      	sub	sp, #16
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004556:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f7ff fecb 	bl	8004300 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800456a:	bf00      	nop
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004572:	b480      	push	{r7}
 8004574:	b085      	sub	sp, #20
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b21      	cmp	r3, #33	; 0x21
 8004584:	d13e      	bne.n	8004604 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800458e:	d114      	bne.n	80045ba <UART_Transmit_IT+0x48>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d110      	bne.n	80045ba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	881b      	ldrh	r3, [r3, #0]
 80045a2:	461a      	mov	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	1c9a      	adds	r2, r3, #2
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	621a      	str	r2, [r3, #32]
 80045b8:	e008      	b.n	80045cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	1c59      	adds	r1, r3, #1
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6211      	str	r1, [r2, #32]
 80045c4:	781a      	ldrb	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	3b01      	subs	r3, #1
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	4619      	mov	r1, r3
 80045da:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10f      	bne.n	8004600 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68da      	ldr	r2, [r3, #12]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004600:	2300      	movs	r3, #0
 8004602:	e000      	b.n	8004606 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004604:	2302      	movs	r3, #2
  }
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004628:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2220      	movs	r2, #32
 800462e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7ff fe5a 	bl	80042ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b08c      	sub	sp, #48	; 0x30
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b22      	cmp	r3, #34	; 0x22
 8004654:	f040 80ab 	bne.w	80047ae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004660:	d117      	bne.n	8004692 <UART_Receive_IT+0x50>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d113      	bne.n	8004692 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800466a:	2300      	movs	r3, #0
 800466c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004672:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	b29b      	uxth	r3, r3
 800467c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004680:	b29a      	uxth	r2, r3
 8004682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004684:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468a:	1c9a      	adds	r2, r3, #2
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	629a      	str	r2, [r3, #40]	; 0x28
 8004690:	e026      	b.n	80046e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004696:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004698:	2300      	movs	r3, #0
 800469a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a4:	d007      	beq.n	80046b6 <UART_Receive_IT+0x74>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10a      	bne.n	80046c4 <UART_Receive_IT+0x82>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d106      	bne.n	80046c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c0:	701a      	strb	r2, [r3, #0]
 80046c2:	e008      	b.n	80046d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	3b01      	subs	r3, #1
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	4619      	mov	r1, r3
 80046ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d15a      	bne.n	80047aa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0220 	bic.w	r2, r2, #32
 8004702:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004712:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	695a      	ldr	r2, [r3, #20]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0201 	bic.w	r2, r2, #1
 8004722:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2220      	movs	r2, #32
 8004728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	2b01      	cmp	r3, #1
 8004732:	d135      	bne.n	80047a0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	330c      	adds	r3, #12
 8004740:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	e853 3f00 	ldrex	r3, [r3]
 8004748:	613b      	str	r3, [r7, #16]
   return(result);
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	f023 0310 	bic.w	r3, r3, #16
 8004750:	627b      	str	r3, [r7, #36]	; 0x24
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	330c      	adds	r3, #12
 8004758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800475a:	623a      	str	r2, [r7, #32]
 800475c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475e:	69f9      	ldr	r1, [r7, #28]
 8004760:	6a3a      	ldr	r2, [r7, #32]
 8004762:	e841 2300 	strex	r3, r2, [r1]
 8004766:	61bb      	str	r3, [r7, #24]
   return(result);
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1e5      	bne.n	800473a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0310 	and.w	r3, r3, #16
 8004778:	2b10      	cmp	r3, #16
 800477a:	d10a      	bne.n	8004792 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800477c:	2300      	movs	r3, #0
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004796:	4619      	mov	r1, r3
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff fdbb 	bl	8004314 <HAL_UARTEx_RxEventCallback>
 800479e:	e002      	b.n	80047a6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7fb ff13 	bl	80005cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e002      	b.n	80047b0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	e000      	b.n	80047b0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80047ae:	2302      	movs	r3, #2
  }
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3730      	adds	r7, #48	; 0x30
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047bc:	b0c0      	sub	sp, #256	; 0x100
 80047be:	af00      	add	r7, sp, #0
 80047c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d4:	68d9      	ldr	r1, [r3, #12]
 80047d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	ea40 0301 	orr.w	r3, r0, r1
 80047e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	431a      	orrs	r2, r3
 80047f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	431a      	orrs	r2, r3
 80047f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	4313      	orrs	r3, r2
 8004800:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004810:	f021 010c 	bic.w	r1, r1, #12
 8004814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800481e:	430b      	orrs	r3, r1
 8004820:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800482e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004832:	6999      	ldr	r1, [r3, #24]
 8004834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	ea40 0301 	orr.w	r3, r0, r1
 800483e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	4b8f      	ldr	r3, [pc, #572]	; (8004a84 <UART_SetConfig+0x2cc>)
 8004848:	429a      	cmp	r2, r3
 800484a:	d005      	beq.n	8004858 <UART_SetConfig+0xa0>
 800484c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	4b8d      	ldr	r3, [pc, #564]	; (8004a88 <UART_SetConfig+0x2d0>)
 8004854:	429a      	cmp	r2, r3
 8004856:	d104      	bne.n	8004862 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004858:	f7fe fcac 	bl	80031b4 <HAL_RCC_GetPCLK2Freq>
 800485c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004860:	e003      	b.n	800486a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004862:	f7fe fc93 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 8004866:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800486a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004874:	f040 810c 	bne.w	8004a90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004878:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800487c:	2200      	movs	r2, #0
 800487e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004882:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004886:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800488a:	4622      	mov	r2, r4
 800488c:	462b      	mov	r3, r5
 800488e:	1891      	adds	r1, r2, r2
 8004890:	65b9      	str	r1, [r7, #88]	; 0x58
 8004892:	415b      	adcs	r3, r3
 8004894:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004896:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800489a:	4621      	mov	r1, r4
 800489c:	eb12 0801 	adds.w	r8, r2, r1
 80048a0:	4629      	mov	r1, r5
 80048a2:	eb43 0901 	adc.w	r9, r3, r1
 80048a6:	f04f 0200 	mov.w	r2, #0
 80048aa:	f04f 0300 	mov.w	r3, #0
 80048ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048ba:	4690      	mov	r8, r2
 80048bc:	4699      	mov	r9, r3
 80048be:	4623      	mov	r3, r4
 80048c0:	eb18 0303 	adds.w	r3, r8, r3
 80048c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048c8:	462b      	mov	r3, r5
 80048ca:	eb49 0303 	adc.w	r3, r9, r3
 80048ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80048e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80048e6:	460b      	mov	r3, r1
 80048e8:	18db      	adds	r3, r3, r3
 80048ea:	653b      	str	r3, [r7, #80]	; 0x50
 80048ec:	4613      	mov	r3, r2
 80048ee:	eb42 0303 	adc.w	r3, r2, r3
 80048f2:	657b      	str	r3, [r7, #84]	; 0x54
 80048f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80048f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80048fc:	f7fb fcb8 	bl	8000270 <__aeabi_uldivmod>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4b61      	ldr	r3, [pc, #388]	; (8004a8c <UART_SetConfig+0x2d4>)
 8004906:	fba3 2302 	umull	r2, r3, r3, r2
 800490a:	095b      	lsrs	r3, r3, #5
 800490c:	011c      	lsls	r4, r3, #4
 800490e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004912:	2200      	movs	r2, #0
 8004914:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004918:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800491c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004920:	4642      	mov	r2, r8
 8004922:	464b      	mov	r3, r9
 8004924:	1891      	adds	r1, r2, r2
 8004926:	64b9      	str	r1, [r7, #72]	; 0x48
 8004928:	415b      	adcs	r3, r3
 800492a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800492c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004930:	4641      	mov	r1, r8
 8004932:	eb12 0a01 	adds.w	sl, r2, r1
 8004936:	4649      	mov	r1, r9
 8004938:	eb43 0b01 	adc.w	fp, r3, r1
 800493c:	f04f 0200 	mov.w	r2, #0
 8004940:	f04f 0300 	mov.w	r3, #0
 8004944:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004948:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800494c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004950:	4692      	mov	sl, r2
 8004952:	469b      	mov	fp, r3
 8004954:	4643      	mov	r3, r8
 8004956:	eb1a 0303 	adds.w	r3, sl, r3
 800495a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800495e:	464b      	mov	r3, r9
 8004960:	eb4b 0303 	adc.w	r3, fp, r3
 8004964:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004974:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004978:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800497c:	460b      	mov	r3, r1
 800497e:	18db      	adds	r3, r3, r3
 8004980:	643b      	str	r3, [r7, #64]	; 0x40
 8004982:	4613      	mov	r3, r2
 8004984:	eb42 0303 	adc.w	r3, r2, r3
 8004988:	647b      	str	r3, [r7, #68]	; 0x44
 800498a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800498e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004992:	f7fb fc6d 	bl	8000270 <__aeabi_uldivmod>
 8004996:	4602      	mov	r2, r0
 8004998:	460b      	mov	r3, r1
 800499a:	4611      	mov	r1, r2
 800499c:	4b3b      	ldr	r3, [pc, #236]	; (8004a8c <UART_SetConfig+0x2d4>)
 800499e:	fba3 2301 	umull	r2, r3, r3, r1
 80049a2:	095b      	lsrs	r3, r3, #5
 80049a4:	2264      	movs	r2, #100	; 0x64
 80049a6:	fb02 f303 	mul.w	r3, r2, r3
 80049aa:	1acb      	subs	r3, r1, r3
 80049ac:	00db      	lsls	r3, r3, #3
 80049ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80049b2:	4b36      	ldr	r3, [pc, #216]	; (8004a8c <UART_SetConfig+0x2d4>)
 80049b4:	fba3 2302 	umull	r2, r3, r3, r2
 80049b8:	095b      	lsrs	r3, r3, #5
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049c0:	441c      	add	r4, r3
 80049c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049c6:	2200      	movs	r2, #0
 80049c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80049d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80049d4:	4642      	mov	r2, r8
 80049d6:	464b      	mov	r3, r9
 80049d8:	1891      	adds	r1, r2, r2
 80049da:	63b9      	str	r1, [r7, #56]	; 0x38
 80049dc:	415b      	adcs	r3, r3
 80049de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049e4:	4641      	mov	r1, r8
 80049e6:	1851      	adds	r1, r2, r1
 80049e8:	6339      	str	r1, [r7, #48]	; 0x30
 80049ea:	4649      	mov	r1, r9
 80049ec:	414b      	adcs	r3, r1
 80049ee:	637b      	str	r3, [r7, #52]	; 0x34
 80049f0:	f04f 0200 	mov.w	r2, #0
 80049f4:	f04f 0300 	mov.w	r3, #0
 80049f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80049fc:	4659      	mov	r1, fp
 80049fe:	00cb      	lsls	r3, r1, #3
 8004a00:	4651      	mov	r1, sl
 8004a02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a06:	4651      	mov	r1, sl
 8004a08:	00ca      	lsls	r2, r1, #3
 8004a0a:	4610      	mov	r0, r2
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4603      	mov	r3, r0
 8004a10:	4642      	mov	r2, r8
 8004a12:	189b      	adds	r3, r3, r2
 8004a14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a18:	464b      	mov	r3, r9
 8004a1a:	460a      	mov	r2, r1
 8004a1c:	eb42 0303 	adc.w	r3, r2, r3
 8004a20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a38:	460b      	mov	r3, r1
 8004a3a:	18db      	adds	r3, r3, r3
 8004a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a3e:	4613      	mov	r3, r2
 8004a40:	eb42 0303 	adc.w	r3, r2, r3
 8004a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a4e:	f7fb fc0f 	bl	8000270 <__aeabi_uldivmod>
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	4b0d      	ldr	r3, [pc, #52]	; (8004a8c <UART_SetConfig+0x2d4>)
 8004a58:	fba3 1302 	umull	r1, r3, r3, r2
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	2164      	movs	r1, #100	; 0x64
 8004a60:	fb01 f303 	mul.w	r3, r1, r3
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	3332      	adds	r3, #50	; 0x32
 8004a6a:	4a08      	ldr	r2, [pc, #32]	; (8004a8c <UART_SetConfig+0x2d4>)
 8004a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a70:	095b      	lsrs	r3, r3, #5
 8004a72:	f003 0207 	and.w	r2, r3, #7
 8004a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4422      	add	r2, r4
 8004a7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a80:	e106      	b.n	8004c90 <UART_SetConfig+0x4d8>
 8004a82:	bf00      	nop
 8004a84:	40011000 	.word	0x40011000
 8004a88:	40011400 	.word	0x40011400
 8004a8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a94:	2200      	movs	r2, #0
 8004a96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004aa2:	4642      	mov	r2, r8
 8004aa4:	464b      	mov	r3, r9
 8004aa6:	1891      	adds	r1, r2, r2
 8004aa8:	6239      	str	r1, [r7, #32]
 8004aaa:	415b      	adcs	r3, r3
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
 8004aae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ab2:	4641      	mov	r1, r8
 8004ab4:	1854      	adds	r4, r2, r1
 8004ab6:	4649      	mov	r1, r9
 8004ab8:	eb43 0501 	adc.w	r5, r3, r1
 8004abc:	f04f 0200 	mov.w	r2, #0
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	00eb      	lsls	r3, r5, #3
 8004ac6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aca:	00e2      	lsls	r2, r4, #3
 8004acc:	4614      	mov	r4, r2
 8004ace:	461d      	mov	r5, r3
 8004ad0:	4643      	mov	r3, r8
 8004ad2:	18e3      	adds	r3, r4, r3
 8004ad4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ad8:	464b      	mov	r3, r9
 8004ada:	eb45 0303 	adc.w	r3, r5, r3
 8004ade:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004aee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004af2:	f04f 0200 	mov.w	r2, #0
 8004af6:	f04f 0300 	mov.w	r3, #0
 8004afa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004afe:	4629      	mov	r1, r5
 8004b00:	008b      	lsls	r3, r1, #2
 8004b02:	4621      	mov	r1, r4
 8004b04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b08:	4621      	mov	r1, r4
 8004b0a:	008a      	lsls	r2, r1, #2
 8004b0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b10:	f7fb fbae 	bl	8000270 <__aeabi_uldivmod>
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	4b60      	ldr	r3, [pc, #384]	; (8004c9c <UART_SetConfig+0x4e4>)
 8004b1a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b1e:	095b      	lsrs	r3, r3, #5
 8004b20:	011c      	lsls	r4, r3, #4
 8004b22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b26:	2200      	movs	r2, #0
 8004b28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b34:	4642      	mov	r2, r8
 8004b36:	464b      	mov	r3, r9
 8004b38:	1891      	adds	r1, r2, r2
 8004b3a:	61b9      	str	r1, [r7, #24]
 8004b3c:	415b      	adcs	r3, r3
 8004b3e:	61fb      	str	r3, [r7, #28]
 8004b40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b44:	4641      	mov	r1, r8
 8004b46:	1851      	adds	r1, r2, r1
 8004b48:	6139      	str	r1, [r7, #16]
 8004b4a:	4649      	mov	r1, r9
 8004b4c:	414b      	adcs	r3, r1
 8004b4e:	617b      	str	r3, [r7, #20]
 8004b50:	f04f 0200 	mov.w	r2, #0
 8004b54:	f04f 0300 	mov.w	r3, #0
 8004b58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b5c:	4659      	mov	r1, fp
 8004b5e:	00cb      	lsls	r3, r1, #3
 8004b60:	4651      	mov	r1, sl
 8004b62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b66:	4651      	mov	r1, sl
 8004b68:	00ca      	lsls	r2, r1, #3
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4603      	mov	r3, r0
 8004b70:	4642      	mov	r2, r8
 8004b72:	189b      	adds	r3, r3, r2
 8004b74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b78:	464b      	mov	r3, r9
 8004b7a:	460a      	mov	r2, r1
 8004b7c:	eb42 0303 	adc.w	r3, r2, r3
 8004b80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b9c:	4649      	mov	r1, r9
 8004b9e:	008b      	lsls	r3, r1, #2
 8004ba0:	4641      	mov	r1, r8
 8004ba2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ba6:	4641      	mov	r1, r8
 8004ba8:	008a      	lsls	r2, r1, #2
 8004baa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004bae:	f7fb fb5f 	bl	8000270 <__aeabi_uldivmod>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	4b38      	ldr	r3, [pc, #224]	; (8004c9c <UART_SetConfig+0x4e4>)
 8004bba:	fba3 2301 	umull	r2, r3, r3, r1
 8004bbe:	095b      	lsrs	r3, r3, #5
 8004bc0:	2264      	movs	r2, #100	; 0x64
 8004bc2:	fb02 f303 	mul.w	r3, r2, r3
 8004bc6:	1acb      	subs	r3, r1, r3
 8004bc8:	011b      	lsls	r3, r3, #4
 8004bca:	3332      	adds	r3, #50	; 0x32
 8004bcc:	4a33      	ldr	r2, [pc, #204]	; (8004c9c <UART_SetConfig+0x4e4>)
 8004bce:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd2:	095b      	lsrs	r3, r3, #5
 8004bd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bd8:	441c      	add	r4, r3
 8004bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bde:	2200      	movs	r2, #0
 8004be0:	673b      	str	r3, [r7, #112]	; 0x70
 8004be2:	677a      	str	r2, [r7, #116]	; 0x74
 8004be4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004be8:	4642      	mov	r2, r8
 8004bea:	464b      	mov	r3, r9
 8004bec:	1891      	adds	r1, r2, r2
 8004bee:	60b9      	str	r1, [r7, #8]
 8004bf0:	415b      	adcs	r3, r3
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bf8:	4641      	mov	r1, r8
 8004bfa:	1851      	adds	r1, r2, r1
 8004bfc:	6039      	str	r1, [r7, #0]
 8004bfe:	4649      	mov	r1, r9
 8004c00:	414b      	adcs	r3, r1
 8004c02:	607b      	str	r3, [r7, #4]
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	f04f 0300 	mov.w	r3, #0
 8004c0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c10:	4659      	mov	r1, fp
 8004c12:	00cb      	lsls	r3, r1, #3
 8004c14:	4651      	mov	r1, sl
 8004c16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c1a:	4651      	mov	r1, sl
 8004c1c:	00ca      	lsls	r2, r1, #3
 8004c1e:	4610      	mov	r0, r2
 8004c20:	4619      	mov	r1, r3
 8004c22:	4603      	mov	r3, r0
 8004c24:	4642      	mov	r2, r8
 8004c26:	189b      	adds	r3, r3, r2
 8004c28:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c2a:	464b      	mov	r3, r9
 8004c2c:	460a      	mov	r2, r1
 8004c2e:	eb42 0303 	adc.w	r3, r2, r3
 8004c32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	663b      	str	r3, [r7, #96]	; 0x60
 8004c3e:	667a      	str	r2, [r7, #100]	; 0x64
 8004c40:	f04f 0200 	mov.w	r2, #0
 8004c44:	f04f 0300 	mov.w	r3, #0
 8004c48:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c4c:	4649      	mov	r1, r9
 8004c4e:	008b      	lsls	r3, r1, #2
 8004c50:	4641      	mov	r1, r8
 8004c52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c56:	4641      	mov	r1, r8
 8004c58:	008a      	lsls	r2, r1, #2
 8004c5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c5e:	f7fb fb07 	bl	8000270 <__aeabi_uldivmod>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4b0d      	ldr	r3, [pc, #52]	; (8004c9c <UART_SetConfig+0x4e4>)
 8004c68:	fba3 1302 	umull	r1, r3, r3, r2
 8004c6c:	095b      	lsrs	r3, r3, #5
 8004c6e:	2164      	movs	r1, #100	; 0x64
 8004c70:	fb01 f303 	mul.w	r3, r1, r3
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	011b      	lsls	r3, r3, #4
 8004c78:	3332      	adds	r3, #50	; 0x32
 8004c7a:	4a08      	ldr	r2, [pc, #32]	; (8004c9c <UART_SetConfig+0x4e4>)
 8004c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c80:	095b      	lsrs	r3, r3, #5
 8004c82:	f003 020f 	and.w	r2, r3, #15
 8004c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4422      	add	r2, r4
 8004c8e:	609a      	str	r2, [r3, #8]
}
 8004c90:	bf00      	nop
 8004c92:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c96:	46bd      	mov	sp, r7
 8004c98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c9c:	51eb851f 	.word	0x51eb851f

08004ca0 <Split_String_UART>:
#define END_6_MOTOR 40

#define byteSign 5

void Split_String_UART(uint8_t data_in[], uint8_t len, uint8_t t1[], uint8_t t2[], uint8_t t3[], uint8_t t4[], uint8_t t5[], uint8_t t6[])
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b093      	sub	sp, #76	; 0x4c
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	607a      	str	r2, [r7, #4]
 8004caa:	603b      	str	r3, [r7, #0]
 8004cac:	460b      	mov	r3, r1
 8004cae:	72fb      	strb	r3, [r7, #11]
	int position_a = 0;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	647b      	str	r3, [r7, #68]	; 0x44
	int position_b = 0;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	643b      	str	r3, [r7, #64]	; 0x40
	int position_c = 0;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	63fb      	str	r3, [r7, #60]	; 0x3c
	int position_d = 0;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	63bb      	str	r3, [r7, #56]	; 0x38
	int position_e = 0;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	637b      	str	r3, [r7, #52]	; 0x34
	int position_f = 0;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	633b      	str	r3, [r7, #48]	; 0x30
	for(int i = 0; i < len; i++)
 8004cc8:	2300      	movs	r3, #0
 8004cca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ccc:	e02b      	b.n	8004d26 <Split_String_UART+0x86>
	{
		switch(data_in[i])
 8004cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	3b61      	subs	r3, #97	; 0x61
 8004cd8:	2b05      	cmp	r3, #5
 8004cda:	d821      	bhi.n	8004d20 <Split_String_UART+0x80>
 8004cdc:	a201      	add	r2, pc, #4	; (adr r2, 8004ce4 <Split_String_UART+0x44>)
 8004cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce2:	bf00      	nop
 8004ce4:	08004cfd 	.word	0x08004cfd
 8004ce8:	08004d03 	.word	0x08004d03
 8004cec:	08004d09 	.word	0x08004d09
 8004cf0:	08004d0f 	.word	0x08004d0f
 8004cf4:	08004d15 	.word	0x08004d15
 8004cf8:	08004d1b 	.word	0x08004d1b
		{
			case 'a': position_a = i;
 8004cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfe:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 8004d00:	e00e      	b.n	8004d20 <Split_String_UART+0x80>
			case 'b': position_b = i;
 8004d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d04:	643b      	str	r3, [r7, #64]	; 0x40
			break;
 8004d06:	e00b      	b.n	8004d20 <Split_String_UART+0x80>
			case 'c': position_c = i;
 8004d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
			break;
 8004d0c:	e008      	b.n	8004d20 <Split_String_UART+0x80>
			case 'd': position_d = i;
 8004d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d10:	63bb      	str	r3, [r7, #56]	; 0x38
			break;
 8004d12:	e005      	b.n	8004d20 <Split_String_UART+0x80>
			case 'e': position_e = i;
 8004d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d16:	637b      	str	r3, [r7, #52]	; 0x34
			break;
 8004d18:	e002      	b.n	8004d20 <Split_String_UART+0x80>
			case 'f': position_f = i;
 8004d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1c:	633b      	str	r3, [r7, #48]	; 0x30
			break;
 8004d1e:	bf00      	nop
	for(int i = 0; i < len; i++)
 8004d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d22:	3301      	adds	r3, #1
 8004d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d26:	7afb      	ldrb	r3, [r7, #11]
 8004d28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	dbcf      	blt.n	8004cce <Split_String_UART+0x2e>
		}
	}
	for(int i = 0; i < position_a; i++)
 8004d2e:	2300      	movs	r3, #0
 8004d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d32:	e00a      	b.n	8004d4a <Split_String_UART+0xaa>
		t1[i] = data_in[i];
 8004d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	441a      	add	r2, r3
 8004d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3c:	6879      	ldr	r1, [r7, #4]
 8004d3e:	440b      	add	r3, r1
 8004d40:	7812      	ldrb	r2, [r2, #0]
 8004d42:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < position_a; i++)
 8004d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d46:	3301      	adds	r3, #1
 8004d48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	dbf0      	blt.n	8004d34 <Split_String_UART+0x94>

	for(int i = position_a + 1; i < position_b; i++)
 8004d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d54:	3301      	adds	r3, #1
 8004d56:	627b      	str	r3, [r7, #36]	; 0x24
 8004d58:	e00e      	b.n	8004d78 <Split_String_UART+0xd8>
		t2[i - (position_a + 1)] = data_in[i];
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	441a      	add	r2, r3
 8004d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d62:	3301      	adds	r3, #1
 8004d64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d66:	1acb      	subs	r3, r1, r3
 8004d68:	4619      	mov	r1, r3
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	440b      	add	r3, r1
 8004d6e:	7812      	ldrb	r2, [r2, #0]
 8004d70:	701a      	strb	r2, [r3, #0]
	for(int i = position_a + 1; i < position_b; i++)
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	3301      	adds	r3, #1
 8004d76:	627b      	str	r3, [r7, #36]	; 0x24
 8004d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	dbec      	blt.n	8004d5a <Split_String_UART+0xba>

	for(int i = position_b + 1; i < position_c; i++)
 8004d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d82:	3301      	adds	r3, #1
 8004d84:	623b      	str	r3, [r7, #32]
 8004d86:	e00e      	b.n	8004da6 <Split_String_UART+0x106>
		t3[i - (position_b + 1)] = data_in[i];
 8004d88:	6a3b      	ldr	r3, [r7, #32]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	441a      	add	r2, r3
 8004d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d90:	3301      	adds	r3, #1
 8004d92:	6a39      	ldr	r1, [r7, #32]
 8004d94:	1acb      	subs	r3, r1, r3
 8004d96:	4619      	mov	r1, r3
 8004d98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d9a:	440b      	add	r3, r1
 8004d9c:	7812      	ldrb	r2, [r2, #0]
 8004d9e:	701a      	strb	r2, [r3, #0]
	for(int i = position_b + 1; i < position_c; i++)
 8004da0:	6a3b      	ldr	r3, [r7, #32]
 8004da2:	3301      	adds	r3, #1
 8004da4:	623b      	str	r3, [r7, #32]
 8004da6:	6a3a      	ldr	r2, [r7, #32]
 8004da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004daa:	429a      	cmp	r2, r3
 8004dac:	dbec      	blt.n	8004d88 <Split_String_UART+0xe8>

	for(int i = position_c + 1; i < position_d; i++)
 8004dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004db0:	3301      	adds	r3, #1
 8004db2:	61fb      	str	r3, [r7, #28]
 8004db4:	e00e      	b.n	8004dd4 <Split_String_UART+0x134>
		t4[i - (position_c + 1)] = data_in[i];
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	441a      	add	r2, r3
 8004dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	69f9      	ldr	r1, [r7, #28]
 8004dc2:	1acb      	subs	r3, r1, r3
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dc8:	440b      	add	r3, r1
 8004dca:	7812      	ldrb	r2, [r2, #0]
 8004dcc:	701a      	strb	r2, [r3, #0]
	for(int i = position_c + 1; i < position_d; i++)
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	61fb      	str	r3, [r7, #28]
 8004dd4:	69fa      	ldr	r2, [r7, #28]
 8004dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	dbec      	blt.n	8004db6 <Split_String_UART+0x116>

	for(int i = position_d + 1; i < position_e; i++)
 8004ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dde:	3301      	adds	r3, #1
 8004de0:	61bb      	str	r3, [r7, #24]
 8004de2:	e00e      	b.n	8004e02 <Split_String_UART+0x162>
		t5[i - (position_d + 1)] = data_in[i];
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	441a      	add	r2, r3
 8004dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dec:	3301      	adds	r3, #1
 8004dee:	69b9      	ldr	r1, [r7, #24]
 8004df0:	1acb      	subs	r3, r1, r3
 8004df2:	4619      	mov	r1, r3
 8004df4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004df6:	440b      	add	r3, r1
 8004df8:	7812      	ldrb	r2, [r2, #0]
 8004dfa:	701a      	strb	r2, [r3, #0]
	for(int i = position_d + 1; i < position_e; i++)
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	61bb      	str	r3, [r7, #24]
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e06:	429a      	cmp	r2, r3
 8004e08:	dbec      	blt.n	8004de4 <Split_String_UART+0x144>

	for(int i = position_e + 1; i < position_f; i++)
 8004e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	617b      	str	r3, [r7, #20]
 8004e10:	e00e      	b.n	8004e30 <Split_String_UART+0x190>
		t6[i - (position_e + 1)] = data_in[i];
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	441a      	add	r2, r3
 8004e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	6979      	ldr	r1, [r7, #20]
 8004e1e:	1acb      	subs	r3, r1, r3
 8004e20:	4619      	mov	r1, r3
 8004e22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e24:	440b      	add	r3, r1
 8004e26:	7812      	ldrb	r2, [r2, #0]
 8004e28:	701a      	strb	r2, [r3, #0]
	for(int i = position_e + 1; i < position_f; i++)
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	617b      	str	r3, [r7, #20]
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e34:	429a      	cmp	r2, r3
 8004e36:	dbec      	blt.n	8004e12 <Split_String_UART+0x172>
}
 8004e38:	bf00      	nop
 8004e3a:	bf00      	nop
 8004e3c:	374c      	adds	r7, #76	; 0x4c
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop

08004e48 <Handles_UART_6_motor>:
void Handles_UART_6_motor(uint8_t data_encoder_1_motor[],uint8_t data_encoder_2_motor[],uint8_t data_encoder_3_motor[],uint8_t data_encoder_4_motor[],uint8_t data_encoder_5_motor[],uint8_t data_encoder_6_motor[], uint8_t Data_Encoder[])
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b09c      	sub	sp, #112	; 0x70
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
 8004e54:	603b      	str	r3, [r7, #0]
	//TOTAL 7 BYTES
	//Sign data 1 byte
	Data_Encoder[START_1_MOTOR-1] = data_encoder_1_motor[byteSign];
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	795a      	ldrb	r2, [r3, #5]
 8004e5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e5e:	701a      	strb	r2, [r3, #0]
	//Number data 5 byte
	for(int i = START_1_MOTOR; i <= END_1_MOTOR; i++)
 8004e60:	2301      	movs	r3, #1
 8004e62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e64:	e017      	b.n	8004e96 <Handles_UART_6_motor+0x4e>
	{
		char tem[12];
		sprintf(&tem[0], "%d", data_encoder_1_motor[END_1_MOTOR - i]);
 8004e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e68:	f1c3 0305 	rsb	r3, r3, #5
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	4413      	add	r3, r2
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	461a      	mov	r2, r3
 8004e76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004e7a:	4975      	ldr	r1, [pc, #468]	; (8005050 <Handles_UART_6_motor+0x208>)
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 f8e9 	bl	8005054 <siprintf>
		Data_Encoder[i] = tem[0];
 8004e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e84:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e88:	4413      	add	r3, r2
 8004e8a:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8004e8e:	701a      	strb	r2, [r3, #0]
	for(int i = START_1_MOTOR; i <= END_1_MOTOR; i++)
 8004e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e92:	3301      	adds	r3, #1
 8004e94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e98:	2b05      	cmp	r3, #5
 8004e9a:	dde4      	ble.n	8004e66 <Handles_UART_6_motor+0x1e>
	}
	//Syntax 1 byte
	Data_Encoder[END_1_MOTOR+1] = 'a';
 8004e9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ea0:	3306      	adds	r3, #6
 8004ea2:	2261      	movs	r2, #97	; 0x61
 8004ea4:	701a      	strb	r2, [r3, #0]

	//TOTAL 7 BYTES
	//Sign data 1 byte
	Data_Encoder[START_2_MOTOR-1] = data_encoder_2_motor[byteSign];
 8004ea6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004eaa:	3307      	adds	r3, #7
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	7952      	ldrb	r2, [r2, #5]
 8004eb0:	701a      	strb	r2, [r3, #0]
	//Number data 5 byte
	for(int i = START_2_MOTOR; i <= END_2_MOTOR; i++)
 8004eb2:	2308      	movs	r3, #8
 8004eb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004eb6:	e017      	b.n	8004ee8 <Handles_UART_6_motor+0xa0>
	{
		char tem[12];
		sprintf(&tem[0], "%d", data_encoder_2_motor[END_2_MOTOR - i]);
 8004eb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004eba:	f1c3 030c 	rsb	r3, r3, #12
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ecc:	4960      	ldr	r1, [pc, #384]	; (8005050 <Handles_UART_6_motor+0x208>)
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 f8c0 	bl	8005054 <siprintf>
		Data_Encoder[i] = tem[0];
 8004ed4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ed6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004eda:	4413      	add	r3, r2
 8004edc:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8004ee0:	701a      	strb	r2, [r3, #0]
	for(int i = START_2_MOTOR; i <= END_2_MOTOR; i++)
 8004ee2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ee8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004eea:	2b0c      	cmp	r3, #12
 8004eec:	dde4      	ble.n	8004eb8 <Handles_UART_6_motor+0x70>
	}
	//Syntax 1 byte
	Data_Encoder[END_2_MOTOR+1] = 'b';
 8004eee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ef2:	330d      	adds	r3, #13
 8004ef4:	2262      	movs	r2, #98	; 0x62
 8004ef6:	701a      	strb	r2, [r3, #0]

	//TOTAL 7 BYTES
	//Sign data 1 byte
	Data_Encoder[START_3_MOTOR-1] = data_encoder_3_motor[byteSign];
 8004ef8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004efc:	330e      	adds	r3, #14
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	7952      	ldrb	r2, [r2, #5]
 8004f02:	701a      	strb	r2, [r3, #0]
	//Number data 5 byte
	for(int i = START_3_MOTOR; i <= END_3_MOTOR; i++)
 8004f04:	230f      	movs	r3, #15
 8004f06:	667b      	str	r3, [r7, #100]	; 0x64
 8004f08:	e017      	b.n	8004f3a <Handles_UART_6_motor+0xf2>
	{
		char tem[12];
		sprintf(&tem[0], "%d", data_encoder_3_motor[END_3_MOTOR - i]);
 8004f0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f0c:	f1c3 0313 	rsb	r3, r3, #19
 8004f10:	461a      	mov	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4413      	add	r3, r2
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	461a      	mov	r2, r3
 8004f1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004f1e:	494c      	ldr	r1, [pc, #304]	; (8005050 <Handles_UART_6_motor+0x208>)
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 f897 	bl	8005054 <siprintf>
		Data_Encoder[i] = tem[0];
 8004f26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f28:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8004f32:	701a      	strb	r2, [r3, #0]
	for(int i = START_3_MOTOR; i <= END_3_MOTOR; i++)
 8004f34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f36:	3301      	adds	r3, #1
 8004f38:	667b      	str	r3, [r7, #100]	; 0x64
 8004f3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f3c:	2b13      	cmp	r3, #19
 8004f3e:	dde4      	ble.n	8004f0a <Handles_UART_6_motor+0xc2>
	}
	//Syntax 1 byte
	Data_Encoder[END_3_MOTOR+1] = 'c';
 8004f40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f44:	3314      	adds	r3, #20
 8004f46:	2263      	movs	r2, #99	; 0x63
 8004f48:	701a      	strb	r2, [r3, #0]

	//TOTAL 7 BYTES
	//Sign data 1 byte
	Data_Encoder[START_4_MOTOR-1] = data_encoder_4_motor[byteSign];
 8004f4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f4e:	3315      	adds	r3, #21
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	7952      	ldrb	r2, [r2, #5]
 8004f54:	701a      	strb	r2, [r3, #0]
	//Number data 5 byte
	for(int i = START_4_MOTOR; i <= END_4_MOTOR; i++)
 8004f56:	2316      	movs	r3, #22
 8004f58:	663b      	str	r3, [r7, #96]	; 0x60
 8004f5a:	e017      	b.n	8004f8c <Handles_UART_6_motor+0x144>
	{
		char tem[12];
		sprintf(&tem[0], "%d", data_encoder_4_motor[END_4_MOTOR - i]);
 8004f5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f5e:	f1c3 031a 	rsb	r3, r3, #26
 8004f62:	461a      	mov	r2, r3
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	4413      	add	r3, r2
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f70:	4937      	ldr	r1, [pc, #220]	; (8005050 <Handles_UART_6_motor+0x208>)
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 f86e 	bl	8005054 <siprintf>
		Data_Encoder[i] = tem[0];
 8004f78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f7e:	4413      	add	r3, r2
 8004f80:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004f84:	701a      	strb	r2, [r3, #0]
	for(int i = START_4_MOTOR; i <= END_4_MOTOR; i++)
 8004f86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f88:	3301      	adds	r3, #1
 8004f8a:	663b      	str	r3, [r7, #96]	; 0x60
 8004f8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f8e:	2b1a      	cmp	r3, #26
 8004f90:	dde4      	ble.n	8004f5c <Handles_UART_6_motor+0x114>
	}
	//Syntax 1 byte
	Data_Encoder[END_4_MOTOR+1] = 'd';
 8004f92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f96:	331b      	adds	r3, #27
 8004f98:	2264      	movs	r2, #100	; 0x64
 8004f9a:	701a      	strb	r2, [r3, #0]

	//TOTAL 7 BYTES
	//Sign data 1 byte
	Data_Encoder[START_5_MOTOR-1] = data_encoder_5_motor[byteSign];
 8004f9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004fa0:	331c      	adds	r3, #28
 8004fa2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004fa4:	7952      	ldrb	r2, [r2, #5]
 8004fa6:	701a      	strb	r2, [r3, #0]
	//Number data 5 byte
	for(int i = START_5_MOTOR; i <= END_5_MOTOR; i++)
 8004fa8:	231d      	movs	r3, #29
 8004faa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fac:	e016      	b.n	8004fdc <Handles_UART_6_motor+0x194>
	{
		char tem[12];
		sprintf(&tem[0], "%d", data_encoder_5_motor[END_5_MOTOR - i]);
 8004fae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fb0:	f1c3 0321 	rsb	r3, r3, #33	; 0x21
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fb8:	4413      	add	r3, r2
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	f107 031c 	add.w	r3, r7, #28
 8004fc2:	4923      	ldr	r1, [pc, #140]	; (8005050 <Handles_UART_6_motor+0x208>)
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 f845 	bl	8005054 <siprintf>
		Data_Encoder[i] = tem[0];
 8004fca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fcc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004fd0:	4413      	add	r3, r2
 8004fd2:	7f3a      	ldrb	r2, [r7, #28]
 8004fd4:	701a      	strb	r2, [r3, #0]
	for(int i = START_5_MOTOR; i <= END_5_MOTOR; i++)
 8004fd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fd8:	3301      	adds	r3, #1
 8004fda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fde:	2b21      	cmp	r3, #33	; 0x21
 8004fe0:	dde5      	ble.n	8004fae <Handles_UART_6_motor+0x166>
	}
	//Syntax 1 byte
	Data_Encoder[END_5_MOTOR+1] = 'e';
 8004fe2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004fe6:	3322      	adds	r3, #34	; 0x22
 8004fe8:	2265      	movs	r2, #101	; 0x65
 8004fea:	701a      	strb	r2, [r3, #0]

	//TOTAL 7 BYTES
	//Sign data 1 byte
	Data_Encoder[START_6_MOTOR-1] = data_encoder_6_motor[byteSign];
 8004fec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ff0:	3323      	adds	r3, #35	; 0x23
 8004ff2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004ff4:	7952      	ldrb	r2, [r2, #5]
 8004ff6:	701a      	strb	r2, [r3, #0]
	//Number data 5 byte
	for(int i = START_6_MOTOR; i <= END_6_MOTOR; i++)
 8004ff8:	2324      	movs	r3, #36	; 0x24
 8004ffa:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ffc:	e016      	b.n	800502c <Handles_UART_6_motor+0x1e4>
	{
		char tem[12];
		sprintf(&tem[0], "%d", data_encoder_6_motor[END_6_MOTOR - i]);
 8004ffe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005000:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8005004:	461a      	mov	r2, r3
 8005006:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005008:	4413      	add	r3, r2
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	461a      	mov	r2, r3
 800500e:	f107 0310 	add.w	r3, r7, #16
 8005012:	490f      	ldr	r1, [pc, #60]	; (8005050 <Handles_UART_6_motor+0x208>)
 8005014:	4618      	mov	r0, r3
 8005016:	f000 f81d 	bl	8005054 <siprintf>
		Data_Encoder[i] = tem[0];
 800501a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800501c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005020:	4413      	add	r3, r2
 8005022:	7c3a      	ldrb	r2, [r7, #16]
 8005024:	701a      	strb	r2, [r3, #0]
	for(int i = START_6_MOTOR; i <= END_6_MOTOR; i++)
 8005026:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005028:	3301      	adds	r3, #1
 800502a:	65bb      	str	r3, [r7, #88]	; 0x58
 800502c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800502e:	2b28      	cmp	r3, #40	; 0x28
 8005030:	dde5      	ble.n	8004ffe <Handles_UART_6_motor+0x1b6>
	}
	//Syntax 1 byte
	Data_Encoder[END_6_MOTOR+1] = 'f';
 8005032:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005036:	3329      	adds	r3, #41	; 0x29
 8005038:	2266      	movs	r2, #102	; 0x66
 800503a:	701a      	strb	r2, [r3, #0]

	Data_Encoder[END_6_MOTOR+2] = 's';
 800503c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005040:	332a      	adds	r3, #42	; 0x2a
 8005042:	2273      	movs	r2, #115	; 0x73
 8005044:	701a      	strb	r2, [r3, #0]
}
 8005046:	bf00      	nop
 8005048:	3770      	adds	r7, #112	; 0x70
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	080059cc 	.word	0x080059cc

08005054 <siprintf>:
 8005054:	b40e      	push	{r1, r2, r3}
 8005056:	b500      	push	{lr}
 8005058:	b09c      	sub	sp, #112	; 0x70
 800505a:	ab1d      	add	r3, sp, #116	; 0x74
 800505c:	9002      	str	r0, [sp, #8]
 800505e:	9006      	str	r0, [sp, #24]
 8005060:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005064:	4809      	ldr	r0, [pc, #36]	; (800508c <siprintf+0x38>)
 8005066:	9107      	str	r1, [sp, #28]
 8005068:	9104      	str	r1, [sp, #16]
 800506a:	4909      	ldr	r1, [pc, #36]	; (8005090 <siprintf+0x3c>)
 800506c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005070:	9105      	str	r1, [sp, #20]
 8005072:	6800      	ldr	r0, [r0, #0]
 8005074:	9301      	str	r3, [sp, #4]
 8005076:	a902      	add	r1, sp, #8
 8005078:	f000 f992 	bl	80053a0 <_svfiprintf_r>
 800507c:	9b02      	ldr	r3, [sp, #8]
 800507e:	2200      	movs	r2, #0
 8005080:	701a      	strb	r2, [r3, #0]
 8005082:	b01c      	add	sp, #112	; 0x70
 8005084:	f85d eb04 	ldr.w	lr, [sp], #4
 8005088:	b003      	add	sp, #12
 800508a:	4770      	bx	lr
 800508c:	20000084 	.word	0x20000084
 8005090:	ffff0208 	.word	0xffff0208

08005094 <memset>:
 8005094:	4402      	add	r2, r0
 8005096:	4603      	mov	r3, r0
 8005098:	4293      	cmp	r3, r2
 800509a:	d100      	bne.n	800509e <memset+0xa>
 800509c:	4770      	bx	lr
 800509e:	f803 1b01 	strb.w	r1, [r3], #1
 80050a2:	e7f9      	b.n	8005098 <memset+0x4>

080050a4 <__errno>:
 80050a4:	4b01      	ldr	r3, [pc, #4]	; (80050ac <__errno+0x8>)
 80050a6:	6818      	ldr	r0, [r3, #0]
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	20000084 	.word	0x20000084

080050b0 <__libc_init_array>:
 80050b0:	b570      	push	{r4, r5, r6, lr}
 80050b2:	4d0d      	ldr	r5, [pc, #52]	; (80050e8 <__libc_init_array+0x38>)
 80050b4:	4c0d      	ldr	r4, [pc, #52]	; (80050ec <__libc_init_array+0x3c>)
 80050b6:	1b64      	subs	r4, r4, r5
 80050b8:	10a4      	asrs	r4, r4, #2
 80050ba:	2600      	movs	r6, #0
 80050bc:	42a6      	cmp	r6, r4
 80050be:	d109      	bne.n	80050d4 <__libc_init_array+0x24>
 80050c0:	4d0b      	ldr	r5, [pc, #44]	; (80050f0 <__libc_init_array+0x40>)
 80050c2:	4c0c      	ldr	r4, [pc, #48]	; (80050f4 <__libc_init_array+0x44>)
 80050c4:	f000 fc6a 	bl	800599c <_init>
 80050c8:	1b64      	subs	r4, r4, r5
 80050ca:	10a4      	asrs	r4, r4, #2
 80050cc:	2600      	movs	r6, #0
 80050ce:	42a6      	cmp	r6, r4
 80050d0:	d105      	bne.n	80050de <__libc_init_array+0x2e>
 80050d2:	bd70      	pop	{r4, r5, r6, pc}
 80050d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80050d8:	4798      	blx	r3
 80050da:	3601      	adds	r6, #1
 80050dc:	e7ee      	b.n	80050bc <__libc_init_array+0xc>
 80050de:	f855 3b04 	ldr.w	r3, [r5], #4
 80050e2:	4798      	blx	r3
 80050e4:	3601      	adds	r6, #1
 80050e6:	e7f2      	b.n	80050ce <__libc_init_array+0x1e>
 80050e8:	08005a24 	.word	0x08005a24
 80050ec:	08005a24 	.word	0x08005a24
 80050f0:	08005a24 	.word	0x08005a24
 80050f4:	08005a28 	.word	0x08005a28

080050f8 <__retarget_lock_acquire_recursive>:
 80050f8:	4770      	bx	lr

080050fa <__retarget_lock_release_recursive>:
 80050fa:	4770      	bx	lr

080050fc <_free_r>:
 80050fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050fe:	2900      	cmp	r1, #0
 8005100:	d044      	beq.n	800518c <_free_r+0x90>
 8005102:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005106:	9001      	str	r0, [sp, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	f1a1 0404 	sub.w	r4, r1, #4
 800510e:	bfb8      	it	lt
 8005110:	18e4      	addlt	r4, r4, r3
 8005112:	f000 f8df 	bl	80052d4 <__malloc_lock>
 8005116:	4a1e      	ldr	r2, [pc, #120]	; (8005190 <_free_r+0x94>)
 8005118:	9801      	ldr	r0, [sp, #4]
 800511a:	6813      	ldr	r3, [r2, #0]
 800511c:	b933      	cbnz	r3, 800512c <_free_r+0x30>
 800511e:	6063      	str	r3, [r4, #4]
 8005120:	6014      	str	r4, [r2, #0]
 8005122:	b003      	add	sp, #12
 8005124:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005128:	f000 b8da 	b.w	80052e0 <__malloc_unlock>
 800512c:	42a3      	cmp	r3, r4
 800512e:	d908      	bls.n	8005142 <_free_r+0x46>
 8005130:	6825      	ldr	r5, [r4, #0]
 8005132:	1961      	adds	r1, r4, r5
 8005134:	428b      	cmp	r3, r1
 8005136:	bf01      	itttt	eq
 8005138:	6819      	ldreq	r1, [r3, #0]
 800513a:	685b      	ldreq	r3, [r3, #4]
 800513c:	1949      	addeq	r1, r1, r5
 800513e:	6021      	streq	r1, [r4, #0]
 8005140:	e7ed      	b.n	800511e <_free_r+0x22>
 8005142:	461a      	mov	r2, r3
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	b10b      	cbz	r3, 800514c <_free_r+0x50>
 8005148:	42a3      	cmp	r3, r4
 800514a:	d9fa      	bls.n	8005142 <_free_r+0x46>
 800514c:	6811      	ldr	r1, [r2, #0]
 800514e:	1855      	adds	r5, r2, r1
 8005150:	42a5      	cmp	r5, r4
 8005152:	d10b      	bne.n	800516c <_free_r+0x70>
 8005154:	6824      	ldr	r4, [r4, #0]
 8005156:	4421      	add	r1, r4
 8005158:	1854      	adds	r4, r2, r1
 800515a:	42a3      	cmp	r3, r4
 800515c:	6011      	str	r1, [r2, #0]
 800515e:	d1e0      	bne.n	8005122 <_free_r+0x26>
 8005160:	681c      	ldr	r4, [r3, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	6053      	str	r3, [r2, #4]
 8005166:	440c      	add	r4, r1
 8005168:	6014      	str	r4, [r2, #0]
 800516a:	e7da      	b.n	8005122 <_free_r+0x26>
 800516c:	d902      	bls.n	8005174 <_free_r+0x78>
 800516e:	230c      	movs	r3, #12
 8005170:	6003      	str	r3, [r0, #0]
 8005172:	e7d6      	b.n	8005122 <_free_r+0x26>
 8005174:	6825      	ldr	r5, [r4, #0]
 8005176:	1961      	adds	r1, r4, r5
 8005178:	428b      	cmp	r3, r1
 800517a:	bf04      	itt	eq
 800517c:	6819      	ldreq	r1, [r3, #0]
 800517e:	685b      	ldreq	r3, [r3, #4]
 8005180:	6063      	str	r3, [r4, #4]
 8005182:	bf04      	itt	eq
 8005184:	1949      	addeq	r1, r1, r5
 8005186:	6021      	streq	r1, [r4, #0]
 8005188:	6054      	str	r4, [r2, #4]
 800518a:	e7ca      	b.n	8005122 <_free_r+0x26>
 800518c:	b003      	add	sp, #12
 800518e:	bd30      	pop	{r4, r5, pc}
 8005190:	200003f4 	.word	0x200003f4

08005194 <sbrk_aligned>:
 8005194:	b570      	push	{r4, r5, r6, lr}
 8005196:	4e0e      	ldr	r6, [pc, #56]	; (80051d0 <sbrk_aligned+0x3c>)
 8005198:	460c      	mov	r4, r1
 800519a:	6831      	ldr	r1, [r6, #0]
 800519c:	4605      	mov	r5, r0
 800519e:	b911      	cbnz	r1, 80051a6 <sbrk_aligned+0x12>
 80051a0:	f000 fba6 	bl	80058f0 <_sbrk_r>
 80051a4:	6030      	str	r0, [r6, #0]
 80051a6:	4621      	mov	r1, r4
 80051a8:	4628      	mov	r0, r5
 80051aa:	f000 fba1 	bl	80058f0 <_sbrk_r>
 80051ae:	1c43      	adds	r3, r0, #1
 80051b0:	d00a      	beq.n	80051c8 <sbrk_aligned+0x34>
 80051b2:	1cc4      	adds	r4, r0, #3
 80051b4:	f024 0403 	bic.w	r4, r4, #3
 80051b8:	42a0      	cmp	r0, r4
 80051ba:	d007      	beq.n	80051cc <sbrk_aligned+0x38>
 80051bc:	1a21      	subs	r1, r4, r0
 80051be:	4628      	mov	r0, r5
 80051c0:	f000 fb96 	bl	80058f0 <_sbrk_r>
 80051c4:	3001      	adds	r0, #1
 80051c6:	d101      	bne.n	80051cc <sbrk_aligned+0x38>
 80051c8:	f04f 34ff 	mov.w	r4, #4294967295
 80051cc:	4620      	mov	r0, r4
 80051ce:	bd70      	pop	{r4, r5, r6, pc}
 80051d0:	200003f8 	.word	0x200003f8

080051d4 <_malloc_r>:
 80051d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051d8:	1ccd      	adds	r5, r1, #3
 80051da:	f025 0503 	bic.w	r5, r5, #3
 80051de:	3508      	adds	r5, #8
 80051e0:	2d0c      	cmp	r5, #12
 80051e2:	bf38      	it	cc
 80051e4:	250c      	movcc	r5, #12
 80051e6:	2d00      	cmp	r5, #0
 80051e8:	4607      	mov	r7, r0
 80051ea:	db01      	blt.n	80051f0 <_malloc_r+0x1c>
 80051ec:	42a9      	cmp	r1, r5
 80051ee:	d905      	bls.n	80051fc <_malloc_r+0x28>
 80051f0:	230c      	movs	r3, #12
 80051f2:	603b      	str	r3, [r7, #0]
 80051f4:	2600      	movs	r6, #0
 80051f6:	4630      	mov	r0, r6
 80051f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80052d0 <_malloc_r+0xfc>
 8005200:	f000 f868 	bl	80052d4 <__malloc_lock>
 8005204:	f8d8 3000 	ldr.w	r3, [r8]
 8005208:	461c      	mov	r4, r3
 800520a:	bb5c      	cbnz	r4, 8005264 <_malloc_r+0x90>
 800520c:	4629      	mov	r1, r5
 800520e:	4638      	mov	r0, r7
 8005210:	f7ff ffc0 	bl	8005194 <sbrk_aligned>
 8005214:	1c43      	adds	r3, r0, #1
 8005216:	4604      	mov	r4, r0
 8005218:	d155      	bne.n	80052c6 <_malloc_r+0xf2>
 800521a:	f8d8 4000 	ldr.w	r4, [r8]
 800521e:	4626      	mov	r6, r4
 8005220:	2e00      	cmp	r6, #0
 8005222:	d145      	bne.n	80052b0 <_malloc_r+0xdc>
 8005224:	2c00      	cmp	r4, #0
 8005226:	d048      	beq.n	80052ba <_malloc_r+0xe6>
 8005228:	6823      	ldr	r3, [r4, #0]
 800522a:	4631      	mov	r1, r6
 800522c:	4638      	mov	r0, r7
 800522e:	eb04 0903 	add.w	r9, r4, r3
 8005232:	f000 fb5d 	bl	80058f0 <_sbrk_r>
 8005236:	4581      	cmp	r9, r0
 8005238:	d13f      	bne.n	80052ba <_malloc_r+0xe6>
 800523a:	6821      	ldr	r1, [r4, #0]
 800523c:	1a6d      	subs	r5, r5, r1
 800523e:	4629      	mov	r1, r5
 8005240:	4638      	mov	r0, r7
 8005242:	f7ff ffa7 	bl	8005194 <sbrk_aligned>
 8005246:	3001      	adds	r0, #1
 8005248:	d037      	beq.n	80052ba <_malloc_r+0xe6>
 800524a:	6823      	ldr	r3, [r4, #0]
 800524c:	442b      	add	r3, r5
 800524e:	6023      	str	r3, [r4, #0]
 8005250:	f8d8 3000 	ldr.w	r3, [r8]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d038      	beq.n	80052ca <_malloc_r+0xf6>
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	42a2      	cmp	r2, r4
 800525c:	d12b      	bne.n	80052b6 <_malloc_r+0xe2>
 800525e:	2200      	movs	r2, #0
 8005260:	605a      	str	r2, [r3, #4]
 8005262:	e00f      	b.n	8005284 <_malloc_r+0xb0>
 8005264:	6822      	ldr	r2, [r4, #0]
 8005266:	1b52      	subs	r2, r2, r5
 8005268:	d41f      	bmi.n	80052aa <_malloc_r+0xd6>
 800526a:	2a0b      	cmp	r2, #11
 800526c:	d917      	bls.n	800529e <_malloc_r+0xca>
 800526e:	1961      	adds	r1, r4, r5
 8005270:	42a3      	cmp	r3, r4
 8005272:	6025      	str	r5, [r4, #0]
 8005274:	bf18      	it	ne
 8005276:	6059      	strne	r1, [r3, #4]
 8005278:	6863      	ldr	r3, [r4, #4]
 800527a:	bf08      	it	eq
 800527c:	f8c8 1000 	streq.w	r1, [r8]
 8005280:	5162      	str	r2, [r4, r5]
 8005282:	604b      	str	r3, [r1, #4]
 8005284:	4638      	mov	r0, r7
 8005286:	f104 060b 	add.w	r6, r4, #11
 800528a:	f000 f829 	bl	80052e0 <__malloc_unlock>
 800528e:	f026 0607 	bic.w	r6, r6, #7
 8005292:	1d23      	adds	r3, r4, #4
 8005294:	1af2      	subs	r2, r6, r3
 8005296:	d0ae      	beq.n	80051f6 <_malloc_r+0x22>
 8005298:	1b9b      	subs	r3, r3, r6
 800529a:	50a3      	str	r3, [r4, r2]
 800529c:	e7ab      	b.n	80051f6 <_malloc_r+0x22>
 800529e:	42a3      	cmp	r3, r4
 80052a0:	6862      	ldr	r2, [r4, #4]
 80052a2:	d1dd      	bne.n	8005260 <_malloc_r+0x8c>
 80052a4:	f8c8 2000 	str.w	r2, [r8]
 80052a8:	e7ec      	b.n	8005284 <_malloc_r+0xb0>
 80052aa:	4623      	mov	r3, r4
 80052ac:	6864      	ldr	r4, [r4, #4]
 80052ae:	e7ac      	b.n	800520a <_malloc_r+0x36>
 80052b0:	4634      	mov	r4, r6
 80052b2:	6876      	ldr	r6, [r6, #4]
 80052b4:	e7b4      	b.n	8005220 <_malloc_r+0x4c>
 80052b6:	4613      	mov	r3, r2
 80052b8:	e7cc      	b.n	8005254 <_malloc_r+0x80>
 80052ba:	230c      	movs	r3, #12
 80052bc:	603b      	str	r3, [r7, #0]
 80052be:	4638      	mov	r0, r7
 80052c0:	f000 f80e 	bl	80052e0 <__malloc_unlock>
 80052c4:	e797      	b.n	80051f6 <_malloc_r+0x22>
 80052c6:	6025      	str	r5, [r4, #0]
 80052c8:	e7dc      	b.n	8005284 <_malloc_r+0xb0>
 80052ca:	605b      	str	r3, [r3, #4]
 80052cc:	deff      	udf	#255	; 0xff
 80052ce:	bf00      	nop
 80052d0:	200003f4 	.word	0x200003f4

080052d4 <__malloc_lock>:
 80052d4:	4801      	ldr	r0, [pc, #4]	; (80052dc <__malloc_lock+0x8>)
 80052d6:	f7ff bf0f 	b.w	80050f8 <__retarget_lock_acquire_recursive>
 80052da:	bf00      	nop
 80052dc:	200003f0 	.word	0x200003f0

080052e0 <__malloc_unlock>:
 80052e0:	4801      	ldr	r0, [pc, #4]	; (80052e8 <__malloc_unlock+0x8>)
 80052e2:	f7ff bf0a 	b.w	80050fa <__retarget_lock_release_recursive>
 80052e6:	bf00      	nop
 80052e8:	200003f0 	.word	0x200003f0

080052ec <__ssputs_r>:
 80052ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052f0:	688e      	ldr	r6, [r1, #8]
 80052f2:	461f      	mov	r7, r3
 80052f4:	42be      	cmp	r6, r7
 80052f6:	680b      	ldr	r3, [r1, #0]
 80052f8:	4682      	mov	sl, r0
 80052fa:	460c      	mov	r4, r1
 80052fc:	4690      	mov	r8, r2
 80052fe:	d82c      	bhi.n	800535a <__ssputs_r+0x6e>
 8005300:	898a      	ldrh	r2, [r1, #12]
 8005302:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005306:	d026      	beq.n	8005356 <__ssputs_r+0x6a>
 8005308:	6965      	ldr	r5, [r4, #20]
 800530a:	6909      	ldr	r1, [r1, #16]
 800530c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005310:	eba3 0901 	sub.w	r9, r3, r1
 8005314:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005318:	1c7b      	adds	r3, r7, #1
 800531a:	444b      	add	r3, r9
 800531c:	106d      	asrs	r5, r5, #1
 800531e:	429d      	cmp	r5, r3
 8005320:	bf38      	it	cc
 8005322:	461d      	movcc	r5, r3
 8005324:	0553      	lsls	r3, r2, #21
 8005326:	d527      	bpl.n	8005378 <__ssputs_r+0x8c>
 8005328:	4629      	mov	r1, r5
 800532a:	f7ff ff53 	bl	80051d4 <_malloc_r>
 800532e:	4606      	mov	r6, r0
 8005330:	b360      	cbz	r0, 800538c <__ssputs_r+0xa0>
 8005332:	6921      	ldr	r1, [r4, #16]
 8005334:	464a      	mov	r2, r9
 8005336:	f000 faeb 	bl	8005910 <memcpy>
 800533a:	89a3      	ldrh	r3, [r4, #12]
 800533c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005344:	81a3      	strh	r3, [r4, #12]
 8005346:	6126      	str	r6, [r4, #16]
 8005348:	6165      	str	r5, [r4, #20]
 800534a:	444e      	add	r6, r9
 800534c:	eba5 0509 	sub.w	r5, r5, r9
 8005350:	6026      	str	r6, [r4, #0]
 8005352:	60a5      	str	r5, [r4, #8]
 8005354:	463e      	mov	r6, r7
 8005356:	42be      	cmp	r6, r7
 8005358:	d900      	bls.n	800535c <__ssputs_r+0x70>
 800535a:	463e      	mov	r6, r7
 800535c:	6820      	ldr	r0, [r4, #0]
 800535e:	4632      	mov	r2, r6
 8005360:	4641      	mov	r1, r8
 8005362:	f000 faab 	bl	80058bc <memmove>
 8005366:	68a3      	ldr	r3, [r4, #8]
 8005368:	1b9b      	subs	r3, r3, r6
 800536a:	60a3      	str	r3, [r4, #8]
 800536c:	6823      	ldr	r3, [r4, #0]
 800536e:	4433      	add	r3, r6
 8005370:	6023      	str	r3, [r4, #0]
 8005372:	2000      	movs	r0, #0
 8005374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005378:	462a      	mov	r2, r5
 800537a:	f000 fad7 	bl	800592c <_realloc_r>
 800537e:	4606      	mov	r6, r0
 8005380:	2800      	cmp	r0, #0
 8005382:	d1e0      	bne.n	8005346 <__ssputs_r+0x5a>
 8005384:	6921      	ldr	r1, [r4, #16]
 8005386:	4650      	mov	r0, sl
 8005388:	f7ff feb8 	bl	80050fc <_free_r>
 800538c:	230c      	movs	r3, #12
 800538e:	f8ca 3000 	str.w	r3, [sl]
 8005392:	89a3      	ldrh	r3, [r4, #12]
 8005394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005398:	81a3      	strh	r3, [r4, #12]
 800539a:	f04f 30ff 	mov.w	r0, #4294967295
 800539e:	e7e9      	b.n	8005374 <__ssputs_r+0x88>

080053a0 <_svfiprintf_r>:
 80053a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a4:	4698      	mov	r8, r3
 80053a6:	898b      	ldrh	r3, [r1, #12]
 80053a8:	061b      	lsls	r3, r3, #24
 80053aa:	b09d      	sub	sp, #116	; 0x74
 80053ac:	4607      	mov	r7, r0
 80053ae:	460d      	mov	r5, r1
 80053b0:	4614      	mov	r4, r2
 80053b2:	d50e      	bpl.n	80053d2 <_svfiprintf_r+0x32>
 80053b4:	690b      	ldr	r3, [r1, #16]
 80053b6:	b963      	cbnz	r3, 80053d2 <_svfiprintf_r+0x32>
 80053b8:	2140      	movs	r1, #64	; 0x40
 80053ba:	f7ff ff0b 	bl	80051d4 <_malloc_r>
 80053be:	6028      	str	r0, [r5, #0]
 80053c0:	6128      	str	r0, [r5, #16]
 80053c2:	b920      	cbnz	r0, 80053ce <_svfiprintf_r+0x2e>
 80053c4:	230c      	movs	r3, #12
 80053c6:	603b      	str	r3, [r7, #0]
 80053c8:	f04f 30ff 	mov.w	r0, #4294967295
 80053cc:	e0d0      	b.n	8005570 <_svfiprintf_r+0x1d0>
 80053ce:	2340      	movs	r3, #64	; 0x40
 80053d0:	616b      	str	r3, [r5, #20]
 80053d2:	2300      	movs	r3, #0
 80053d4:	9309      	str	r3, [sp, #36]	; 0x24
 80053d6:	2320      	movs	r3, #32
 80053d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80053e0:	2330      	movs	r3, #48	; 0x30
 80053e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005588 <_svfiprintf_r+0x1e8>
 80053e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053ea:	f04f 0901 	mov.w	r9, #1
 80053ee:	4623      	mov	r3, r4
 80053f0:	469a      	mov	sl, r3
 80053f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053f6:	b10a      	cbz	r2, 80053fc <_svfiprintf_r+0x5c>
 80053f8:	2a25      	cmp	r2, #37	; 0x25
 80053fa:	d1f9      	bne.n	80053f0 <_svfiprintf_r+0x50>
 80053fc:	ebba 0b04 	subs.w	fp, sl, r4
 8005400:	d00b      	beq.n	800541a <_svfiprintf_r+0x7a>
 8005402:	465b      	mov	r3, fp
 8005404:	4622      	mov	r2, r4
 8005406:	4629      	mov	r1, r5
 8005408:	4638      	mov	r0, r7
 800540a:	f7ff ff6f 	bl	80052ec <__ssputs_r>
 800540e:	3001      	adds	r0, #1
 8005410:	f000 80a9 	beq.w	8005566 <_svfiprintf_r+0x1c6>
 8005414:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005416:	445a      	add	r2, fp
 8005418:	9209      	str	r2, [sp, #36]	; 0x24
 800541a:	f89a 3000 	ldrb.w	r3, [sl]
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 80a1 	beq.w	8005566 <_svfiprintf_r+0x1c6>
 8005424:	2300      	movs	r3, #0
 8005426:	f04f 32ff 	mov.w	r2, #4294967295
 800542a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800542e:	f10a 0a01 	add.w	sl, sl, #1
 8005432:	9304      	str	r3, [sp, #16]
 8005434:	9307      	str	r3, [sp, #28]
 8005436:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800543a:	931a      	str	r3, [sp, #104]	; 0x68
 800543c:	4654      	mov	r4, sl
 800543e:	2205      	movs	r2, #5
 8005440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005444:	4850      	ldr	r0, [pc, #320]	; (8005588 <_svfiprintf_r+0x1e8>)
 8005446:	f7fa fec3 	bl	80001d0 <memchr>
 800544a:	9a04      	ldr	r2, [sp, #16]
 800544c:	b9d8      	cbnz	r0, 8005486 <_svfiprintf_r+0xe6>
 800544e:	06d0      	lsls	r0, r2, #27
 8005450:	bf44      	itt	mi
 8005452:	2320      	movmi	r3, #32
 8005454:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005458:	0711      	lsls	r1, r2, #28
 800545a:	bf44      	itt	mi
 800545c:	232b      	movmi	r3, #43	; 0x2b
 800545e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005462:	f89a 3000 	ldrb.w	r3, [sl]
 8005466:	2b2a      	cmp	r3, #42	; 0x2a
 8005468:	d015      	beq.n	8005496 <_svfiprintf_r+0xf6>
 800546a:	9a07      	ldr	r2, [sp, #28]
 800546c:	4654      	mov	r4, sl
 800546e:	2000      	movs	r0, #0
 8005470:	f04f 0c0a 	mov.w	ip, #10
 8005474:	4621      	mov	r1, r4
 8005476:	f811 3b01 	ldrb.w	r3, [r1], #1
 800547a:	3b30      	subs	r3, #48	; 0x30
 800547c:	2b09      	cmp	r3, #9
 800547e:	d94d      	bls.n	800551c <_svfiprintf_r+0x17c>
 8005480:	b1b0      	cbz	r0, 80054b0 <_svfiprintf_r+0x110>
 8005482:	9207      	str	r2, [sp, #28]
 8005484:	e014      	b.n	80054b0 <_svfiprintf_r+0x110>
 8005486:	eba0 0308 	sub.w	r3, r0, r8
 800548a:	fa09 f303 	lsl.w	r3, r9, r3
 800548e:	4313      	orrs	r3, r2
 8005490:	9304      	str	r3, [sp, #16]
 8005492:	46a2      	mov	sl, r4
 8005494:	e7d2      	b.n	800543c <_svfiprintf_r+0x9c>
 8005496:	9b03      	ldr	r3, [sp, #12]
 8005498:	1d19      	adds	r1, r3, #4
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	9103      	str	r1, [sp, #12]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	bfbb      	ittet	lt
 80054a2:	425b      	neglt	r3, r3
 80054a4:	f042 0202 	orrlt.w	r2, r2, #2
 80054a8:	9307      	strge	r3, [sp, #28]
 80054aa:	9307      	strlt	r3, [sp, #28]
 80054ac:	bfb8      	it	lt
 80054ae:	9204      	strlt	r2, [sp, #16]
 80054b0:	7823      	ldrb	r3, [r4, #0]
 80054b2:	2b2e      	cmp	r3, #46	; 0x2e
 80054b4:	d10c      	bne.n	80054d0 <_svfiprintf_r+0x130>
 80054b6:	7863      	ldrb	r3, [r4, #1]
 80054b8:	2b2a      	cmp	r3, #42	; 0x2a
 80054ba:	d134      	bne.n	8005526 <_svfiprintf_r+0x186>
 80054bc:	9b03      	ldr	r3, [sp, #12]
 80054be:	1d1a      	adds	r2, r3, #4
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	9203      	str	r2, [sp, #12]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	bfb8      	it	lt
 80054c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80054cc:	3402      	adds	r4, #2
 80054ce:	9305      	str	r3, [sp, #20]
 80054d0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005598 <_svfiprintf_r+0x1f8>
 80054d4:	7821      	ldrb	r1, [r4, #0]
 80054d6:	2203      	movs	r2, #3
 80054d8:	4650      	mov	r0, sl
 80054da:	f7fa fe79 	bl	80001d0 <memchr>
 80054de:	b138      	cbz	r0, 80054f0 <_svfiprintf_r+0x150>
 80054e0:	9b04      	ldr	r3, [sp, #16]
 80054e2:	eba0 000a 	sub.w	r0, r0, sl
 80054e6:	2240      	movs	r2, #64	; 0x40
 80054e8:	4082      	lsls	r2, r0
 80054ea:	4313      	orrs	r3, r2
 80054ec:	3401      	adds	r4, #1
 80054ee:	9304      	str	r3, [sp, #16]
 80054f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054f4:	4825      	ldr	r0, [pc, #148]	; (800558c <_svfiprintf_r+0x1ec>)
 80054f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054fa:	2206      	movs	r2, #6
 80054fc:	f7fa fe68 	bl	80001d0 <memchr>
 8005500:	2800      	cmp	r0, #0
 8005502:	d038      	beq.n	8005576 <_svfiprintf_r+0x1d6>
 8005504:	4b22      	ldr	r3, [pc, #136]	; (8005590 <_svfiprintf_r+0x1f0>)
 8005506:	bb1b      	cbnz	r3, 8005550 <_svfiprintf_r+0x1b0>
 8005508:	9b03      	ldr	r3, [sp, #12]
 800550a:	3307      	adds	r3, #7
 800550c:	f023 0307 	bic.w	r3, r3, #7
 8005510:	3308      	adds	r3, #8
 8005512:	9303      	str	r3, [sp, #12]
 8005514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005516:	4433      	add	r3, r6
 8005518:	9309      	str	r3, [sp, #36]	; 0x24
 800551a:	e768      	b.n	80053ee <_svfiprintf_r+0x4e>
 800551c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005520:	460c      	mov	r4, r1
 8005522:	2001      	movs	r0, #1
 8005524:	e7a6      	b.n	8005474 <_svfiprintf_r+0xd4>
 8005526:	2300      	movs	r3, #0
 8005528:	3401      	adds	r4, #1
 800552a:	9305      	str	r3, [sp, #20]
 800552c:	4619      	mov	r1, r3
 800552e:	f04f 0c0a 	mov.w	ip, #10
 8005532:	4620      	mov	r0, r4
 8005534:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005538:	3a30      	subs	r2, #48	; 0x30
 800553a:	2a09      	cmp	r2, #9
 800553c:	d903      	bls.n	8005546 <_svfiprintf_r+0x1a6>
 800553e:	2b00      	cmp	r3, #0
 8005540:	d0c6      	beq.n	80054d0 <_svfiprintf_r+0x130>
 8005542:	9105      	str	r1, [sp, #20]
 8005544:	e7c4      	b.n	80054d0 <_svfiprintf_r+0x130>
 8005546:	fb0c 2101 	mla	r1, ip, r1, r2
 800554a:	4604      	mov	r4, r0
 800554c:	2301      	movs	r3, #1
 800554e:	e7f0      	b.n	8005532 <_svfiprintf_r+0x192>
 8005550:	ab03      	add	r3, sp, #12
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	462a      	mov	r2, r5
 8005556:	4b0f      	ldr	r3, [pc, #60]	; (8005594 <_svfiprintf_r+0x1f4>)
 8005558:	a904      	add	r1, sp, #16
 800555a:	4638      	mov	r0, r7
 800555c:	f3af 8000 	nop.w
 8005560:	1c42      	adds	r2, r0, #1
 8005562:	4606      	mov	r6, r0
 8005564:	d1d6      	bne.n	8005514 <_svfiprintf_r+0x174>
 8005566:	89ab      	ldrh	r3, [r5, #12]
 8005568:	065b      	lsls	r3, r3, #25
 800556a:	f53f af2d 	bmi.w	80053c8 <_svfiprintf_r+0x28>
 800556e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005570:	b01d      	add	sp, #116	; 0x74
 8005572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005576:	ab03      	add	r3, sp, #12
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	462a      	mov	r2, r5
 800557c:	4b05      	ldr	r3, [pc, #20]	; (8005594 <_svfiprintf_r+0x1f4>)
 800557e:	a904      	add	r1, sp, #16
 8005580:	4638      	mov	r0, r7
 8005582:	f000 f879 	bl	8005678 <_printf_i>
 8005586:	e7eb      	b.n	8005560 <_svfiprintf_r+0x1c0>
 8005588:	080059e8 	.word	0x080059e8
 800558c:	080059f2 	.word	0x080059f2
 8005590:	00000000 	.word	0x00000000
 8005594:	080052ed 	.word	0x080052ed
 8005598:	080059ee 	.word	0x080059ee

0800559c <_printf_common>:
 800559c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055a0:	4616      	mov	r6, r2
 80055a2:	4699      	mov	r9, r3
 80055a4:	688a      	ldr	r2, [r1, #8]
 80055a6:	690b      	ldr	r3, [r1, #16]
 80055a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055ac:	4293      	cmp	r3, r2
 80055ae:	bfb8      	it	lt
 80055b0:	4613      	movlt	r3, r2
 80055b2:	6033      	str	r3, [r6, #0]
 80055b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055b8:	4607      	mov	r7, r0
 80055ba:	460c      	mov	r4, r1
 80055bc:	b10a      	cbz	r2, 80055c2 <_printf_common+0x26>
 80055be:	3301      	adds	r3, #1
 80055c0:	6033      	str	r3, [r6, #0]
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	0699      	lsls	r1, r3, #26
 80055c6:	bf42      	ittt	mi
 80055c8:	6833      	ldrmi	r3, [r6, #0]
 80055ca:	3302      	addmi	r3, #2
 80055cc:	6033      	strmi	r3, [r6, #0]
 80055ce:	6825      	ldr	r5, [r4, #0]
 80055d0:	f015 0506 	ands.w	r5, r5, #6
 80055d4:	d106      	bne.n	80055e4 <_printf_common+0x48>
 80055d6:	f104 0a19 	add.w	sl, r4, #25
 80055da:	68e3      	ldr	r3, [r4, #12]
 80055dc:	6832      	ldr	r2, [r6, #0]
 80055de:	1a9b      	subs	r3, r3, r2
 80055e0:	42ab      	cmp	r3, r5
 80055e2:	dc26      	bgt.n	8005632 <_printf_common+0x96>
 80055e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055e8:	1e13      	subs	r3, r2, #0
 80055ea:	6822      	ldr	r2, [r4, #0]
 80055ec:	bf18      	it	ne
 80055ee:	2301      	movne	r3, #1
 80055f0:	0692      	lsls	r2, r2, #26
 80055f2:	d42b      	bmi.n	800564c <_printf_common+0xb0>
 80055f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055f8:	4649      	mov	r1, r9
 80055fa:	4638      	mov	r0, r7
 80055fc:	47c0      	blx	r8
 80055fe:	3001      	adds	r0, #1
 8005600:	d01e      	beq.n	8005640 <_printf_common+0xa4>
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	6922      	ldr	r2, [r4, #16]
 8005606:	f003 0306 	and.w	r3, r3, #6
 800560a:	2b04      	cmp	r3, #4
 800560c:	bf02      	ittt	eq
 800560e:	68e5      	ldreq	r5, [r4, #12]
 8005610:	6833      	ldreq	r3, [r6, #0]
 8005612:	1aed      	subeq	r5, r5, r3
 8005614:	68a3      	ldr	r3, [r4, #8]
 8005616:	bf0c      	ite	eq
 8005618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800561c:	2500      	movne	r5, #0
 800561e:	4293      	cmp	r3, r2
 8005620:	bfc4      	itt	gt
 8005622:	1a9b      	subgt	r3, r3, r2
 8005624:	18ed      	addgt	r5, r5, r3
 8005626:	2600      	movs	r6, #0
 8005628:	341a      	adds	r4, #26
 800562a:	42b5      	cmp	r5, r6
 800562c:	d11a      	bne.n	8005664 <_printf_common+0xc8>
 800562e:	2000      	movs	r0, #0
 8005630:	e008      	b.n	8005644 <_printf_common+0xa8>
 8005632:	2301      	movs	r3, #1
 8005634:	4652      	mov	r2, sl
 8005636:	4649      	mov	r1, r9
 8005638:	4638      	mov	r0, r7
 800563a:	47c0      	blx	r8
 800563c:	3001      	adds	r0, #1
 800563e:	d103      	bne.n	8005648 <_printf_common+0xac>
 8005640:	f04f 30ff 	mov.w	r0, #4294967295
 8005644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005648:	3501      	adds	r5, #1
 800564a:	e7c6      	b.n	80055da <_printf_common+0x3e>
 800564c:	18e1      	adds	r1, r4, r3
 800564e:	1c5a      	adds	r2, r3, #1
 8005650:	2030      	movs	r0, #48	; 0x30
 8005652:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005656:	4422      	add	r2, r4
 8005658:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800565c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005660:	3302      	adds	r3, #2
 8005662:	e7c7      	b.n	80055f4 <_printf_common+0x58>
 8005664:	2301      	movs	r3, #1
 8005666:	4622      	mov	r2, r4
 8005668:	4649      	mov	r1, r9
 800566a:	4638      	mov	r0, r7
 800566c:	47c0      	blx	r8
 800566e:	3001      	adds	r0, #1
 8005670:	d0e6      	beq.n	8005640 <_printf_common+0xa4>
 8005672:	3601      	adds	r6, #1
 8005674:	e7d9      	b.n	800562a <_printf_common+0x8e>
	...

08005678 <_printf_i>:
 8005678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800567c:	7e0f      	ldrb	r7, [r1, #24]
 800567e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005680:	2f78      	cmp	r7, #120	; 0x78
 8005682:	4691      	mov	r9, r2
 8005684:	4680      	mov	r8, r0
 8005686:	460c      	mov	r4, r1
 8005688:	469a      	mov	sl, r3
 800568a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800568e:	d807      	bhi.n	80056a0 <_printf_i+0x28>
 8005690:	2f62      	cmp	r7, #98	; 0x62
 8005692:	d80a      	bhi.n	80056aa <_printf_i+0x32>
 8005694:	2f00      	cmp	r7, #0
 8005696:	f000 80d4 	beq.w	8005842 <_printf_i+0x1ca>
 800569a:	2f58      	cmp	r7, #88	; 0x58
 800569c:	f000 80c0 	beq.w	8005820 <_printf_i+0x1a8>
 80056a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056a8:	e03a      	b.n	8005720 <_printf_i+0xa8>
 80056aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056ae:	2b15      	cmp	r3, #21
 80056b0:	d8f6      	bhi.n	80056a0 <_printf_i+0x28>
 80056b2:	a101      	add	r1, pc, #4	; (adr r1, 80056b8 <_printf_i+0x40>)
 80056b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056b8:	08005711 	.word	0x08005711
 80056bc:	08005725 	.word	0x08005725
 80056c0:	080056a1 	.word	0x080056a1
 80056c4:	080056a1 	.word	0x080056a1
 80056c8:	080056a1 	.word	0x080056a1
 80056cc:	080056a1 	.word	0x080056a1
 80056d0:	08005725 	.word	0x08005725
 80056d4:	080056a1 	.word	0x080056a1
 80056d8:	080056a1 	.word	0x080056a1
 80056dc:	080056a1 	.word	0x080056a1
 80056e0:	080056a1 	.word	0x080056a1
 80056e4:	08005829 	.word	0x08005829
 80056e8:	08005751 	.word	0x08005751
 80056ec:	080057e3 	.word	0x080057e3
 80056f0:	080056a1 	.word	0x080056a1
 80056f4:	080056a1 	.word	0x080056a1
 80056f8:	0800584b 	.word	0x0800584b
 80056fc:	080056a1 	.word	0x080056a1
 8005700:	08005751 	.word	0x08005751
 8005704:	080056a1 	.word	0x080056a1
 8005708:	080056a1 	.word	0x080056a1
 800570c:	080057eb 	.word	0x080057eb
 8005710:	682b      	ldr	r3, [r5, #0]
 8005712:	1d1a      	adds	r2, r3, #4
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	602a      	str	r2, [r5, #0]
 8005718:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800571c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005720:	2301      	movs	r3, #1
 8005722:	e09f      	b.n	8005864 <_printf_i+0x1ec>
 8005724:	6820      	ldr	r0, [r4, #0]
 8005726:	682b      	ldr	r3, [r5, #0]
 8005728:	0607      	lsls	r7, r0, #24
 800572a:	f103 0104 	add.w	r1, r3, #4
 800572e:	6029      	str	r1, [r5, #0]
 8005730:	d501      	bpl.n	8005736 <_printf_i+0xbe>
 8005732:	681e      	ldr	r6, [r3, #0]
 8005734:	e003      	b.n	800573e <_printf_i+0xc6>
 8005736:	0646      	lsls	r6, r0, #25
 8005738:	d5fb      	bpl.n	8005732 <_printf_i+0xba>
 800573a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800573e:	2e00      	cmp	r6, #0
 8005740:	da03      	bge.n	800574a <_printf_i+0xd2>
 8005742:	232d      	movs	r3, #45	; 0x2d
 8005744:	4276      	negs	r6, r6
 8005746:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800574a:	485a      	ldr	r0, [pc, #360]	; (80058b4 <_printf_i+0x23c>)
 800574c:	230a      	movs	r3, #10
 800574e:	e012      	b.n	8005776 <_printf_i+0xfe>
 8005750:	682b      	ldr	r3, [r5, #0]
 8005752:	6820      	ldr	r0, [r4, #0]
 8005754:	1d19      	adds	r1, r3, #4
 8005756:	6029      	str	r1, [r5, #0]
 8005758:	0605      	lsls	r5, r0, #24
 800575a:	d501      	bpl.n	8005760 <_printf_i+0xe8>
 800575c:	681e      	ldr	r6, [r3, #0]
 800575e:	e002      	b.n	8005766 <_printf_i+0xee>
 8005760:	0641      	lsls	r1, r0, #25
 8005762:	d5fb      	bpl.n	800575c <_printf_i+0xe4>
 8005764:	881e      	ldrh	r6, [r3, #0]
 8005766:	4853      	ldr	r0, [pc, #332]	; (80058b4 <_printf_i+0x23c>)
 8005768:	2f6f      	cmp	r7, #111	; 0x6f
 800576a:	bf0c      	ite	eq
 800576c:	2308      	moveq	r3, #8
 800576e:	230a      	movne	r3, #10
 8005770:	2100      	movs	r1, #0
 8005772:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005776:	6865      	ldr	r5, [r4, #4]
 8005778:	60a5      	str	r5, [r4, #8]
 800577a:	2d00      	cmp	r5, #0
 800577c:	bfa2      	ittt	ge
 800577e:	6821      	ldrge	r1, [r4, #0]
 8005780:	f021 0104 	bicge.w	r1, r1, #4
 8005784:	6021      	strge	r1, [r4, #0]
 8005786:	b90e      	cbnz	r6, 800578c <_printf_i+0x114>
 8005788:	2d00      	cmp	r5, #0
 800578a:	d04b      	beq.n	8005824 <_printf_i+0x1ac>
 800578c:	4615      	mov	r5, r2
 800578e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005792:	fb03 6711 	mls	r7, r3, r1, r6
 8005796:	5dc7      	ldrb	r7, [r0, r7]
 8005798:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800579c:	4637      	mov	r7, r6
 800579e:	42bb      	cmp	r3, r7
 80057a0:	460e      	mov	r6, r1
 80057a2:	d9f4      	bls.n	800578e <_printf_i+0x116>
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d10b      	bne.n	80057c0 <_printf_i+0x148>
 80057a8:	6823      	ldr	r3, [r4, #0]
 80057aa:	07de      	lsls	r6, r3, #31
 80057ac:	d508      	bpl.n	80057c0 <_printf_i+0x148>
 80057ae:	6923      	ldr	r3, [r4, #16]
 80057b0:	6861      	ldr	r1, [r4, #4]
 80057b2:	4299      	cmp	r1, r3
 80057b4:	bfde      	ittt	le
 80057b6:	2330      	movle	r3, #48	; 0x30
 80057b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80057c0:	1b52      	subs	r2, r2, r5
 80057c2:	6122      	str	r2, [r4, #16]
 80057c4:	f8cd a000 	str.w	sl, [sp]
 80057c8:	464b      	mov	r3, r9
 80057ca:	aa03      	add	r2, sp, #12
 80057cc:	4621      	mov	r1, r4
 80057ce:	4640      	mov	r0, r8
 80057d0:	f7ff fee4 	bl	800559c <_printf_common>
 80057d4:	3001      	adds	r0, #1
 80057d6:	d14a      	bne.n	800586e <_printf_i+0x1f6>
 80057d8:	f04f 30ff 	mov.w	r0, #4294967295
 80057dc:	b004      	add	sp, #16
 80057de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057e2:	6823      	ldr	r3, [r4, #0]
 80057e4:	f043 0320 	orr.w	r3, r3, #32
 80057e8:	6023      	str	r3, [r4, #0]
 80057ea:	4833      	ldr	r0, [pc, #204]	; (80058b8 <_printf_i+0x240>)
 80057ec:	2778      	movs	r7, #120	; 0x78
 80057ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80057f2:	6823      	ldr	r3, [r4, #0]
 80057f4:	6829      	ldr	r1, [r5, #0]
 80057f6:	061f      	lsls	r7, r3, #24
 80057f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80057fc:	d402      	bmi.n	8005804 <_printf_i+0x18c>
 80057fe:	065f      	lsls	r7, r3, #25
 8005800:	bf48      	it	mi
 8005802:	b2b6      	uxthmi	r6, r6
 8005804:	07df      	lsls	r7, r3, #31
 8005806:	bf48      	it	mi
 8005808:	f043 0320 	orrmi.w	r3, r3, #32
 800580c:	6029      	str	r1, [r5, #0]
 800580e:	bf48      	it	mi
 8005810:	6023      	strmi	r3, [r4, #0]
 8005812:	b91e      	cbnz	r6, 800581c <_printf_i+0x1a4>
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	f023 0320 	bic.w	r3, r3, #32
 800581a:	6023      	str	r3, [r4, #0]
 800581c:	2310      	movs	r3, #16
 800581e:	e7a7      	b.n	8005770 <_printf_i+0xf8>
 8005820:	4824      	ldr	r0, [pc, #144]	; (80058b4 <_printf_i+0x23c>)
 8005822:	e7e4      	b.n	80057ee <_printf_i+0x176>
 8005824:	4615      	mov	r5, r2
 8005826:	e7bd      	b.n	80057a4 <_printf_i+0x12c>
 8005828:	682b      	ldr	r3, [r5, #0]
 800582a:	6826      	ldr	r6, [r4, #0]
 800582c:	6961      	ldr	r1, [r4, #20]
 800582e:	1d18      	adds	r0, r3, #4
 8005830:	6028      	str	r0, [r5, #0]
 8005832:	0635      	lsls	r5, r6, #24
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	d501      	bpl.n	800583c <_printf_i+0x1c4>
 8005838:	6019      	str	r1, [r3, #0]
 800583a:	e002      	b.n	8005842 <_printf_i+0x1ca>
 800583c:	0670      	lsls	r0, r6, #25
 800583e:	d5fb      	bpl.n	8005838 <_printf_i+0x1c0>
 8005840:	8019      	strh	r1, [r3, #0]
 8005842:	2300      	movs	r3, #0
 8005844:	6123      	str	r3, [r4, #16]
 8005846:	4615      	mov	r5, r2
 8005848:	e7bc      	b.n	80057c4 <_printf_i+0x14c>
 800584a:	682b      	ldr	r3, [r5, #0]
 800584c:	1d1a      	adds	r2, r3, #4
 800584e:	602a      	str	r2, [r5, #0]
 8005850:	681d      	ldr	r5, [r3, #0]
 8005852:	6862      	ldr	r2, [r4, #4]
 8005854:	2100      	movs	r1, #0
 8005856:	4628      	mov	r0, r5
 8005858:	f7fa fcba 	bl	80001d0 <memchr>
 800585c:	b108      	cbz	r0, 8005862 <_printf_i+0x1ea>
 800585e:	1b40      	subs	r0, r0, r5
 8005860:	6060      	str	r0, [r4, #4]
 8005862:	6863      	ldr	r3, [r4, #4]
 8005864:	6123      	str	r3, [r4, #16]
 8005866:	2300      	movs	r3, #0
 8005868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800586c:	e7aa      	b.n	80057c4 <_printf_i+0x14c>
 800586e:	6923      	ldr	r3, [r4, #16]
 8005870:	462a      	mov	r2, r5
 8005872:	4649      	mov	r1, r9
 8005874:	4640      	mov	r0, r8
 8005876:	47d0      	blx	sl
 8005878:	3001      	adds	r0, #1
 800587a:	d0ad      	beq.n	80057d8 <_printf_i+0x160>
 800587c:	6823      	ldr	r3, [r4, #0]
 800587e:	079b      	lsls	r3, r3, #30
 8005880:	d413      	bmi.n	80058aa <_printf_i+0x232>
 8005882:	68e0      	ldr	r0, [r4, #12]
 8005884:	9b03      	ldr	r3, [sp, #12]
 8005886:	4298      	cmp	r0, r3
 8005888:	bfb8      	it	lt
 800588a:	4618      	movlt	r0, r3
 800588c:	e7a6      	b.n	80057dc <_printf_i+0x164>
 800588e:	2301      	movs	r3, #1
 8005890:	4632      	mov	r2, r6
 8005892:	4649      	mov	r1, r9
 8005894:	4640      	mov	r0, r8
 8005896:	47d0      	blx	sl
 8005898:	3001      	adds	r0, #1
 800589a:	d09d      	beq.n	80057d8 <_printf_i+0x160>
 800589c:	3501      	adds	r5, #1
 800589e:	68e3      	ldr	r3, [r4, #12]
 80058a0:	9903      	ldr	r1, [sp, #12]
 80058a2:	1a5b      	subs	r3, r3, r1
 80058a4:	42ab      	cmp	r3, r5
 80058a6:	dcf2      	bgt.n	800588e <_printf_i+0x216>
 80058a8:	e7eb      	b.n	8005882 <_printf_i+0x20a>
 80058aa:	2500      	movs	r5, #0
 80058ac:	f104 0619 	add.w	r6, r4, #25
 80058b0:	e7f5      	b.n	800589e <_printf_i+0x226>
 80058b2:	bf00      	nop
 80058b4:	080059f9 	.word	0x080059f9
 80058b8:	08005a0a 	.word	0x08005a0a

080058bc <memmove>:
 80058bc:	4288      	cmp	r0, r1
 80058be:	b510      	push	{r4, lr}
 80058c0:	eb01 0402 	add.w	r4, r1, r2
 80058c4:	d902      	bls.n	80058cc <memmove+0x10>
 80058c6:	4284      	cmp	r4, r0
 80058c8:	4623      	mov	r3, r4
 80058ca:	d807      	bhi.n	80058dc <memmove+0x20>
 80058cc:	1e43      	subs	r3, r0, #1
 80058ce:	42a1      	cmp	r1, r4
 80058d0:	d008      	beq.n	80058e4 <memmove+0x28>
 80058d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058da:	e7f8      	b.n	80058ce <memmove+0x12>
 80058dc:	4402      	add	r2, r0
 80058de:	4601      	mov	r1, r0
 80058e0:	428a      	cmp	r2, r1
 80058e2:	d100      	bne.n	80058e6 <memmove+0x2a>
 80058e4:	bd10      	pop	{r4, pc}
 80058e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058ee:	e7f7      	b.n	80058e0 <memmove+0x24>

080058f0 <_sbrk_r>:
 80058f0:	b538      	push	{r3, r4, r5, lr}
 80058f2:	4d06      	ldr	r5, [pc, #24]	; (800590c <_sbrk_r+0x1c>)
 80058f4:	2300      	movs	r3, #0
 80058f6:	4604      	mov	r4, r0
 80058f8:	4608      	mov	r0, r1
 80058fa:	602b      	str	r3, [r5, #0]
 80058fc:	f7fb fd1c 	bl	8001338 <_sbrk>
 8005900:	1c43      	adds	r3, r0, #1
 8005902:	d102      	bne.n	800590a <_sbrk_r+0x1a>
 8005904:	682b      	ldr	r3, [r5, #0]
 8005906:	b103      	cbz	r3, 800590a <_sbrk_r+0x1a>
 8005908:	6023      	str	r3, [r4, #0]
 800590a:	bd38      	pop	{r3, r4, r5, pc}
 800590c:	200003ec 	.word	0x200003ec

08005910 <memcpy>:
 8005910:	440a      	add	r2, r1
 8005912:	4291      	cmp	r1, r2
 8005914:	f100 33ff 	add.w	r3, r0, #4294967295
 8005918:	d100      	bne.n	800591c <memcpy+0xc>
 800591a:	4770      	bx	lr
 800591c:	b510      	push	{r4, lr}
 800591e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005922:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005926:	4291      	cmp	r1, r2
 8005928:	d1f9      	bne.n	800591e <memcpy+0xe>
 800592a:	bd10      	pop	{r4, pc}

0800592c <_realloc_r>:
 800592c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005930:	4680      	mov	r8, r0
 8005932:	4614      	mov	r4, r2
 8005934:	460e      	mov	r6, r1
 8005936:	b921      	cbnz	r1, 8005942 <_realloc_r+0x16>
 8005938:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800593c:	4611      	mov	r1, r2
 800593e:	f7ff bc49 	b.w	80051d4 <_malloc_r>
 8005942:	b92a      	cbnz	r2, 8005950 <_realloc_r+0x24>
 8005944:	f7ff fbda 	bl	80050fc <_free_r>
 8005948:	4625      	mov	r5, r4
 800594a:	4628      	mov	r0, r5
 800594c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005950:	f000 f81b 	bl	800598a <_malloc_usable_size_r>
 8005954:	4284      	cmp	r4, r0
 8005956:	4607      	mov	r7, r0
 8005958:	d802      	bhi.n	8005960 <_realloc_r+0x34>
 800595a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800595e:	d812      	bhi.n	8005986 <_realloc_r+0x5a>
 8005960:	4621      	mov	r1, r4
 8005962:	4640      	mov	r0, r8
 8005964:	f7ff fc36 	bl	80051d4 <_malloc_r>
 8005968:	4605      	mov	r5, r0
 800596a:	2800      	cmp	r0, #0
 800596c:	d0ed      	beq.n	800594a <_realloc_r+0x1e>
 800596e:	42bc      	cmp	r4, r7
 8005970:	4622      	mov	r2, r4
 8005972:	4631      	mov	r1, r6
 8005974:	bf28      	it	cs
 8005976:	463a      	movcs	r2, r7
 8005978:	f7ff ffca 	bl	8005910 <memcpy>
 800597c:	4631      	mov	r1, r6
 800597e:	4640      	mov	r0, r8
 8005980:	f7ff fbbc 	bl	80050fc <_free_r>
 8005984:	e7e1      	b.n	800594a <_realloc_r+0x1e>
 8005986:	4635      	mov	r5, r6
 8005988:	e7df      	b.n	800594a <_realloc_r+0x1e>

0800598a <_malloc_usable_size_r>:
 800598a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800598e:	1f18      	subs	r0, r3, #4
 8005990:	2b00      	cmp	r3, #0
 8005992:	bfbc      	itt	lt
 8005994:	580b      	ldrlt	r3, [r1, r0]
 8005996:	18c0      	addlt	r0, r0, r3
 8005998:	4770      	bx	lr
	...

0800599c <_init>:
 800599c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800599e:	bf00      	nop
 80059a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059a2:	bc08      	pop	{r3}
 80059a4:	469e      	mov	lr, r3
 80059a6:	4770      	bx	lr

080059a8 <_fini>:
 80059a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059aa:	bf00      	nop
 80059ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ae:	bc08      	pop	{r3}
 80059b0:	469e      	mov	lr, r3
 80059b2:	4770      	bx	lr
