
DATN_STM32_SLAVE3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aa4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08005bb4  08005bb4  00015bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ce0  08005ce0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08005ce0  08005ce0  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ce0  08005ce0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ce0  08005ce0  00015ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ce4  08005ce4  00015ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005ce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  2000006c  08005d54  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  08005d54  000203a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e107  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f14  00000000  00000000  0002e1df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd0  00000000  00000000  000300f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af9  00000000  00000000  00030ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018001  00000000  00000000  000319c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ed82  00000000  00000000  000499c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d646  00000000  00000000  00058744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f44  00000000  00000000  000e5d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000e9cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005b9c 	.word	0x08005b9c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08005b9c 	.word	0x08005b9c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_frsub>:
 80009dc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009e0:	e002      	b.n	80009e8 <__addsf3>
 80009e2:	bf00      	nop

080009e4 <__aeabi_fsub>:
 80009e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009e8 <__addsf3>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	bf1f      	itttt	ne
 80009ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009f0:	ea92 0f03 	teqne	r2, r3
 80009f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fc:	d06a      	beq.n	8000ad4 <__addsf3+0xec>
 80009fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a06:	bfc1      	itttt	gt
 8000a08:	18d2      	addgt	r2, r2, r3
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	4048      	eorgt	r0, r1
 8000a0e:	4041      	eorgt	r1, r0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	2b19      	cmp	r3, #25
 8000a16:	bf88      	it	hi
 8000a18:	4770      	bxhi	lr
 8000a1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4249      	negne	r1, r1
 8000a3a:	ea92 0f03 	teq	r2, r3
 8000a3e:	d03f      	beq.n	8000ac0 <__addsf3+0xd8>
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	fa41 fc03 	asr.w	ip, r1, r3
 8000a48:	eb10 000c 	adds.w	r0, r0, ip
 8000a4c:	f1c3 0320 	rsb	r3, r3, #32
 8000a50:	fa01 f103 	lsl.w	r1, r1, r3
 8000a54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__addsf3+0x78>
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a64:	d313      	bcc.n	8000a8e <__addsf3+0xa6>
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a6a:	d306      	bcc.n	8000a7a <__addsf3+0x92>
 8000a6c:	0840      	lsrs	r0, r0, #1
 8000a6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a72:	f102 0201 	add.w	r2, r2, #1
 8000a76:	2afe      	cmp	r2, #254	; 0xfe
 8000a78:	d251      	bcs.n	8000b1e <__addsf3+0x136>
 8000a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a82:	bf08      	it	eq
 8000a84:	f020 0001 	biceq.w	r0, r0, #1
 8000a88:	ea40 0003 	orr.w	r0, r0, r3
 8000a8c:	4770      	bx	lr
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	eb40 0000 	adc.w	r0, r0, r0
 8000a94:	3a01      	subs	r2, #1
 8000a96:	bf28      	it	cs
 8000a98:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a9c:	d2ed      	bcs.n	8000a7a <__addsf3+0x92>
 8000a9e:	fab0 fc80 	clz	ip, r0
 8000aa2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aae:	bfaa      	itet	ge
 8000ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab4:	4252      	neglt	r2, r2
 8000ab6:	4318      	orrge	r0, r3
 8000ab8:	bfbc      	itt	lt
 8000aba:	40d0      	lsrlt	r0, r2
 8000abc:	4318      	orrlt	r0, r3
 8000abe:	4770      	bx	lr
 8000ac0:	f092 0f00 	teq	r2, #0
 8000ac4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ac8:	bf06      	itte	eq
 8000aca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ace:	3201      	addeq	r2, #1
 8000ad0:	3b01      	subne	r3, #1
 8000ad2:	e7b5      	b.n	8000a40 <__addsf3+0x58>
 8000ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	bf18      	it	ne
 8000ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae2:	d021      	beq.n	8000b28 <__addsf3+0x140>
 8000ae4:	ea92 0f03 	teq	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__addsf3+0x10c>
 8000aea:	f092 0f00 	teq	r2, #0
 8000aee:	bf08      	it	eq
 8000af0:	4608      	moveq	r0, r1
 8000af2:	4770      	bx	lr
 8000af4:	ea90 0f01 	teq	r0, r1
 8000af8:	bf1c      	itt	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bxne	lr
 8000afe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b02:	d104      	bne.n	8000b0e <__addsf3+0x126>
 8000b04:	0040      	lsls	r0, r0, #1
 8000b06:	bf28      	it	cs
 8000b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	4770      	bx	lr
 8000b0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b12:	bf3c      	itt	cc
 8000b14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bxcc	lr
 8000b1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b26:	4770      	bx	lr
 8000b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b2c:	bf16      	itet	ne
 8000b2e:	4608      	movne	r0, r1
 8000b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b34:	4601      	movne	r1, r0
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	bf06      	itte	eq
 8000b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3e:	ea90 0f01 	teqeq	r0, r1
 8000b42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ui2f>:
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e004      	b.n	8000b58 <__aeabi_i2f+0x8>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_i2f>:
 8000b50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	bf48      	it	mi
 8000b56:	4240      	negmi	r0, r0
 8000b58:	ea5f 0c00 	movs.w	ip, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	e01c      	b.n	8000ba6 <__aeabi_l2f+0x2a>

08000b6c <__aeabi_ul2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e00a      	b.n	8000b90 <__aeabi_l2f+0x14>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_l2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_l2f+0x14>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	ea5f 0c01 	movs.w	ip, r1
 8000b94:	bf02      	ittt	eq
 8000b96:	4684      	moveq	ip, r0
 8000b98:	4601      	moveq	r1, r0
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000baa:	fabc f28c 	clz	r2, ip
 8000bae:	3a08      	subs	r2, #8
 8000bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb4:	db10      	blt.n	8000bd8 <__aeabi_l2f+0x5c>
 8000bb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f102 0220 	add.w	r2, r2, #32
 8000bdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_fmul>:
 8000bf8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c00:	bf1e      	ittt	ne
 8000c02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c06:	ea92 0f0c 	teqne	r2, ip
 8000c0a:	ea93 0f0c 	teqne	r3, ip
 8000c0e:	d06f      	beq.n	8000cf0 <__aeabi_fmul+0xf8>
 8000c10:	441a      	add	r2, r3
 8000c12:	ea80 0c01 	eor.w	ip, r0, r1
 8000c16:	0240      	lsls	r0, r0, #9
 8000c18:	bf18      	it	ne
 8000c1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c1e:	d01e      	beq.n	8000c5e <__aeabi_fmul+0x66>
 8000c20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c34:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c38:	bf3e      	ittt	cc
 8000c3a:	0049      	lslcc	r1, r1, #1
 8000c3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c40:	005b      	lslcc	r3, r3, #1
 8000c42:	ea40 0001 	orr.w	r0, r0, r1
 8000c46:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c4a:	2afd      	cmp	r2, #253	; 0xfd
 8000c4c:	d81d      	bhi.n	8000c8a <__aeabi_fmul+0x92>
 8000c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c56:	bf08      	it	eq
 8000c58:	f020 0001 	biceq.w	r0, r0, #1
 8000c5c:	4770      	bx	lr
 8000c5e:	f090 0f00 	teq	r0, #0
 8000c62:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c66:	bf08      	it	eq
 8000c68:	0249      	lsleq	r1, r1, #9
 8000c6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c72:	3a7f      	subs	r2, #127	; 0x7f
 8000c74:	bfc2      	ittt	gt
 8000c76:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c7e:	4770      	bxgt	lr
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	dc5d      	bgt.n	8000d48 <__aeabi_fmul+0x150>
 8000c8c:	f112 0f19 	cmn.w	r2, #25
 8000c90:	bfdc      	itt	le
 8000c92:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c96:	4770      	bxle	lr
 8000c98:	f1c2 0200 	rsb	r2, r2, #0
 8000c9c:	0041      	lsls	r1, r0, #1
 8000c9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000ca2:	f1c2 0220 	rsb	r2, r2, #32
 8000ca6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000caa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cae:	f140 0000 	adc.w	r0, r0, #0
 8000cb2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cb6:	bf08      	it	eq
 8000cb8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cbc:	4770      	bx	lr
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cc6:	bf02      	ittt	eq
 8000cc8:	0040      	lsleq	r0, r0, #1
 8000cca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cce:	3a01      	subeq	r2, #1
 8000cd0:	d0f9      	beq.n	8000cc6 <__aeabi_fmul+0xce>
 8000cd2:	ea40 000c 	orr.w	r0, r0, ip
 8000cd6:	f093 0f00 	teq	r3, #0
 8000cda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cde:	bf02      	ittt	eq
 8000ce0:	0049      	lsleq	r1, r1, #1
 8000ce2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ce6:	3b01      	subeq	r3, #1
 8000ce8:	d0f9      	beq.n	8000cde <__aeabi_fmul+0xe6>
 8000cea:	ea41 010c 	orr.w	r1, r1, ip
 8000cee:	e78f      	b.n	8000c10 <__aeabi_fmul+0x18>
 8000cf0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf4:	ea92 0f0c 	teq	r2, ip
 8000cf8:	bf18      	it	ne
 8000cfa:	ea93 0f0c 	teqne	r3, ip
 8000cfe:	d00a      	beq.n	8000d16 <__aeabi_fmul+0x11e>
 8000d00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d04:	bf18      	it	ne
 8000d06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d0a:	d1d8      	bne.n	8000cbe <__aeabi_fmul+0xc6>
 8000d0c:	ea80 0001 	eor.w	r0, r0, r1
 8000d10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d14:	4770      	bx	lr
 8000d16:	f090 0f00 	teq	r0, #0
 8000d1a:	bf17      	itett	ne
 8000d1c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d20:	4608      	moveq	r0, r1
 8000d22:	f091 0f00 	teqne	r1, #0
 8000d26:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d2a:	d014      	beq.n	8000d56 <__aeabi_fmul+0x15e>
 8000d2c:	ea92 0f0c 	teq	r2, ip
 8000d30:	d101      	bne.n	8000d36 <__aeabi_fmul+0x13e>
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	d10f      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d36:	ea93 0f0c 	teq	r3, ip
 8000d3a:	d103      	bne.n	8000d44 <__aeabi_fmul+0x14c>
 8000d3c:	024b      	lsls	r3, r1, #9
 8000d3e:	bf18      	it	ne
 8000d40:	4608      	movne	r0, r1
 8000d42:	d108      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d44:	ea80 0001 	eor.w	r0, r0, r1
 8000d48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d54:	4770      	bx	lr
 8000d56:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d5a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_fdiv>:
 8000d60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d68:	bf1e      	ittt	ne
 8000d6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6e:	ea92 0f0c 	teqne	r2, ip
 8000d72:	ea93 0f0c 	teqne	r3, ip
 8000d76:	d069      	beq.n	8000e4c <__aeabi_fdiv+0xec>
 8000d78:	eba2 0203 	sub.w	r2, r2, r3
 8000d7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d80:	0249      	lsls	r1, r1, #9
 8000d82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d86:	d037      	beq.n	8000df8 <__aeabi_fdiv+0x98>
 8000d88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	bf38      	it	cc
 8000d9c:	005b      	lslcc	r3, r3, #1
 8000d9e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000da2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000da6:	428b      	cmp	r3, r1
 8000da8:	bf24      	itt	cs
 8000daa:	1a5b      	subcs	r3, r3, r1
 8000dac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000db0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000db4:	bf24      	itt	cs
 8000db6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dbe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dc2:	bf24      	itt	cs
 8000dc4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dcc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dd0:	bf24      	itt	cs
 8000dd2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dd6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000de2:	d1e0      	bne.n	8000da6 <__aeabi_fdiv+0x46>
 8000de4:	2afd      	cmp	r2, #253	; 0xfd
 8000de6:	f63f af50 	bhi.w	8000c8a <__aeabi_fmul+0x92>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df0:	bf08      	it	eq
 8000df2:	f020 0001 	biceq.w	r0, r0, #1
 8000df6:	4770      	bx	lr
 8000df8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dfc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e00:	327f      	adds	r2, #127	; 0x7f
 8000e02:	bfc2      	ittt	gt
 8000e04:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0c:	4770      	bxgt	lr
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	f04f 0300 	mov.w	r3, #0
 8000e16:	3a01      	subs	r2, #1
 8000e18:	e737      	b.n	8000c8a <__aeabi_fmul+0x92>
 8000e1a:	f092 0f00 	teq	r2, #0
 8000e1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0040      	lsleq	r0, r0, #1
 8000e26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2a:	3a01      	subeq	r2, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fdiv+0xc2>
 8000e2e:	ea40 000c 	orr.w	r0, r0, ip
 8000e32:	f093 0f00 	teq	r3, #0
 8000e36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0049      	lsleq	r1, r1, #1
 8000e3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e42:	3b01      	subeq	r3, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fdiv+0xda>
 8000e46:	ea41 010c 	orr.w	r1, r1, ip
 8000e4a:	e795      	b.n	8000d78 <__aeabi_fdiv+0x18>
 8000e4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	d108      	bne.n	8000e68 <__aeabi_fdiv+0x108>
 8000e56:	0242      	lsls	r2, r0, #9
 8000e58:	f47f af7d 	bne.w	8000d56 <__aeabi_fmul+0x15e>
 8000e5c:	ea93 0f0c 	teq	r3, ip
 8000e60:	f47f af70 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e776      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e68:	ea93 0f0c 	teq	r3, ip
 8000e6c:	d104      	bne.n	8000e78 <__aeabi_fdiv+0x118>
 8000e6e:	024b      	lsls	r3, r1, #9
 8000e70:	f43f af4c 	beq.w	8000d0c <__aeabi_fmul+0x114>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e76e      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e7c:	bf18      	it	ne
 8000e7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e82:	d1ca      	bne.n	8000e1a <__aeabi_fdiv+0xba>
 8000e84:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e88:	f47f af5c 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e8c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e90:	f47f af3c 	bne.w	8000d0c <__aeabi_fmul+0x114>
 8000e94:	e75f      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e96:	bf00      	nop

08000e98 <__gesf2>:
 8000e98:	f04f 3cff 	mov.w	ip, #4294967295
 8000e9c:	e006      	b.n	8000eac <__cmpsf2+0x4>
 8000e9e:	bf00      	nop

08000ea0 <__lesf2>:
 8000ea0:	f04f 0c01 	mov.w	ip, #1
 8000ea4:	e002      	b.n	8000eac <__cmpsf2+0x4>
 8000ea6:	bf00      	nop

08000ea8 <__cmpsf2>:
 8000ea8:	f04f 0c01 	mov.w	ip, #1
 8000eac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000eb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ebc:	bf18      	it	ne
 8000ebe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ec2:	d011      	beq.n	8000ee8 <__cmpsf2+0x40>
 8000ec4:	b001      	add	sp, #4
 8000ec6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eca:	bf18      	it	ne
 8000ecc:	ea90 0f01 	teqne	r0, r1
 8000ed0:	bf58      	it	pl
 8000ed2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ed6:	bf88      	it	hi
 8000ed8:	17c8      	asrhi	r0, r1, #31
 8000eda:	bf38      	it	cc
 8000edc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ee0:	bf18      	it	ne
 8000ee2:	f040 0001 	orrne.w	r0, r0, #1
 8000ee6:	4770      	bx	lr
 8000ee8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eec:	d102      	bne.n	8000ef4 <__cmpsf2+0x4c>
 8000eee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ef2:	d105      	bne.n	8000f00 <__cmpsf2+0x58>
 8000ef4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ef8:	d1e4      	bne.n	8000ec4 <__cmpsf2+0x1c>
 8000efa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000efe:	d0e1      	beq.n	8000ec4 <__cmpsf2+0x1c>
 8000f00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <__aeabi_cfrcmple>:
 8000f08:	4684      	mov	ip, r0
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	4661      	mov	r1, ip
 8000f0e:	e7ff      	b.n	8000f10 <__aeabi_cfcmpeq>

08000f10 <__aeabi_cfcmpeq>:
 8000f10:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f12:	f7ff ffc9 	bl	8000ea8 <__cmpsf2>
 8000f16:	2800      	cmp	r0, #0
 8000f18:	bf48      	it	mi
 8000f1a:	f110 0f00 	cmnmi.w	r0, #0
 8000f1e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f20 <__aeabi_fcmpeq>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff fff4 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f28:	bf0c      	ite	eq
 8000f2a:	2001      	moveq	r0, #1
 8000f2c:	2000      	movne	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmplt>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff ffea 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f3c:	bf34      	ite	cc
 8000f3e:	2001      	movcc	r0, #1
 8000f40:	2000      	movcs	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmple>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffe0 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f50:	bf94      	ite	ls
 8000f52:	2001      	movls	r0, #1
 8000f54:	2000      	movhi	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmpge>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffd2 	bl	8000f08 <__aeabi_cfrcmple>
 8000f64:	bf94      	ite	ls
 8000f66:	2001      	movls	r0, #1
 8000f68:	2000      	movhi	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmpgt>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffc8 	bl	8000f08 <__aeabi_cfrcmple>
 8000f78:	bf34      	ite	cc
 8000f7a:	2001      	movcc	r0, #1
 8000f7c:	2000      	movcs	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_f2iz>:
 8000f84:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f8c:	d30f      	bcc.n	8000fae <__aeabi_f2iz+0x2a>
 8000f8e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f96:	d90d      	bls.n	8000fb4 <__aeabi_f2iz+0x30>
 8000f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fa0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fa4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa8:	bf18      	it	ne
 8000faa:	4240      	negne	r0, r0
 8000fac:	4770      	bx	lr
 8000fae:	f04f 0000 	mov.w	r0, #0
 8000fb2:	4770      	bx	lr
 8000fb4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fb8:	d101      	bne.n	8000fbe <__aeabi_f2iz+0x3a>
 8000fba:	0242      	lsls	r2, r0, #9
 8000fbc:	d105      	bne.n	8000fca <__aeabi_f2iz+0x46>
 8000fbe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fc2:	bf08      	it	eq
 8000fc4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fc8:	4770      	bx	lr
 8000fca:	f04f 0000 	mov.w	r0, #0
 8000fce:	4770      	bx	lr

08000fd0 <getCheckSum>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//=================STEP MOTOR ENCODER (Checked)
uint8_t getCheckSum(uint8_t *buffer,uint8_t size)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	70fb      	strb	r3, [r7, #3]
	uint16_t sum=0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0 ;i < size;i++)
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	737b      	strb	r3, [r7, #13]
 8000fe4:	e00a      	b.n	8000ffc <getCheckSum+0x2c>
	{
		sum += buffer[i];
 8000fe6:	7b7b      	ldrb	r3, [r7, #13]
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	4413      	add	r3, r2
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	89fb      	ldrh	r3, [r7, #14]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0 ;i < size;i++)
 8000ff6:	7b7b      	ldrb	r3, [r7, #13]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	737b      	strb	r3, [r7, #13]
 8000ffc:	7b7a      	ldrb	r2, [r7, #13]
 8000ffe:	78fb      	ldrb	r3, [r7, #3]
 8001000:	429a      	cmp	r2, r3
 8001002:	d3f0      	bcc.n	8000fe6 <getCheckSum+0x16>
	}
	return(sum&0xFF);
 8001004:	89fb      	ldrh	r3, [r7, #14]
 8001006:	b2db      	uxtb	r3, r3
}
 8001008:	4618      	mov	r0, r3
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
	...

08001014 <ReadUart>:
void ReadUart(uint8_t l_sAddress)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
	TxDataUart[0] = 0xFA;
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <ReadUart+0x44>)
 8001020:	22fa      	movs	r2, #250	; 0xfa
 8001022:	701a      	strb	r2, [r3, #0]
	TxDataUart[1] = l_sAddress;
 8001024:	4a0c      	ldr	r2, [pc, #48]	; (8001058 <ReadUart+0x44>)
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	7053      	strb	r3, [r2, #1]
	TxDataUart[2] = 0x31; // Position read mode int32 (4 bytes data last)
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <ReadUart+0x44>)
 800102c:	2231      	movs	r2, #49	; 0x31
 800102e:	709a      	strb	r2, [r3, #2]
	TxDataUart[3] = 0;
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <ReadUart+0x44>)
 8001032:	2200      	movs	r2, #0
 8001034:	70da      	strb	r2, [r3, #3]
	TxDataUart[3] = getCheckSum(TxDataUart,TxBufferSize-1);
 8001036:	2103      	movs	r1, #3
 8001038:	4807      	ldr	r0, [pc, #28]	; (8001058 <ReadUart+0x44>)
 800103a:	f7ff ffc9 	bl	8000fd0 <getCheckSum>
 800103e:	4603      	mov	r3, r0
 8001040:	461a      	mov	r2, r3
 8001042:	4b05      	ldr	r3, [pc, #20]	; (8001058 <ReadUart+0x44>)
 8001044:	70da      	strb	r2, [r3, #3]

	HAL_UART_Transmit_IT(&huart1, TxDataUart, TxBufferSize);
 8001046:	2204      	movs	r2, #4
 8001048:	4903      	ldr	r1, [pc, #12]	; (8001058 <ReadUart+0x44>)
 800104a:	4804      	ldr	r0, [pc, #16]	; (800105c <ReadUart+0x48>)
 800104c:	f003 ff7c 	bl	8004f48 <HAL_UART_Transmit_IT>
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200000f0 	.word	0x200000f0
 800105c:	20000224 	.word	0x20000224

08001060 <DecodeData>:
int32_t DecodeData(uint8_t *input)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	int32_t readValue = (int32_t)(
			((uint32_t)input[0] << 24)    |
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	061a      	lsls	r2, r3, #24
			((uint32_t)input[1] << 16)    |
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3301      	adds	r3, #1
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	041b      	lsls	r3, r3, #16
			((uint32_t)input[0] << 24)    |
 8001076:	431a      	orrs	r2, r3
			((uint32_t)input[2] << 8)     |
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3302      	adds	r3, #2
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	021b      	lsls	r3, r3, #8
			((uint32_t)input[1] << 16)    |
 8001080:	4313      	orrs	r3, r2
			((uint32_t)input[3] << 0));
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	3203      	adds	r2, #3
 8001086:	7812      	ldrb	r2, [r2, #0]
			((uint32_t)input[2] << 8)     |
 8001088:	4313      	orrs	r3, r2
	int32_t readValue = (int32_t)(
 800108a:	60fb      	str	r3, [r7, #12]
	return readValue;
 800108c:	68fb      	ldr	r3, [r7, #12]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <EncodeDataDC>:

//=================ENCODER DATA (Checked)
void EncodeDataDC(uint8_t dataSend[])
{
 8001098:	b5b0      	push	{r4, r5, r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	ReadUart(1);
 80010a0:	2001      	movs	r0, #1
 80010a2:	f7ff ffb7 	bl	8001014 <ReadUart>
	if(Check_Data == 1) // du lieu hop le ?
 80010a6:	4b6a      	ldr	r3, [pc, #424]	; (8001250 <EncodeDataDC+0x1b8>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d035      	beq.n	800111a <EncodeDataDC+0x82>
	{
		Check_Data = 0;
 80010ae:	4b68      	ldr	r3, [pc, #416]	; (8001250 <EncodeDataDC+0x1b8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
		float Position = (float)(DecodeData(&RxDataUart[5]));
 80010b4:	4867      	ldr	r0, [pc, #412]	; (8001254 <EncodeDataDC+0x1bc>)
 80010b6:	f7ff ffd3 	bl	8001060 <DecodeData>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fd47 	bl	8000b50 <__aeabi_i2f>
 80010c2:	4603      	mov	r3, r0
 80010c4:	617b      	str	r3, [r7, #20]
		Angle = (Position*PosToDeg*100)/1 - resetAngle; // INT
 80010c6:	6978      	ldr	r0, [r7, #20]
 80010c8:	f7ff f9a6 	bl	8000418 <__aeabi_f2d>
 80010cc:	a35e      	add	r3, pc, #376	; (adr r3, 8001248 <EncodeDataDC+0x1b0>)
 80010ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d2:	f7ff f9f9 	bl	80004c8 <__aeabi_dmul>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4610      	mov	r0, r2
 80010dc:	4619      	mov	r1, r3
 80010de:	f04f 0200 	mov.w	r2, #0
 80010e2:	4b5d      	ldr	r3, [pc, #372]	; (8001258 <EncodeDataDC+0x1c0>)
 80010e4:	f7ff f9f0 	bl	80004c8 <__aeabi_dmul>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4614      	mov	r4, r2
 80010ee:	461d      	mov	r5, r3
 80010f0:	4b5a      	ldr	r3, [pc, #360]	; (800125c <EncodeDataDC+0x1c4>)
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff f97d 	bl	80003f4 <__aeabi_i2d>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4620      	mov	r0, r4
 8001100:	4629      	mov	r1, r5
 8001102:	f7ff f829 	bl	8000158 <__aeabi_dsub>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	4610      	mov	r0, r2
 800110c:	4619      	mov	r1, r3
 800110e:	f7ff fbed 	bl	80008ec <__aeabi_d2iz>
 8001112:	4603      	mov	r3, r0
 8001114:	b21a      	sxth	r2, r3
 8001116:	4b52      	ldr	r3, [pc, #328]	; (8001260 <EncodeDataDC+0x1c8>)
 8001118:	801a      	strh	r2, [r3, #0]
	}
	int IntValue = abs(Angle/100);
 800111a:	4b51      	ldr	r3, [pc, #324]	; (8001260 <EncodeDataDC+0x1c8>)
 800111c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001120:	4a50      	ldr	r2, [pc, #320]	; (8001264 <EncodeDataDC+0x1cc>)
 8001122:	fb82 1203 	smull	r1, r2, r2, r3
 8001126:	1152      	asrs	r2, r2, #5
 8001128:	17db      	asrs	r3, r3, #31
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	b21b      	sxth	r3, r3
 800112e:	2b00      	cmp	r3, #0
 8001130:	bfb8      	it	lt
 8001132:	425b      	neglt	r3, r3
 8001134:	b29b      	uxth	r3, r3
 8001136:	613b      	str	r3, [r7, #16]
	int DecValue = abs(Angle%100);
 8001138:	4b49      	ldr	r3, [pc, #292]	; (8001260 <EncodeDataDC+0x1c8>)
 800113a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113e:	4a49      	ldr	r2, [pc, #292]	; (8001264 <EncodeDataDC+0x1cc>)
 8001140:	fb82 1203 	smull	r1, r2, r2, r3
 8001144:	1151      	asrs	r1, r2, #5
 8001146:	17da      	asrs	r2, r3, #31
 8001148:	1a8a      	subs	r2, r1, r2
 800114a:	2164      	movs	r1, #100	; 0x64
 800114c:	fb01 f202 	mul.w	r2, r1, r2
 8001150:	1a9b      	subs	r3, r3, r2
 8001152:	b21b      	sxth	r3, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	bfb8      	it	lt
 8001158:	425b      	neglt	r3, r3
 800115a:	b29b      	uxth	r3, r3
 800115c:	60fb      	str	r3, [r7, #12]

	dataSend[0] = DecValue/1%10;
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	4b41      	ldr	r3, [pc, #260]	; (8001268 <EncodeDataDC+0x1d0>)
 8001162:	fb83 1302 	smull	r1, r3, r3, r2
 8001166:	1099      	asrs	r1, r3, #2
 8001168:	17d3      	asrs	r3, r2, #31
 800116a:	1ac9      	subs	r1, r1, r3
 800116c:	460b      	mov	r3, r1
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	440b      	add	r3, r1
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	1ad1      	subs	r1, r2, r3
 8001176:	b2ca      	uxtb	r2, r1
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	701a      	strb	r2, [r3, #0]
	dataSend[1] = DecValue/10%10;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4a3a      	ldr	r2, [pc, #232]	; (8001268 <EncodeDataDC+0x1d0>)
 8001180:	fb82 1203 	smull	r1, r2, r2, r3
 8001184:	1092      	asrs	r2, r2, #2
 8001186:	17db      	asrs	r3, r3, #31
 8001188:	1ad2      	subs	r2, r2, r3
 800118a:	4b37      	ldr	r3, [pc, #220]	; (8001268 <EncodeDataDC+0x1d0>)
 800118c:	fb83 1302 	smull	r1, r3, r3, r2
 8001190:	1099      	asrs	r1, r3, #2
 8001192:	17d3      	asrs	r3, r2, #31
 8001194:	1ac9      	subs	r1, r1, r3
 8001196:	460b      	mov	r3, r1
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	440b      	add	r3, r1
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	1ad1      	subs	r1, r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3301      	adds	r3, #1
 80011a4:	b2ca      	uxtb	r2, r1
 80011a6:	701a      	strb	r2, [r3, #0]

	dataSend[2] = IntValue/1%10;
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4b2f      	ldr	r3, [pc, #188]	; (8001268 <EncodeDataDC+0x1d0>)
 80011ac:	fb83 1302 	smull	r1, r3, r3, r2
 80011b0:	1099      	asrs	r1, r3, #2
 80011b2:	17d3      	asrs	r3, r2, #31
 80011b4:	1ac9      	subs	r1, r1, r3
 80011b6:	460b      	mov	r3, r1
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	440b      	add	r3, r1
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	1ad1      	subs	r1, r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3302      	adds	r3, #2
 80011c4:	b2ca      	uxtb	r2, r1
 80011c6:	701a      	strb	r2, [r3, #0]
	dataSend[3] = IntValue/10%10;
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4a27      	ldr	r2, [pc, #156]	; (8001268 <EncodeDataDC+0x1d0>)
 80011cc:	fb82 1203 	smull	r1, r2, r2, r3
 80011d0:	1092      	asrs	r2, r2, #2
 80011d2:	17db      	asrs	r3, r3, #31
 80011d4:	1ad2      	subs	r2, r2, r3
 80011d6:	4b24      	ldr	r3, [pc, #144]	; (8001268 <EncodeDataDC+0x1d0>)
 80011d8:	fb83 1302 	smull	r1, r3, r3, r2
 80011dc:	1099      	asrs	r1, r3, #2
 80011de:	17d3      	asrs	r3, r2, #31
 80011e0:	1ac9      	subs	r1, r1, r3
 80011e2:	460b      	mov	r3, r1
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	440b      	add	r3, r1
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	1ad1      	subs	r1, r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3303      	adds	r3, #3
 80011f0:	b2ca      	uxtb	r2, r1
 80011f2:	701a      	strb	r2, [r3, #0]
	dataSend[4] = IntValue/100%10;
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	4a1b      	ldr	r2, [pc, #108]	; (8001264 <EncodeDataDC+0x1cc>)
 80011f8:	fb82 1203 	smull	r1, r2, r2, r3
 80011fc:	1152      	asrs	r2, r2, #5
 80011fe:	17db      	asrs	r3, r3, #31
 8001200:	1ad2      	subs	r2, r2, r3
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <EncodeDataDC+0x1d0>)
 8001204:	fb83 1302 	smull	r1, r3, r3, r2
 8001208:	1099      	asrs	r1, r3, #2
 800120a:	17d3      	asrs	r3, r2, #31
 800120c:	1ac9      	subs	r1, r1, r3
 800120e:	460b      	mov	r3, r1
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	440b      	add	r3, r1
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	1ad1      	subs	r1, r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3304      	adds	r3, #4
 800121c:	b2ca      	uxtb	r2, r1
 800121e:	701a      	strb	r2, [r3, #0]

	if(Angle < 0) dataSend[5] = '-';
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <EncodeDataDC+0x1c8>)
 8001222:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001226:	2b00      	cmp	r3, #0
 8001228:	da04      	bge.n	8001234 <EncodeDataDC+0x19c>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3305      	adds	r3, #5
 800122e:	222d      	movs	r2, #45	; 0x2d
 8001230:	701a      	strb	r2, [r3, #0]
	else 		  dataSend[5] = '+';
}
 8001232:	e003      	b.n	800123c <EncodeDataDC+0x1a4>
	else 		  dataSend[5] = '+';
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3305      	adds	r3, #5
 8001238:	222b      	movs	r2, #43	; 0x2b
 800123a:	701a      	strb	r2, [r3, #0]
}
 800123c:	bf00      	nop
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bdb0      	pop	{r4, r5, r7, pc}
 8001244:	f3af 8000 	nop.w
 8001248:	5bdf0ceb 	.word	0x5bdf0ceb
 800124c:	3f59c220 	.word	0x3f59c220
 8001250:	20000110 	.word	0x20000110
 8001254:	200000f9 	.word	0x200000f9
 8001258:	40590000 	.word	0x40590000
 800125c:	200000e8 	.word	0x200000e8
 8001260:	200000e6 	.word	0x200000e6
 8001264:	51eb851f 	.word	0x51eb851f
 8001268:	66666667 	.word	0x66666667

0800126c <EncodeDataAC>:
void EncodeDataAC(uint8_t dataSend[])
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	ExternalPulse = __HAL_TIM_GET_COUNTER(&htim2);
 8001274:	4b50      	ldr	r3, [pc, #320]	; (80013b8 <EncodeDataAC+0x14c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127a:	b21a      	sxth	r2, r3
 800127c:	4b4f      	ldr	r3, [pc, #316]	; (80013bc <EncodeDataAC+0x150>)
 800127e:	801a      	strh	r2, [r3, #0]
	Angle = ExternalPulse;// AC-: 36000 Pulse / Cycle *100 to get 2 decimal
 8001280:	4b4e      	ldr	r3, [pc, #312]	; (80013bc <EncodeDataAC+0x150>)
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	b21a      	sxth	r2, r3
 8001286:	4b4e      	ldr	r3, [pc, #312]	; (80013c0 <EncodeDataAC+0x154>)
 8001288:	801a      	strh	r2, [r3, #0]

	int IntValue = abs(Angle/100);
 800128a:	4b4d      	ldr	r3, [pc, #308]	; (80013c0 <EncodeDataAC+0x154>)
 800128c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001290:	4a4c      	ldr	r2, [pc, #304]	; (80013c4 <EncodeDataAC+0x158>)
 8001292:	fb82 1203 	smull	r1, r2, r2, r3
 8001296:	1152      	asrs	r2, r2, #5
 8001298:	17db      	asrs	r3, r3, #31
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	b21b      	sxth	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	bfb8      	it	lt
 80012a2:	425b      	neglt	r3, r3
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	60fb      	str	r3, [r7, #12]
	int DecValue = abs(Angle%100);
 80012a8:	4b45      	ldr	r3, [pc, #276]	; (80013c0 <EncodeDataAC+0x154>)
 80012aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ae:	4a45      	ldr	r2, [pc, #276]	; (80013c4 <EncodeDataAC+0x158>)
 80012b0:	fb82 1203 	smull	r1, r2, r2, r3
 80012b4:	1151      	asrs	r1, r2, #5
 80012b6:	17da      	asrs	r2, r3, #31
 80012b8:	1a8a      	subs	r2, r1, r2
 80012ba:	2164      	movs	r1, #100	; 0x64
 80012bc:	fb01 f202 	mul.w	r2, r1, r2
 80012c0:	1a9b      	subs	r3, r3, r2
 80012c2:	b21b      	sxth	r3, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	bfb8      	it	lt
 80012c8:	425b      	neglt	r3, r3
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	60bb      	str	r3, [r7, #8]

	dataSend[0] = DecValue/1%10;
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	4b3d      	ldr	r3, [pc, #244]	; (80013c8 <EncodeDataAC+0x15c>)
 80012d2:	fb83 1302 	smull	r1, r3, r3, r2
 80012d6:	1099      	asrs	r1, r3, #2
 80012d8:	17d3      	asrs	r3, r2, #31
 80012da:	1ac9      	subs	r1, r1, r3
 80012dc:	460b      	mov	r3, r1
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	440b      	add	r3, r1
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	1ad1      	subs	r1, r2, r3
 80012e6:	b2ca      	uxtb	r2, r1
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	701a      	strb	r2, [r3, #0]
	dataSend[1] = DecValue/10%10;
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	4a36      	ldr	r2, [pc, #216]	; (80013c8 <EncodeDataAC+0x15c>)
 80012f0:	fb82 1203 	smull	r1, r2, r2, r3
 80012f4:	1092      	asrs	r2, r2, #2
 80012f6:	17db      	asrs	r3, r3, #31
 80012f8:	1ad2      	subs	r2, r2, r3
 80012fa:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <EncodeDataAC+0x15c>)
 80012fc:	fb83 1302 	smull	r1, r3, r3, r2
 8001300:	1099      	asrs	r1, r3, #2
 8001302:	17d3      	asrs	r3, r2, #31
 8001304:	1ac9      	subs	r1, r1, r3
 8001306:	460b      	mov	r3, r1
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	440b      	add	r3, r1
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	1ad1      	subs	r1, r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3301      	adds	r3, #1
 8001314:	b2ca      	uxtb	r2, r1
 8001316:	701a      	strb	r2, [r3, #0]

	dataSend[2] = IntValue/1%10;
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	4b2b      	ldr	r3, [pc, #172]	; (80013c8 <EncodeDataAC+0x15c>)
 800131c:	fb83 1302 	smull	r1, r3, r3, r2
 8001320:	1099      	asrs	r1, r3, #2
 8001322:	17d3      	asrs	r3, r2, #31
 8001324:	1ac9      	subs	r1, r1, r3
 8001326:	460b      	mov	r3, r1
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	440b      	add	r3, r1
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	1ad1      	subs	r1, r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3302      	adds	r3, #2
 8001334:	b2ca      	uxtb	r2, r1
 8001336:	701a      	strb	r2, [r3, #0]
	dataSend[3] = IntValue/10%10;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4a23      	ldr	r2, [pc, #140]	; (80013c8 <EncodeDataAC+0x15c>)
 800133c:	fb82 1203 	smull	r1, r2, r2, r3
 8001340:	1092      	asrs	r2, r2, #2
 8001342:	17db      	asrs	r3, r3, #31
 8001344:	1ad2      	subs	r2, r2, r3
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <EncodeDataAC+0x15c>)
 8001348:	fb83 1302 	smull	r1, r3, r3, r2
 800134c:	1099      	asrs	r1, r3, #2
 800134e:	17d3      	asrs	r3, r2, #31
 8001350:	1ac9      	subs	r1, r1, r3
 8001352:	460b      	mov	r3, r1
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	440b      	add	r3, r1
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	1ad1      	subs	r1, r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3303      	adds	r3, #3
 8001360:	b2ca      	uxtb	r2, r1
 8001362:	701a      	strb	r2, [r3, #0]
	dataSend[4] = IntValue/100%10;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4a17      	ldr	r2, [pc, #92]	; (80013c4 <EncodeDataAC+0x158>)
 8001368:	fb82 1203 	smull	r1, r2, r2, r3
 800136c:	1152      	asrs	r2, r2, #5
 800136e:	17db      	asrs	r3, r3, #31
 8001370:	1ad2      	subs	r2, r2, r3
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <EncodeDataAC+0x15c>)
 8001374:	fb83 1302 	smull	r1, r3, r3, r2
 8001378:	1099      	asrs	r1, r3, #2
 800137a:	17d3      	asrs	r3, r2, #31
 800137c:	1ac9      	subs	r1, r1, r3
 800137e:	460b      	mov	r3, r1
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	440b      	add	r3, r1
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	1ad1      	subs	r1, r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3304      	adds	r3, #4
 800138c:	b2ca      	uxtb	r2, r1
 800138e:	701a      	strb	r2, [r3, #0]

	if(Angle < 0) dataSend[5] = '-';
 8001390:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <EncodeDataAC+0x154>)
 8001392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001396:	2b00      	cmp	r3, #0
 8001398:	da04      	bge.n	80013a4 <EncodeDataAC+0x138>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3305      	adds	r3, #5
 800139e:	222d      	movs	r2, #45	; 0x2d
 80013a0:	701a      	strb	r2, [r3, #0]
	else	      dataSend[5] = '+';
}
 80013a2:	e003      	b.n	80013ac <EncodeDataAC+0x140>
	else	      dataSend[5] = '+';
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3305      	adds	r3, #5
 80013a8:	222b      	movs	r2, #43	; 0x2b
 80013aa:	701a      	strb	r2, [r3, #0]
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000194 	.word	0x20000194
 80013bc:	20000120 	.word	0x20000120
 80013c0:	200000e6 	.word	0x200000e6
 80013c4:	51eb851f 	.word	0x51eb851f
 80013c8:	66666667 	.word	0x66666667

080013cc <delay_us>:

//=================TIMER4 COUNTER MODE DELAY (checked)
void delay_us (uint16_t us)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4,0);
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <delay_us+0x2c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2200      	movs	r2, #0
 80013dc:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < us);
 80013de:	bf00      	nop
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <delay_us+0x2c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d3f9      	bcc.n	80013e0 <delay_us+0x14>
}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr
 80013f8:	200001dc 	.word	0x200001dc

080013fc <ForwardDC>:

//=================CONTROL DC MOTOR (checked tempt)
void ForwardDC(uint16_t l_pulseIn, uint16_t timeDelay)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	460a      	mov	r2, r1
 8001406:	80fb      	strh	r3, [r7, #6]
 8001408:	4613      	mov	r3, r2
 800140a:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_SET);
 800140c:	2201      	movs	r2, #1
 800140e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001412:	4819      	ldr	r0, [pc, #100]	; (8001478 <ForwardDC+0x7c>)
 8001414:	f002 fa48 	bl	80038a8 <HAL_GPIO_WritePin>
	for(uint16_t i =0; i < l_pulseIn; i++)
 8001418:	2300      	movs	r3, #0
 800141a:	81fb      	strh	r3, [r7, #14]
 800141c:	e022      	b.n	8001464 <ForwardDC+0x68>
	{
		HAL_GPIO_WritePin(STP_GPIO_Port, STP_Pin, GPIO_PIN_SET);
 800141e:	2201      	movs	r2, #1
 8001420:	2102      	movs	r1, #2
 8001422:	4815      	ldr	r0, [pc, #84]	; (8001478 <ForwardDC+0x7c>)
 8001424:	f002 fa40 	bl	80038a8 <HAL_GPIO_WritePin>
		delay_us(timeDelay);
 8001428:	88bb      	ldrh	r3, [r7, #4]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff ffce 	bl	80013cc <delay_us>
		HAL_GPIO_WritePin(STP_GPIO_Port, STP_Pin, GPIO_PIN_RESET);
 8001430:	2200      	movs	r2, #0
 8001432:	2102      	movs	r1, #2
 8001434:	4810      	ldr	r0, [pc, #64]	; (8001478 <ForwardDC+0x7c>)
 8001436:	f002 fa37 	bl	80038a8 <HAL_GPIO_WritePin>
		delay_us(timeDelay);
 800143a:	88bb      	ldrh	r3, [r7, #4]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ffc5 	bl	80013cc <delay_us>

		if(flag_send == true)
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <ForwardDC+0x80>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d009      	beq.n	800145e <ForwardDC+0x62>
		{
			flag_send = false;
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <ForwardDC+0x80>)
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]
			if(Mode == STP_MOTOR) EncodeDataDC(Data_Decode);
 8001450:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <ForwardDC+0x84>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d002      	beq.n	800145e <ForwardDC+0x62>
 8001458:	480a      	ldr	r0, [pc, #40]	; (8001484 <ForwardDC+0x88>)
 800145a:	f7ff fe1d 	bl	8001098 <EncodeDataDC>
	for(uint16_t i =0; i < l_pulseIn; i++)
 800145e:	89fb      	ldrh	r3, [r7, #14]
 8001460:	3301      	adds	r3, #1
 8001462:	81fb      	strh	r3, [r7, #14]
 8001464:	89fa      	ldrh	r2, [r7, #14]
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	429a      	cmp	r2, r3
 800146a:	d3d8      	bcc.n	800141e <ForwardDC+0x22>
		}
	}
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40010c00 	.word	0x40010c00
 800147c:	2000011a 	.word	0x2000011a
 8001480:	200000e4 	.word	0x200000e4
 8001484:	20000000 	.word	0x20000000

08001488 <InverseDC>:
void InverseDC(uint16_t l_pulseIn, uint16_t timeDelay)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	460a      	mov	r2, r1
 8001492:	80fb      	strh	r3, [r7, #6]
 8001494:	4613      	mov	r3, r2
 8001496:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800149e:	4819      	ldr	r0, [pc, #100]	; (8001504 <InverseDC+0x7c>)
 80014a0:	f002 fa02 	bl	80038a8 <HAL_GPIO_WritePin>
	for(uint16_t i = 0; i < l_pulseIn; i++)
 80014a4:	2300      	movs	r3, #0
 80014a6:	81fb      	strh	r3, [r7, #14]
 80014a8:	e022      	b.n	80014f0 <InverseDC+0x68>
	{
		HAL_GPIO_WritePin(STP_GPIO_Port, STP_Pin, GPIO_PIN_SET);
 80014aa:	2201      	movs	r2, #1
 80014ac:	2102      	movs	r1, #2
 80014ae:	4815      	ldr	r0, [pc, #84]	; (8001504 <InverseDC+0x7c>)
 80014b0:	f002 f9fa 	bl	80038a8 <HAL_GPIO_WritePin>
		delay_us(timeDelay);
 80014b4:	88bb      	ldrh	r3, [r7, #4]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff ff88 	bl	80013cc <delay_us>
		HAL_GPIO_WritePin(STP_GPIO_Port, STP_Pin, GPIO_PIN_RESET);
 80014bc:	2200      	movs	r2, #0
 80014be:	2102      	movs	r1, #2
 80014c0:	4810      	ldr	r0, [pc, #64]	; (8001504 <InverseDC+0x7c>)
 80014c2:	f002 f9f1 	bl	80038a8 <HAL_GPIO_WritePin>
		delay_us(timeDelay);
 80014c6:	88bb      	ldrh	r3, [r7, #4]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff7f 	bl	80013cc <delay_us>

		if(flag_send == true)
 80014ce:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <InverseDC+0x80>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d009      	beq.n	80014ea <InverseDC+0x62>
		{
			flag_send = false;
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <InverseDC+0x80>)
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
			if(Mode == STP_MOTOR) EncodeDataDC(Data_Decode);
 80014dc:	4b0b      	ldr	r3, [pc, #44]	; (800150c <InverseDC+0x84>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d002      	beq.n	80014ea <InverseDC+0x62>
 80014e4:	480a      	ldr	r0, [pc, #40]	; (8001510 <InverseDC+0x88>)
 80014e6:	f7ff fdd7 	bl	8001098 <EncodeDataDC>
	for(uint16_t i = 0; i < l_pulseIn; i++)
 80014ea:	89fb      	ldrh	r3, [r7, #14]
 80014ec:	3301      	adds	r3, #1
 80014ee:	81fb      	strh	r3, [r7, #14]
 80014f0:	89fa      	ldrh	r2, [r7, #14]
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d3d8      	bcc.n	80014aa <InverseDC+0x22>
		}
	}
}
 80014f8:	bf00      	nop
 80014fa:	bf00      	nop
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40010c00 	.word	0x40010c00
 8001508:	2000011a 	.word	0x2000011a
 800150c:	200000e4 	.word	0x200000e4
 8001510:	20000000 	.word	0x20000000

08001514 <Create_pulse_Forward_AC>:
//=================CONTROL AC SERVO (checked tempt)
void Create_pulse_Forward_AC(uint32_t pulse_in, uint32_t time_delay)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOB, NP_Pin, GPIO_PIN_SET);
 800151e:	2201      	movs	r2, #1
 8001520:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001524:	4813      	ldr	r0, [pc, #76]	; (8001574 <Create_pulse_Forward_AC+0x60>)
 8001526:	f002 f9bf 	bl	80038a8 <HAL_GPIO_WritePin>
	for (int i = 0; i < pulse_in; i++)
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	e018      	b.n	8001562 <Create_pulse_Forward_AC+0x4e>
	{
		HAL_GPIO_WritePin(GPIOB, PP_Pin, GPIO_PIN_RESET);
 8001530:	2200      	movs	r2, #0
 8001532:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001536:	480f      	ldr	r0, [pc, #60]	; (8001574 <Create_pulse_Forward_AC+0x60>)
 8001538:	f002 f9b6 	bl	80038a8 <HAL_GPIO_WritePin>
		delay_us(time_delay);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	b29b      	uxth	r3, r3
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff43 	bl	80013cc <delay_us>
		HAL_GPIO_WritePin(GPIOB, PP_Pin, GPIO_PIN_SET);
 8001546:	2201      	movs	r2, #1
 8001548:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800154c:	4809      	ldr	r0, [pc, #36]	; (8001574 <Create_pulse_Forward_AC+0x60>)
 800154e:	f002 f9ab 	bl	80038a8 <HAL_GPIO_WritePin>
		delay_us(time_delay);
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	b29b      	uxth	r3, r3
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff ff38 	bl	80013cc <delay_us>
	for (int i = 0; i < pulse_in; i++)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	3301      	adds	r3, #1
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	429a      	cmp	r2, r3
 8001568:	d8e2      	bhi.n	8001530 <Create_pulse_Forward_AC+0x1c>
	}
}
 800156a:	bf00      	nop
 800156c:	bf00      	nop
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40010c00 	.word	0x40010c00

08001578 <Create_pulse_Inverse_AC>:
void Create_pulse_Inverse_AC(uint32_t pulse_in, uint32_t time_delay)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOB, NP_Pin, GPIO_PIN_RESET);
 8001582:	2200      	movs	r2, #0
 8001584:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001588:	4813      	ldr	r0, [pc, #76]	; (80015d8 <Create_pulse_Inverse_AC+0x60>)
 800158a:	f002 f98d 	bl	80038a8 <HAL_GPIO_WritePin>
	for (int i = 0; i < pulse_in; i++)
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	e018      	b.n	80015c6 <Create_pulse_Inverse_AC+0x4e>
	{
		HAL_GPIO_WritePin(GPIOB, PP_Pin, GPIO_PIN_RESET);
 8001594:	2200      	movs	r2, #0
 8001596:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800159a:	480f      	ldr	r0, [pc, #60]	; (80015d8 <Create_pulse_Inverse_AC+0x60>)
 800159c:	f002 f984 	bl	80038a8 <HAL_GPIO_WritePin>
		delay_us(time_delay);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff11 	bl	80013cc <delay_us>
		HAL_GPIO_WritePin(GPIOB, PP_Pin, GPIO_PIN_SET);
 80015aa:	2201      	movs	r2, #1
 80015ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015b0:	4809      	ldr	r0, [pc, #36]	; (80015d8 <Create_pulse_Inverse_AC+0x60>)
 80015b2:	f002 f979 	bl	80038a8 <HAL_GPIO_WritePin>
		delay_us(time_delay);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff ff06 	bl	80013cc <delay_us>
	for (int i = 0; i < pulse_in; i++)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	3301      	adds	r3, #1
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d8e2      	bhi.n	8001594 <Create_pulse_Inverse_AC+0x1c>
	}
}
 80015ce:	bf00      	nop
 80015d0:	bf00      	nop
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40010c00 	.word	0x40010c00
 80015dc:	00000000 	.word	0x00000000

080015e0 <Control_Motor>:
//	}
//}

//=================MODE CONTROL AC SERVO/DC MOTOR (Checked)
void Control_Motor(float DELTA)
{
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b087      	sub	sp, #28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	if(Mode == AC_SERVO)
 80015e8:	4b75      	ldr	r3, [pc, #468]	; (80017c0 <Control_Motor+0x1e0>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	f083 0301 	eor.w	r3, r3, #1
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d05f      	beq.n	80016b6 <Control_Motor+0xd6>
	{
		float deltaPulse = DELTA*GearboxAC_DtoP; // assume have decimal
 80015f6:	4973      	ldr	r1, [pc, #460]	; (80017c4 <Control_Motor+0x1e4>)
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff fafd 	bl	8000bf8 <__aeabi_fmul>
 80015fe:	4603      	mov	r3, r0
 8001600:	4971      	ldr	r1, [pc, #452]	; (80017c8 <Control_Motor+0x1e8>)
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fbac 	bl	8000d60 <__aeabi_fdiv>
 8001608:	4603      	mov	r3, r0
 800160a:	60fb      	str	r3, [r7, #12]
		pulseEnd += deltaPulse - (int32_t)deltaPulse;
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f7ff fcb9 	bl	8000f84 <__aeabi_f2iz>
 8001612:	4603      	mov	r3, r0
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fa9b 	bl	8000b50 <__aeabi_i2f>
 800161a:	4603      	mov	r3, r0
 800161c:	4619      	mov	r1, r3
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f7ff f9e0 	bl	80009e4 <__aeabi_fsub>
 8001624:	4603      	mov	r3, r0
 8001626:	461a      	mov	r2, r3
 8001628:	4b68      	ldr	r3, [pc, #416]	; (80017cc <Control_Motor+0x1ec>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4619      	mov	r1, r3
 800162e:	4610      	mov	r0, r2
 8001630:	f7ff f9da 	bl	80009e8 <__addsf3>
 8001634:	4603      	mov	r3, r0
 8001636:	461a      	mov	r2, r3
 8001638:	4b64      	ldr	r3, [pc, #400]	; (80017cc <Control_Motor+0x1ec>)
 800163a:	601a      	str	r2, [r3, #0]
		int32_t pulseSupply = deltaPulse + (int32_t)pulseEnd/1;
 800163c:	4b63      	ldr	r3, [pc, #396]	; (80017cc <Control_Motor+0x1ec>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fc9f 	bl	8000f84 <__aeabi_f2iz>
 8001646:	4603      	mov	r3, r0
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff fa81 	bl	8000b50 <__aeabi_i2f>
 800164e:	4603      	mov	r3, r0
 8001650:	68f9      	ldr	r1, [r7, #12]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff f9c8 	bl	80009e8 <__addsf3>
 8001658:	4603      	mov	r3, r0
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fc92 	bl	8000f84 <__aeabi_f2iz>
 8001660:	4603      	mov	r3, r0
 8001662:	60bb      	str	r3, [r7, #8]

		pulseEnd -= (int32_t)pulseEnd/1;
 8001664:	4b59      	ldr	r3, [pc, #356]	; (80017cc <Control_Motor+0x1ec>)
 8001666:	681c      	ldr	r4, [r3, #0]
 8001668:	4b58      	ldr	r3, [pc, #352]	; (80017cc <Control_Motor+0x1ec>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fc89 	bl	8000f84 <__aeabi_f2iz>
 8001672:	4603      	mov	r3, r0
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fa6b 	bl	8000b50 <__aeabi_i2f>
 800167a:	4603      	mov	r3, r0
 800167c:	4619      	mov	r1, r3
 800167e:	4620      	mov	r0, r4
 8001680:	f7ff f9b0 	bl	80009e4 <__aeabi_fsub>
 8001684:	4603      	mov	r3, r0
 8001686:	461a      	mov	r2, r3
 8001688:	4b50      	ldr	r3, [pc, #320]	; (80017cc <Control_Motor+0x1ec>)
 800168a:	601a      	str	r2, [r3, #0]
		if(pulseSupply > 0)
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	2b00      	cmp	r3, #0
 8001690:	dd08      	ble.n	80016a4 <Control_Motor+0xc4>
		{
			Create_pulse_Forward_AC(abs(pulseSupply), 10);
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	2b00      	cmp	r3, #0
 8001696:	bfb8      	it	lt
 8001698:	425b      	neglt	r3, r3
 800169a:	210a      	movs	r1, #10
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff39 	bl	8001514 <Create_pulse_Forward_AC>
		else
		{
			InverseDC(abs(pulseSupply), 1000);
		}
	}
}
 80016a2:	e083      	b.n	80017ac <Control_Motor+0x1cc>
			Create_pulse_Inverse_AC(abs(pulseSupply), 10);
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	bfb8      	it	lt
 80016aa:	425b      	neglt	r3, r3
 80016ac:	210a      	movs	r1, #10
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff ff62 	bl	8001578 <Create_pulse_Inverse_AC>
}
 80016b4:	e07a      	b.n	80017ac <Control_Motor+0x1cc>
		float deltaPulse = DELTA*GearboxStep_DtoP;
 80016b6:	4946      	ldr	r1, [pc, #280]	; (80017d0 <Control_Motor+0x1f0>)
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff fa9d 	bl	8000bf8 <__aeabi_fmul>
 80016be:	4603      	mov	r3, r0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7fe fea9 	bl	8000418 <__aeabi_f2d>
 80016c6:	a33c      	add	r3, pc, #240	; (adr r3, 80017b8 <Control_Motor+0x1d8>)
 80016c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016cc:	f7fe fefc 	bl	80004c8 <__aeabi_dmul>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4610      	mov	r0, r2
 80016d6:	4619      	mov	r1, r3
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	4b3d      	ldr	r3, [pc, #244]	; (80017d4 <Control_Motor+0x1f4>)
 80016de:	f7ff f81d 	bl	800071c <__aeabi_ddiv>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4610      	mov	r0, r2
 80016e8:	4619      	mov	r1, r3
 80016ea:	f7ff f927 	bl	800093c <__aeabi_d2f>
 80016ee:	4603      	mov	r3, r0
 80016f0:	617b      	str	r3, [r7, #20]
		pulseEnd += deltaPulse - (int32_t)deltaPulse;
 80016f2:	6978      	ldr	r0, [r7, #20]
 80016f4:	f7ff fc46 	bl	8000f84 <__aeabi_f2iz>
 80016f8:	4603      	mov	r3, r0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fa28 	bl	8000b50 <__aeabi_i2f>
 8001700:	4603      	mov	r3, r0
 8001702:	4619      	mov	r1, r3
 8001704:	6978      	ldr	r0, [r7, #20]
 8001706:	f7ff f96d 	bl	80009e4 <__aeabi_fsub>
 800170a:	4603      	mov	r3, r0
 800170c:	461a      	mov	r2, r3
 800170e:	4b2f      	ldr	r3, [pc, #188]	; (80017cc <Control_Motor+0x1ec>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4619      	mov	r1, r3
 8001714:	4610      	mov	r0, r2
 8001716:	f7ff f967 	bl	80009e8 <__addsf3>
 800171a:	4603      	mov	r3, r0
 800171c:	461a      	mov	r2, r3
 800171e:	4b2b      	ldr	r3, [pc, #172]	; (80017cc <Control_Motor+0x1ec>)
 8001720:	601a      	str	r2, [r3, #0]
		int32_t pulseSupply = deltaPulse + (int32_t)pulseEnd/1;
 8001722:	4b2a      	ldr	r3, [pc, #168]	; (80017cc <Control_Motor+0x1ec>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff fc2c 	bl	8000f84 <__aeabi_f2iz>
 800172c:	4603      	mov	r3, r0
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fa0e 	bl	8000b50 <__aeabi_i2f>
 8001734:	4603      	mov	r3, r0
 8001736:	6979      	ldr	r1, [r7, #20]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff f955 	bl	80009e8 <__addsf3>
 800173e:	4603      	mov	r3, r0
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fc1f 	bl	8000f84 <__aeabi_f2iz>
 8001746:	4603      	mov	r3, r0
 8001748:	613b      	str	r3, [r7, #16]
		pulseEnd -= (int32_t)pulseEnd/1;
 800174a:	4b20      	ldr	r3, [pc, #128]	; (80017cc <Control_Motor+0x1ec>)
 800174c:	681c      	ldr	r4, [r3, #0]
 800174e:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <Control_Motor+0x1ec>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fc16 	bl	8000f84 <__aeabi_f2iz>
 8001758:	4603      	mov	r3, r0
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff f9f8 	bl	8000b50 <__aeabi_i2f>
 8001760:	4603      	mov	r3, r0
 8001762:	4619      	mov	r1, r3
 8001764:	4620      	mov	r0, r4
 8001766:	f7ff f93d 	bl	80009e4 <__aeabi_fsub>
 800176a:	4603      	mov	r3, r0
 800176c:	461a      	mov	r2, r3
 800176e:	4b17      	ldr	r3, [pc, #92]	; (80017cc <Control_Motor+0x1ec>)
 8001770:	601a      	str	r2, [r3, #0]
		if(deltaPulse > 0)
 8001772:	f04f 0100 	mov.w	r1, #0
 8001776:	6978      	ldr	r0, [r7, #20]
 8001778:	f7ff fbfa 	bl	8000f70 <__aeabi_fcmpgt>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00a      	beq.n	8001798 <Control_Motor+0x1b8>
			ForwardDC(abs(pulseSupply), 1000);
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	2b00      	cmp	r3, #0
 8001786:	bfb8      	it	lt
 8001788:	425b      	neglt	r3, r3
 800178a:	b29b      	uxth	r3, r3
 800178c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fe33 	bl	80013fc <ForwardDC>
}
 8001796:	e009      	b.n	80017ac <Control_Motor+0x1cc>
			InverseDC(abs(pulseSupply), 1000);
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	2b00      	cmp	r3, #0
 800179c:	bfb8      	it	lt
 800179e:	425b      	neglt	r3, r3
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fe6e 	bl	8001488 <InverseDC>
}
 80017ac:	bf00      	nop
 80017ae:	371c      	adds	r7, #28
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd90      	pop	{r4, r7, pc}
 80017b4:	f3af 8000 	nop.w
 80017b8:	66666666 	.word	0x66666666
 80017bc:	402b6666 	.word	0x402b6666
 80017c0:	200000e4 	.word	0x200000e4
 80017c4:	447a0000 	.word	0x447a0000
 80017c8:	43b40000 	.word	0x43b40000
 80017cc:	2000010c 	.word	0x2000010c
 80017d0:	454c0000 	.word	0x454c0000
 80017d4:	40768000 	.word	0x40768000

080017d8 <HAL_UART_RxCpltCallback>:

//=================TIMER1 TIMER MODE SAMPLE TIME (checked)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	if(HAL_UART_Receive_IT(&huart1, RxDataUart, RxBufferSize) == HAL_OK)
 80017e0:	220a      	movs	r2, #10
 80017e2:	4924      	ldr	r1, [pc, #144]	; (8001874 <HAL_UART_RxCpltCallback+0x9c>)
 80017e4:	4824      	ldr	r0, [pc, #144]	; (8001878 <HAL_UART_RxCpltCallback+0xa0>)
 80017e6:	f003 fbe4 	bl	8004fb2 <HAL_UART_Receive_IT>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d13c      	bne.n	800186a <HAL_UART_RxCpltCallback+0x92>
	{
		if(RxDataUart[0] == 251 && RxDataUart[1] == 1 && RxDataUart [2] == 49)
 80017f0:	4b20      	ldr	r3, [pc, #128]	; (8001874 <HAL_UART_RxCpltCallback+0x9c>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2bfb      	cmp	r3, #251	; 0xfb
 80017f6:	d12f      	bne.n	8001858 <HAL_UART_RxCpltCallback+0x80>
 80017f8:	4b1e      	ldr	r3, [pc, #120]	; (8001874 <HAL_UART_RxCpltCallback+0x9c>)
 80017fa:	785b      	ldrb	r3, [r3, #1]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d12b      	bne.n	8001858 <HAL_UART_RxCpltCallback+0x80>
 8001800:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <HAL_UART_RxCpltCallback+0x9c>)
 8001802:	789b      	ldrb	r3, [r3, #2]
 8001804:	2b31      	cmp	r3, #49	; 0x31
 8001806:	d127      	bne.n	8001858 <HAL_UART_RxCpltCallback+0x80>
		{
			Check_Data = 1;
 8001808:	4b1c      	ldr	r3, [pc, #112]	; (800187c <HAL_UART_RxCpltCallback+0xa4>)
 800180a:	2201      	movs	r2, #1
 800180c:	701a      	strb	r2, [r3, #0]
			if(RxDataUart[3] == 255)
 800180e:	4b19      	ldr	r3, [pc, #100]	; (8001874 <HAL_UART_RxCpltCallback+0x9c>)
 8001810:	78db      	ldrb	r3, [r3, #3]
 8001812:	2bff      	cmp	r3, #255	; 0xff
 8001814:	d129      	bne.n	800186a <HAL_UART_RxCpltCallback+0x92>
			{
				RxSaveUart[3] = RxDataUart[3];
 8001816:	4b17      	ldr	r3, [pc, #92]	; (8001874 <HAL_UART_RxCpltCallback+0x9c>)
 8001818:	78da      	ldrb	r2, [r3, #3]
 800181a:	4b19      	ldr	r3, [pc, #100]	; (8001880 <HAL_UART_RxCpltCallback+0xa8>)
 800181c:	70da      	strb	r2, [r3, #3]
				RxSaveUart[4] = RxDataUart[4];
 800181e:	4b15      	ldr	r3, [pc, #84]	; (8001874 <HAL_UART_RxCpltCallback+0x9c>)
 8001820:	791a      	ldrb	r2, [r3, #4]
 8001822:	4b17      	ldr	r3, [pc, #92]	; (8001880 <HAL_UART_RxCpltCallback+0xa8>)
 8001824:	711a      	strb	r2, [r3, #4]
				RxSaveUart[5] = RxDataUart[5];
 8001826:	4b13      	ldr	r3, [pc, #76]	; (8001874 <HAL_UART_RxCpltCallback+0x9c>)
 8001828:	795a      	ldrb	r2, [r3, #5]
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <HAL_UART_RxCpltCallback+0xa8>)
 800182c:	715a      	strb	r2, [r3, #5]
				RxSaveUart[6] = RxDataUart[6];
 800182e:	4b11      	ldr	r3, [pc, #68]	; (8001874 <HAL_UART_RxCpltCallback+0x9c>)
 8001830:	799a      	ldrb	r2, [r3, #6]
 8001832:	4b13      	ldr	r3, [pc, #76]	; (8001880 <HAL_UART_RxCpltCallback+0xa8>)
 8001834:	719a      	strb	r2, [r3, #6]
				RxSaveUart[7] = RxDataUart[7];
 8001836:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <HAL_UART_RxCpltCallback+0x9c>)
 8001838:	79da      	ldrb	r2, [r3, #7]
 800183a:	4b11      	ldr	r3, [pc, #68]	; (8001880 <HAL_UART_RxCpltCallback+0xa8>)
 800183c:	71da      	strb	r2, [r3, #7]
				RxSaveUart[8] = RxDataUart[8];
 800183e:	4b0d      	ldr	r3, [pc, #52]	; (8001874 <HAL_UART_RxCpltCallback+0x9c>)
 8001840:	7a1a      	ldrb	r2, [r3, #8]
 8001842:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <HAL_UART_RxCpltCallback+0xa8>)
 8001844:	721a      	strb	r2, [r3, #8]
				RxSaveUart[9] = getCheckSum(RxSaveUart, RxBufferSize-1);
 8001846:	2109      	movs	r1, #9
 8001848:	480d      	ldr	r0, [pc, #52]	; (8001880 <HAL_UART_RxCpltCallback+0xa8>)
 800184a:	f7ff fbc1 	bl	8000fd0 <getCheckSum>
 800184e:	4603      	mov	r3, r0
 8001850:	461a      	mov	r2, r3
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <HAL_UART_RxCpltCallback+0xa8>)
 8001854:	725a      	strb	r2, [r3, #9]
			if(RxDataUart[3] == 255)
 8001856:	e008      	b.n	800186a <HAL_UART_RxCpltCallback+0x92>
			}
		}
		else
		{
			memset(RxDataUart, 0x00,  RxBufferSize);
 8001858:	220a      	movs	r2, #10
 800185a:	2100      	movs	r1, #0
 800185c:	4805      	ldr	r0, [pc, #20]	; (8001874 <HAL_UART_RxCpltCallback+0x9c>)
 800185e:	f004 f96b 	bl	8005b38 <memset>
			ReadUart(1);
 8001862:	2001      	movs	r0, #1
 8001864:	f7ff fbd6 	bl	8001014 <ReadUart>
		}
	}
}
 8001868:	e7ff      	b.n	800186a <HAL_UART_RxCpltCallback+0x92>
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	200000f4 	.word	0x200000f4
 8001878:	20000224 	.word	0x20000224
 800187c:	20000110 	.word	0x20000110
 8001880:	20000008 	.word	0x20000008

08001884 <HAL_TIM_PeriodElapsedCallback>:

//=================TIMER1 TIMER MODE SAMPLE TIME (checked)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a13      	ldr	r2, [pc, #76]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d11f      	bne.n	80018d6 <HAL_TIM_PeriodElapsedCallback+0x52>
	{
		countSampleTime++;
 8001896:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	3301      	adds	r3, #1
 800189c:	b2da      	uxtb	r2, r3
 800189e:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80018a0:	701a      	strb	r2, [r3, #0]
		countSendData++;
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	3301      	adds	r3, #1
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80018ac:	701a      	strb	r2, [r3, #0]
		if(countSampleTime == 3)
 80018ae:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b03      	cmp	r3, #3
 80018b4:	d105      	bne.n	80018c2 <HAL_TIM_PeriodElapsedCallback+0x3e>
		{
			flag_timer1 = true;
 80018b6:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x68>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	701a      	strb	r2, [r3, #0]
			countSampleTime = 0;
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
		}
		if(countSendData == 1)
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d105      	bne.n	80018d6 <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			flag_enable_send = true;
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	701a      	strb	r2, [r3, #0]
			countSendData = 0;
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr
 80018e0:	40012c00 	.word	0x40012c00
 80018e4:	2000011e 	.word	0x2000011e
 80018e8:	2000011f 	.word	0x2000011f
 80018ec:	2000011c 	.word	0x2000011c
 80018f0:	2000011d 	.word	0x2000011d

080018f4 <HAL_TIM_IC_CaptureCallback>:
//=================TIMER2 EXTERNAL COUNTER MODE ENCODER (Checked)
//void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001904:	d105      	bne.n	8001912 <HAL_TIM_IC_CaptureCallback+0x1e>
	{
		ExternalPulse = __HAL_TIM_GET_COUNTER(&htim2);
 8001906:	4b05      	ldr	r3, [pc, #20]	; (800191c <HAL_TIM_IC_CaptureCallback+0x28>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	b21a      	sxth	r2, r3
 800190e:	4b04      	ldr	r3, [pc, #16]	; (8001920 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8001910:	801a      	strh	r2, [r3, #0]
	}
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	20000194 	.word	0x20000194
 8001920:	20000120 	.word	0x20000120

08001924 <HAL_CAN_RxFifo0MsgPendingCallback>:

//=================INTERRUPT CAN RECEIVE MESSAGE (Checked)
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RX_CAN_HEADER, CAN_Data_Rx) == HAL_OK)
 800192c:	4b2b      	ldr	r3, [pc, #172]	; (80019dc <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800192e:	4a2c      	ldr	r2, [pc, #176]	; (80019e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8001930:	2100      	movs	r1, #0
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f001 f90b 	bl	8002b4e <HAL_CAN_GetRxMessage>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d14a      	bne.n	80019d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
	{
		switch(RX_CAN_HEADER.StdId)
 800193e:	4b28      	ldr	r3, [pc, #160]	; (80019e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d01f      	beq.n	8001986 <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
 8001946:	2b04      	cmp	r3, #4
 8001948:	d144      	bne.n	80019d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
		{
		case 0x004:
			Data_Saved[0] = CAN_Data_Rx[0];
 800194a:	4b24      	ldr	r3, [pc, #144]	; (80019dc <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800194c:	781a      	ldrb	r2, [r3, #0]
 800194e:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8001950:	701a      	strb	r2, [r3, #0]
			Data_Saved[1] = CAN_Data_Rx[1];
 8001952:	4b22      	ldr	r3, [pc, #136]	; (80019dc <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8001954:	785a      	ldrb	r2, [r3, #1]
 8001956:	4b23      	ldr	r3, [pc, #140]	; (80019e4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8001958:	705a      	strb	r2, [r3, #1]
			Data_Saved[2] = CAN_Data_Rx[2];
 800195a:	4b20      	ldr	r3, [pc, #128]	; (80019dc <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800195c:	789a      	ldrb	r2, [r3, #2]
 800195e:	4b21      	ldr	r3, [pc, #132]	; (80019e4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8001960:	709a      	strb	r2, [r3, #2]
			Data_Saved[3] = CAN_Data_Rx[3];
 8001962:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8001964:	78da      	ldrb	r2, [r3, #3]
 8001966:	4b1f      	ldr	r3, [pc, #124]	; (80019e4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8001968:	70da      	strb	r2, [r3, #3]
			Data_Saved[4] = CAN_Data_Rx[4];
 800196a:	4b1c      	ldr	r3, [pc, #112]	; (80019dc <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800196c:	791a      	ldrb	r2, [r3, #4]
 800196e:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8001970:	711a      	strb	r2, [r3, #4]
			Data_Saved[5] = CAN_Data_Rx[5];
 8001972:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8001974:	795a      	ldrb	r2, [r3, #5]
 8001976:	4b1b      	ldr	r3, [pc, #108]	; (80019e4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8001978:	715a      	strb	r2, [r3, #5]
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800197a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800197e:	481a      	ldr	r0, [pc, #104]	; (80019e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8001980:	f001 ffaa 	bl	80038d8 <HAL_GPIO_TogglePin>
			break;
 8001984:	e026      	b.n	80019d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
		case 0x000:
			if(CAN_Data_Rx[0] == 's')
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b73      	cmp	r3, #115	; 0x73
 800198c:	d102      	bne.n	8001994 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>
			{
				flag_run = true;
 800198e:	4b17      	ldr	r3, [pc, #92]	; (80019ec <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8001990:	2201      	movs	r2, #1
 8001992:	701a      	strb	r2, [r3, #0]
			}
			if(CAN_Data_Rx[0] == '3')
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b33      	cmp	r3, #51	; 0x33
 800199a:	d102      	bne.n	80019a2 <HAL_CAN_RxFifo0MsgPendingCallback+0x7e>
			{
				flag_send = true;
 800199c:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 800199e:	2201      	movs	r2, #1
 80019a0:	701a      	strb	r2, [r3, #0]
			}
			if(CAN_Data_Rx[0] == 'r')
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b72      	cmp	r3, #114	; 0x72
 80019a8:	d113      	bne.n	80019d2 <HAL_CAN_RxFifo0MsgPendingCallback+0xae>
			{
				TIM2->CNT=0;
 80019aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019ae:	2200      	movs	r2, #0
 80019b0:	625a      	str	r2, [r3, #36]	; 0x24
				ExternalPulse = 0;
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	801a      	strh	r2, [r3, #0]
				resetAngle = Angle;
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 80019ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019be:	b29a      	uxth	r2, r3
 80019c0:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80019c2:	801a      	strh	r2, [r3, #0]
				Angle = 0;
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	801a      	strh	r2, [r3, #0]
				previousAngle = 0;
 80019ca:	4b0d      	ldr	r3, [pc, #52]	; (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
			}
			break;
 80019d2:	bf00      	nop
		}
	}
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000100 	.word	0x20000100
 80019e0:	200000a0 	.word	0x200000a0
 80019e4:	20000114 	.word	0x20000114
 80019e8:	40011000 	.word	0x40011000
 80019ec:	2000011b 	.word	0x2000011b
 80019f0:	2000011a 	.word	0x2000011a
 80019f4:	20000120 	.word	0x20000120
 80019f8:	200000e6 	.word	0x200000e6
 80019fc:	200000e8 	.word	0x200000e8
 8001a00:	200000ec 	.word	0x200000ec

08001a04 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001a0a:	f000 fd43 	bl	8002494 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001a0e:	f000 f8e7 	bl	8001be0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001a12:	f000 fab7 	bl	8001f84 <MX_GPIO_Init>
	MX_TIM1_Init();
 8001a16:	f000 f999 	bl	8001d4c <MX_TIM1_Init>
	MX_TIM2_Init();
 8001a1a:	f000 f9e7 	bl	8001dec <MX_TIM2_Init>
	MX_TIM4_Init();
 8001a1e:	f000 fa39 	bl	8001e94 <MX_TIM4_Init>
	MX_CAN_Init();
 8001a22:	f000 f923 	bl	8001c6c <MX_CAN_Init>
	MX_USART1_UART_Init();
 8001a26:	f000 fa83 	bl	8001f30 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	//========CAN
	HAL_CAN_Start(&hcan);
 8001a2a:	485a      	ldr	r0, [pc, #360]	; (8001b94 <main+0x190>)
 8001a2c:	f000 ff7c 	bl	8002928 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); // Enable interrupts
 8001a30:	2102      	movs	r1, #2
 8001a32:	4858      	ldr	r0, [pc, #352]	; (8001b94 <main+0x190>)
 8001a34:	f001 f9ac 	bl	8002d90 <HAL_CAN_ActivateNotification>

	//========TIMER AND COUNTER
	HAL_TIM_Base_Start(&htim4);
 8001a38:	4857      	ldr	r0, [pc, #348]	; (8001b98 <main+0x194>)
 8001a3a:	f002 fbc7 	bl	80041cc <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim1);
 8001a3e:	4857      	ldr	r0, [pc, #348]	; (8001b9c <main+0x198>)
 8001a40:	f002 fc0e 	bl	8004260 <HAL_TIM_Base_Start_IT>

	//========UART
	HAL_UART_Receive_IT(&huart1, RxDataUart, RxBufferSize);
 8001a44:	220a      	movs	r2, #10
 8001a46:	4956      	ldr	r1, [pc, #344]	; (8001ba0 <main+0x19c>)
 8001a48:	4856      	ldr	r0, [pc, #344]	; (8001ba4 <main+0x1a0>)
 8001a4a:	f003 fab2 	bl	8004fb2 <HAL_UART_Receive_IT>
	HAL_Delay(100);
 8001a4e:	2064      	movs	r0, #100	; 0x64
 8001a50:	f000 fd82 	bl	8002558 <HAL_Delay>

	//========ENCODER
	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2);
 8001a54:	2104      	movs	r1, #4
 8001a56:	4854      	ldr	r0, [pc, #336]	; (8001ba8 <main+0x1a4>)
 8001a58:	f002 fe02 	bl	8004660 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2);
 8001a5c:	2104      	movs	r1, #4
 8001a5e:	4852      	ldr	r0, [pc, #328]	; (8001ba8 <main+0x1a4>)
 8001a60:	f002 fc50 	bl	8004304 <HAL_TIM_IC_Start_IT>

	//========SET DEFAULT PIN MODE
	HAL_GPIO_WritePin(GPIOB, PG_Pin, GPIO_PIN_SET);
 8001a64:	2201      	movs	r2, #1
 8001a66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a6a:	4850      	ldr	r0, [pc, #320]	; (8001bac <main+0x1a8>)
 8001a6c:	f001 ff1c 	bl	80038a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, NG_Pin, GPIO_PIN_SET);
 8001a70:	2201      	movs	r2, #1
 8001a72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a76:	484d      	ldr	r0, [pc, #308]	; (8001bac <main+0x1a8>)
 8001a78:	f001 ff16 	bl	80038a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, PP_Pin, GPIO_PIN_SET);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a82:	484a      	ldr	r0, [pc, #296]	; (8001bac <main+0x1a8>)
 8001a84:	f001 ff10 	bl	80038a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, NP_Pin, GPIO_PIN_SET);
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a8e:	4847      	ldr	r0, [pc, #284]	; (8001bac <main+0x1a8>)
 8001a90:	f001 ff0a 	bl	80038a8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(purple_led1_GPIO_Port, purple_led1_Pin, GPIO_PIN_SET);
 8001a94:	2201      	movs	r2, #1
 8001a96:	2104      	movs	r1, #4
 8001a98:	4845      	ldr	r0, [pc, #276]	; (8001bb0 <main+0x1ac>)
 8001a9a:	f001 ff05 	bl	80038a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(purple_led2_GPIO_Port, purple_led2_Pin, GPIO_PIN_SET);
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	2108      	movs	r1, #8
 8001aa2:	4843      	ldr	r0, [pc, #268]	; (8001bb0 <main+0x1ac>)
 8001aa4:	f001 ff00 	bl	80038a8 <HAL_GPIO_WritePin>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if(flag_timer1 == true)
 8001aa8:	4b42      	ldr	r3, [pc, #264]	; (8001bb4 <main+0x1b0>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d02d      	beq.n	8001b0c <main+0x108>
		{
			flag_timer1 = false;
 8001ab0:	4b40      	ldr	r3, [pc, #256]	; (8001bb4 <main+0x1b0>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	701a      	strb	r2, [r3, #0]
			if(flag_run == true)
 8001ab6:	4b40      	ldr	r3, [pc, #256]	; (8001bb8 <main+0x1b4>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d026      	beq.n	8001b0c <main+0x108>
			{
				flag_run = false;
 8001abe:	4b3e      	ldr	r3, [pc, #248]	; (8001bb8 <main+0x1b4>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
				float Theta_temp = atoi(Data_Saved);
 8001ac4:	483d      	ldr	r0, [pc, #244]	; (8001bbc <main+0x1b8>)
 8001ac6:	f003 ffab 	bl	8005a20 <atoi>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff f83f 	bl	8000b50 <__aeabi_i2f>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	60fb      	str	r3, [r7, #12]
				float deltaAngle = Theta_temp/100 - previousAngle;
 8001ad6:	493a      	ldr	r1, [pc, #232]	; (8001bc0 <main+0x1bc>)
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f7ff f941 	bl	8000d60 <__aeabi_fdiv>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b38      	ldr	r3, [pc, #224]	; (8001bc4 <main+0x1c0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4610      	mov	r0, r2
 8001aea:	f7fe ff7b 	bl	80009e4 <__aeabi_fsub>
 8001aee:	4603      	mov	r3, r0
 8001af0:	60bb      	str	r3, [r7, #8]
				Control_Motor(deltaAngle);
 8001af2:	68b8      	ldr	r0, [r7, #8]
 8001af4:	f7ff fd74 	bl	80015e0 <Control_Motor>
				previousAngle += deltaAngle;
 8001af8:	4b32      	ldr	r3, [pc, #200]	; (8001bc4 <main+0x1c0>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68b9      	ldr	r1, [r7, #8]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe ff72 	bl	80009e8 <__addsf3>
 8001b04:	4603      	mov	r3, r0
 8001b06:	461a      	mov	r2, r3
 8001b08:	4b2e      	ldr	r3, [pc, #184]	; (8001bc4 <main+0x1c0>)
 8001b0a:	601a      	str	r2, [r3, #0]
			}
		}
		//==========UPDATE INFO FOR MASTER AND SLAVE 4
		if(flag_send == true && flag_enable_send == true)
 8001b0c:	4b2e      	ldr	r3, [pc, #184]	; (8001bc8 <main+0x1c4>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0c9      	beq.n	8001aa8 <main+0xa4>
 8001b14:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <main+0x1c8>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0c5      	beq.n	8001aa8 <main+0xa4>
		{
			//Down-flag for next time.
			flag_send = false;
 8001b1c:	4b2a      	ldr	r3, [pc, #168]	; (8001bc8 <main+0x1c4>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
			flag_enable_send = false;
 8001b22:	4b2a      	ldr	r3, [pc, #168]	; (8001bcc <main+0x1c8>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]

			if(Mode == AC_SERVO) EncodeDataAC(Data_Decode);
 8001b28:	4b29      	ldr	r3, [pc, #164]	; (8001bd0 <main+0x1cc>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	f083 0301 	eor.w	r3, r3, #1
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <main+0x13a>
 8001b36:	4827      	ldr	r0, [pc, #156]	; (8001bd4 <main+0x1d0>)
 8001b38:	f7ff fb98 	bl	800126c <EncodeDataAC>
 8001b3c:	e002      	b.n	8001b44 <main+0x140>
			else EncodeDataDC(Data_Decode);
 8001b3e:	4825      	ldr	r0, [pc, #148]	; (8001bd4 <main+0x1d0>)
 8001b40:	f7ff faaa 	bl	8001098 <EncodeDataDC>

			TX_CAN_HEADER.StdId = 0x004; //Send to Master
 8001b44:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <main+0x1d4>)
 8001b46:	2204      	movs	r2, #4
 8001b48:	601a      	str	r2, [r3, #0]
			if(HAL_CAN_AddTxMessage(&hcan, &TX_CAN_HEADER, Data_Decode, &TxMailBox) == HAL_OK)
 8001b4a:	4b24      	ldr	r3, [pc, #144]	; (8001bdc <main+0x1d8>)
 8001b4c:	4a21      	ldr	r2, [pc, #132]	; (8001bd4 <main+0x1d0>)
 8001b4e:	4922      	ldr	r1, [pc, #136]	; (8001bd8 <main+0x1d4>)
 8001b50:	4810      	ldr	r0, [pc, #64]	; (8001b94 <main+0x190>)
 8001b52:	f000 ff2d 	bl	80029b0 <HAL_CAN_AddTxMessage>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d103      	bne.n	8001b64 <main+0x160>
			{
				HAL_GPIO_TogglePin(purple_led2_GPIO_Port, purple_led2_Pin);
 8001b5c:	2108      	movs	r1, #8
 8001b5e:	4814      	ldr	r0, [pc, #80]	; (8001bb0 <main+0x1ac>)
 8001b60:	f001 feba 	bl	80038d8 <HAL_GPIO_TogglePin>
			}
			delay_us(300);
 8001b64:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b68:	f7ff fc30 	bl	80013cc <delay_us>

			TX_CAN_HEADER.StdId = 0x000; //Send to all
 8001b6c:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <main+0x1d4>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
			uint8_t RunCode;
			RunCode = '4'; // RunCode for Motor4
 8001b72:	2334      	movs	r3, #52	; 0x34
 8001b74:	71fb      	strb	r3, [r7, #7]
			if(HAL_CAN_AddTxMessage(&hcan, &TX_CAN_HEADER, &RunCode, &TxMailBox)==HAL_OK)
 8001b76:	1dfa      	adds	r2, r7, #7
 8001b78:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <main+0x1d8>)
 8001b7a:	4917      	ldr	r1, [pc, #92]	; (8001bd8 <main+0x1d4>)
 8001b7c:	4805      	ldr	r0, [pc, #20]	; (8001b94 <main+0x190>)
 8001b7e:	f000 ff17 	bl	80029b0 <HAL_CAN_AddTxMessage>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d18f      	bne.n	8001aa8 <main+0xa4>
			{
				HAL_GPIO_TogglePin(purple_led1_GPIO_Port, purple_led1_Pin);
 8001b88:	2104      	movs	r1, #4
 8001b8a:	4809      	ldr	r0, [pc, #36]	; (8001bb0 <main+0x1ac>)
 8001b8c:	f001 fea4 	bl	80038d8 <HAL_GPIO_TogglePin>
		if(flag_timer1 == true)
 8001b90:	e78a      	b.n	8001aa8 <main+0xa4>
 8001b92:	bf00      	nop
 8001b94:	20000124 	.word	0x20000124
 8001b98:	200001dc 	.word	0x200001dc
 8001b9c:	2000014c 	.word	0x2000014c
 8001ba0:	200000f4 	.word	0x200000f4
 8001ba4:	20000224 	.word	0x20000224
 8001ba8:	20000194 	.word	0x20000194
 8001bac:	40010c00 	.word	0x40010c00
 8001bb0:	40010800 	.word	0x40010800
 8001bb4:	2000011c 	.word	0x2000011c
 8001bb8:	2000011b 	.word	0x2000011b
 8001bbc:	20000114 	.word	0x20000114
 8001bc0:	42c80000 	.word	0x42c80000
 8001bc4:	200000ec 	.word	0x200000ec
 8001bc8:	2000011a 	.word	0x2000011a
 8001bcc:	2000011d 	.word	0x2000011d
 8001bd0:	200000e4 	.word	0x200000e4
 8001bd4:	20000000 	.word	0x20000000
 8001bd8:	20000088 	.word	0x20000088
 8001bdc:	20000108 	.word	0x20000108

08001be0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b090      	sub	sp, #64	; 0x40
 8001be4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001be6:	f107 0318 	add.w	r3, r7, #24
 8001bea:	2228      	movs	r2, #40	; 0x28
 8001bec:	2100      	movs	r1, #0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f003 ffa2 	bl	8005b38 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf4:	1d3b      	adds	r3, r7, #4
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
 8001c00:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c02:	2301      	movs	r3, #1
 8001c04:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c0a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c10:	2301      	movs	r3, #1
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c14:	2302      	movs	r3, #2
 8001c16:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c1c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c1e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001c22:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c24:	f107 0318 	add.w	r3, r7, #24
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f001 fe6f 	bl	800390c <HAL_RCC_OscConfig>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <SystemClock_Config+0x58>
	{
		Error_Handler();
 8001c34:	f000 fa3e 	bl	80020b4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c38:	230f      	movs	r3, #15
 8001c3a:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c48:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	2102      	movs	r1, #2
 8001c52:	4618      	mov	r0, r3
 8001c54:	f002 f8dc 	bl	8003e10 <HAL_RCC_ClockConfig>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <SystemClock_Config+0x82>
	{
		Error_Handler();
 8001c5e:	f000 fa29 	bl	80020b4 <Error_Handler>
	}
}
 8001c62:	bf00      	nop
 8001c64:	3740      	adds	r7, #64	; 0x40
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <MX_CAN_Init>:
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 8001c70:	4b31      	ldr	r3, [pc, #196]	; (8001d38 <MX_CAN_Init+0xcc>)
 8001c72:	4a32      	ldr	r2, [pc, #200]	; (8001d3c <MX_CAN_Init+0xd0>)
 8001c74:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 6;
 8001c76:	4b30      	ldr	r3, [pc, #192]	; (8001d38 <MX_CAN_Init+0xcc>)
 8001c78:	2206      	movs	r2, #6
 8001c7a:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8001c7c:	4b2e      	ldr	r3, [pc, #184]	; (8001d38 <MX_CAN_Init+0xcc>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c82:	4b2d      	ldr	r3, [pc, #180]	; (8001d38 <MX_CAN_Init+0xcc>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001c88:	4b2b      	ldr	r3, [pc, #172]	; (8001d38 <MX_CAN_Init+0xcc>)
 8001c8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c8e:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001c90:	4b29      	ldr	r3, [pc, #164]	; (8001d38 <MX_CAN_Init+0xcc>)
 8001c92:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c96:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8001c98:	4b27      	ldr	r3, [pc, #156]	; (8001d38 <MX_CAN_Init+0xcc>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8001c9e:	4b26      	ldr	r3, [pc, #152]	; (8001d38 <MX_CAN_Init+0xcc>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8001ca4:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <MX_CAN_Init+0xcc>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8001caa:	4b23      	ldr	r3, [pc, #140]	; (8001d38 <MX_CAN_Init+0xcc>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8001cb0:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <MX_CAN_Init+0xcc>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8001cb6:	4b20      	ldr	r3, [pc, #128]	; (8001d38 <MX_CAN_Init+0xcc>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001cbc:	481e      	ldr	r0, [pc, #120]	; (8001d38 <MX_CAN_Init+0xcc>)
 8001cbe:	f000 fc6f 	bl	80025a0 <HAL_CAN_Init>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_CAN_Init+0x60>
	{
		Error_Handler();
 8001cc8:	f000 f9f4 	bl	80020b4 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001ccc:	4b1c      	ldr	r3, [pc, #112]	; (8001d40 <MX_CAN_Init+0xd4>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	621a      	str	r2, [r3, #32]
	canfilterconfig.FilterBank = 1; // which filter bank to use from the assigned ones
 8001cd2:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <MX_CAN_Init+0xd4>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	615a      	str	r2, [r3, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0; //
 8001cd8:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <MX_CAN_Init+0xd4>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	611a      	str	r2, [r3, #16]
	canfilterconfig.FilterIdHigh = 0x004 << 5;
 8001cde:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <MX_CAN_Init+0xd4>)
 8001ce0:	2280      	movs	r2, #128	; 0x80
 8001ce2:	601a      	str	r2, [r3, #0]
	canfilterconfig.FilterIdLow = 0x000;
 8001ce4:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <MX_CAN_Init+0xd4>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	605a      	str	r2, [r3, #4]
	canfilterconfig.FilterMaskIdHigh = 0xffb << 5;
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <MX_CAN_Init+0xd4>)
 8001cec:	4a15      	ldr	r2, [pc, #84]	; (8001d44 <MX_CAN_Init+0xd8>)
 8001cee:	609a      	str	r2, [r3, #8]
	canfilterconfig.FilterMaskIdLow = 0x000;
 8001cf0:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <MX_CAN_Init+0xd4>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	60da      	str	r2, [r3, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001cf6:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <MX_CAN_Init+0xd4>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001cfc:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <MX_CAN_Init+0xd4>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	61da      	str	r2, [r3, #28]
	canfilterconfig.SlaveStartFilterBank = 10;
 8001d02:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <MX_CAN_Init+0xd4>)
 8001d04:	220a      	movs	r2, #10
 8001d06:	625a      	str	r2, [r3, #36]	; 0x24

	if(HAL_CAN_ConfigFilter(&hcan, &canfilterconfig) != HAL_OK) // add
 8001d08:	490d      	ldr	r1, [pc, #52]	; (8001d40 <MX_CAN_Init+0xd4>)
 8001d0a:	480b      	ldr	r0, [pc, #44]	; (8001d38 <MX_CAN_Init+0xcc>)
 8001d0c:	f000 fd43 	bl	8002796 <HAL_CAN_ConfigFilter>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_CAN_Init+0xae>
	{
		Error_Handler();
 8001d16:	f000 f9cd 	bl	80020b4 <Error_Handler>
	}
	/* -----------------------------CAN Transmit and Interrrupts ----------------------------- */
	TX_CAN_HEADER.RTR= CAN_RTR_DATA; //Remote transmission request = Data frame
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <MX_CAN_Init+0xdc>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	60da      	str	r2, [r3, #12]
	TX_CAN_HEADER.IDE= CAN_ID_STD; 	 //Standard Id (11 bits for the identifier)
 8001d20:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <MX_CAN_Init+0xdc>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
	TX_CAN_HEADER.DLC= 6;
 8001d26:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <MX_CAN_Init+0xdc>)
 8001d28:	2206      	movs	r2, #6
 8001d2a:	611a      	str	r2, [r3, #16]
	TX_CAN_HEADER.StdId = 0x004;
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <MX_CAN_Init+0xdc>)
 8001d2e:	2204      	movs	r2, #4
 8001d30:	601a      	str	r2, [r3, #0]
	/* USER CODE END CAN_Init 2 */

}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000124 	.word	0x20000124
 8001d3c:	40006400 	.word	0x40006400
 8001d40:	200000bc 	.word	0x200000bc
 8001d44:	0001ff60 	.word	0x0001ff60
 8001d48:	20000088 	.word	0x20000088

08001d4c <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d52:	f107 0308 	add.w	r3, r7, #8
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d60:	463b      	mov	r3, r7
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001d68:	4b1e      	ldr	r3, [pc, #120]	; (8001de4 <MX_TIM1_Init+0x98>)
 8001d6a:	4a1f      	ldr	r2, [pc, #124]	; (8001de8 <MX_TIM1_Init+0x9c>)
 8001d6c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 71;
 8001d6e:	4b1d      	ldr	r3, [pc, #116]	; (8001de4 <MX_TIM1_Init+0x98>)
 8001d70:	2247      	movs	r2, #71	; 0x47
 8001d72:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d74:	4b1b      	ldr	r3, [pc, #108]	; (8001de4 <MX_TIM1_Init+0x98>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 999;
 8001d7a:	4b1a      	ldr	r3, [pc, #104]	; (8001de4 <MX_TIM1_Init+0x98>)
 8001d7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d80:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d82:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <MX_TIM1_Init+0x98>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001d88:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <MX_TIM1_Init+0x98>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <MX_TIM1_Init+0x98>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d94:	4813      	ldr	r0, [pc, #76]	; (8001de4 <MX_TIM1_Init+0x98>)
 8001d96:	f002 f9c9 	bl	800412c <HAL_TIM_Base_Init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_TIM1_Init+0x58>
	{
		Error_Handler();
 8001da0:	f000 f988 	bl	80020b4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001daa:	f107 0308 	add.w	r3, r7, #8
 8001dae:	4619      	mov	r1, r3
 8001db0:	480c      	ldr	r0, [pc, #48]	; (8001de4 <MX_TIM1_Init+0x98>)
 8001db2:	f002 fe0b 	bl	80049cc <HAL_TIM_ConfigClockSource>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM1_Init+0x74>
	{
		Error_Handler();
 8001dbc:	f000 f97a 	bl	80020b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dc8:	463b      	mov	r3, r7
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4805      	ldr	r0, [pc, #20]	; (8001de4 <MX_TIM1_Init+0x98>)
 8001dce:	f002 fffb 	bl	8004dc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM1_Init+0x90>
	{
		Error_Handler();
 8001dd8:	f000 f96c 	bl	80020b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001ddc:	bf00      	nop
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	2000014c 	.word	0x2000014c
 8001de8:	40012c00 	.word	0x40012c00

08001dec <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08c      	sub	sp, #48	; 0x30
 8001df0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8001df2:	f107 030c 	add.w	r3, r7, #12
 8001df6:	2224      	movs	r2, #36	; 0x24
 8001df8:	2100      	movs	r1, #0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f003 fe9c 	bl	8005b38 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001e08:	4b21      	ldr	r3, [pc, #132]	; (8001e90 <MX_TIM2_Init+0xa4>)
 8001e0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e0e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001e10:	4b1f      	ldr	r3, [pc, #124]	; (8001e90 <MX_TIM2_Init+0xa4>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e16:	4b1e      	ldr	r3, [pc, #120]	; (8001e90 <MX_TIM2_Init+0xa4>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8001e1c:	4b1c      	ldr	r3, [pc, #112]	; (8001e90 <MX_TIM2_Init+0xa4>)
 8001e1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e22:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e24:	4b1a      	ldr	r3, [pc, #104]	; (8001e90 <MX_TIM2_Init+0xa4>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e2a:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <MX_TIM2_Init+0xa4>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e30:	2303      	movs	r3, #3
 8001e32:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001e34:	2302      	movs	r3, #2
 8001e36:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001e44:	2302      	movs	r3, #2
 8001e46:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001e54:	f107 030c 	add.w	r3, r7, #12
 8001e58:	4619      	mov	r1, r3
 8001e5a:	480d      	ldr	r0, [pc, #52]	; (8001e90 <MX_TIM2_Init+0xa4>)
 8001e5c:	f002 fb5e 	bl	800451c <HAL_TIM_Encoder_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_TIM2_Init+0x7e>
	{
		Error_Handler();
 8001e66:	f000 f925 	bl	80020b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001e6a:	2310      	movs	r3, #16
 8001e6c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e72:	1d3b      	adds	r3, r7, #4
 8001e74:	4619      	mov	r1, r3
 8001e76:	4806      	ldr	r0, [pc, #24]	; (8001e90 <MX_TIM2_Init+0xa4>)
 8001e78:	f002 ffa6 	bl	8004dc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_TIM2_Init+0x9a>
	{
		Error_Handler();
 8001e82:	f000 f917 	bl	80020b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001e86:	bf00      	nop
 8001e88:	3730      	adds	r7, #48	; 0x30
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000194 	.word	0x20000194

08001e94 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e9a:	f107 0308 	add.w	r3, r7, #8
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea8:	463b      	mov	r3, r7
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001eb0:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <MX_TIM4_Init+0x94>)
 8001eb2:	4a1e      	ldr	r2, [pc, #120]	; (8001f2c <MX_TIM4_Init+0x98>)
 8001eb4:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 71;
 8001eb6:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <MX_TIM4_Init+0x94>)
 8001eb8:	2247      	movs	r2, #71	; 0x47
 8001eba:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ebc:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <MX_TIM4_Init+0x94>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8001ec2:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <MX_TIM4_Init+0x94>)
 8001ec4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ec8:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eca:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <MX_TIM4_Init+0x94>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed0:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <MX_TIM4_Init+0x94>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ed6:	4814      	ldr	r0, [pc, #80]	; (8001f28 <MX_TIM4_Init+0x94>)
 8001ed8:	f002 f928 	bl	800412c <HAL_TIM_Base_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_TIM4_Init+0x52>
	{
		Error_Handler();
 8001ee2:	f000 f8e7 	bl	80020b4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ee6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eea:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001eec:	f107 0308 	add.w	r3, r7, #8
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	480d      	ldr	r0, [pc, #52]	; (8001f28 <MX_TIM4_Init+0x94>)
 8001ef4:	f002 fd6a 	bl	80049cc <HAL_TIM_ConfigClockSource>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_TIM4_Init+0x6e>
	{
		Error_Handler();
 8001efe:	f000 f8d9 	bl	80020b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f02:	2300      	movs	r3, #0
 8001f04:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f06:	2300      	movs	r3, #0
 8001f08:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f0a:	463b      	mov	r3, r7
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4806      	ldr	r0, [pc, #24]	; (8001f28 <MX_TIM4_Init+0x94>)
 8001f10:	f002 ff5a 	bl	8004dc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_TIM4_Init+0x8a>
	{
		Error_Handler();
 8001f1a:	f000 f8cb 	bl	80020b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001f1e:	bf00      	nop
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	200001dc 	.word	0x200001dc
 8001f2c:	40000800 	.word	0x40000800

08001f30 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001f34:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f36:	4a12      	ldr	r2, [pc, #72]	; (8001f80 <MX_USART1_UART_Init+0x50>)
 8001f38:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001f3a:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f40:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f42:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001f48:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001f54:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f56:	220c      	movs	r2, #12
 8001f58:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f5a:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f60:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f66:	4805      	ldr	r0, [pc, #20]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f68:	f002 ff9e 	bl	8004ea8 <HAL_UART_Init>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8001f72:	f000 f89f 	bl	80020b4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000224 	.word	0x20000224
 8001f80:	40013800 	.word	0x40013800

08001f84 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8a:	f107 0310 	add.w	r3, r7, #16
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	605a      	str	r2, [r3, #4]
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001f98:	4b42      	ldr	r3, [pc, #264]	; (80020a4 <MX_GPIO_Init+0x120>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	4a41      	ldr	r2, [pc, #260]	; (80020a4 <MX_GPIO_Init+0x120>)
 8001f9e:	f043 0310 	orr.w	r3, r3, #16
 8001fa2:	6193      	str	r3, [r2, #24]
 8001fa4:	4b3f      	ldr	r3, [pc, #252]	; (80020a4 <MX_GPIO_Init+0x120>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	f003 0310 	and.w	r3, r3, #16
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001fb0:	4b3c      	ldr	r3, [pc, #240]	; (80020a4 <MX_GPIO_Init+0x120>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	4a3b      	ldr	r2, [pc, #236]	; (80020a4 <MX_GPIO_Init+0x120>)
 8001fb6:	f043 0320 	orr.w	r3, r3, #32
 8001fba:	6193      	str	r3, [r2, #24]
 8001fbc:	4b39      	ldr	r3, [pc, #228]	; (80020a4 <MX_GPIO_Init+0x120>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	f003 0320 	and.w	r3, r3, #32
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc8:	4b36      	ldr	r3, [pc, #216]	; (80020a4 <MX_GPIO_Init+0x120>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	4a35      	ldr	r2, [pc, #212]	; (80020a4 <MX_GPIO_Init+0x120>)
 8001fce:	f043 0304 	orr.w	r3, r3, #4
 8001fd2:	6193      	str	r3, [r2, #24]
 8001fd4:	4b33      	ldr	r3, [pc, #204]	; (80020a4 <MX_GPIO_Init+0x120>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	607b      	str	r3, [r7, #4]
 8001fde:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe0:	4b30      	ldr	r3, [pc, #192]	; (80020a4 <MX_GPIO_Init+0x120>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	4a2f      	ldr	r2, [pc, #188]	; (80020a4 <MX_GPIO_Init+0x120>)
 8001fe6:	f043 0308 	orr.w	r3, r3, #8
 8001fea:	6193      	str	r3, [r2, #24]
 8001fec:	4b2d      	ldr	r3, [pc, #180]	; (80020a4 <MX_GPIO_Init+0x120>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	f003 0308 	and.w	r3, r3, #8
 8001ff4:	603b      	str	r3, [r7, #0]
 8001ff6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ffe:	482a      	ldr	r0, [pc, #168]	; (80020a8 <MX_GPIO_Init+0x124>)
 8002000:	f001 fc52 	bl	80038a8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, purple_led1_Pin|purple_led2_Pin|a6_Pin|a7_Pin, GPIO_PIN_RESET);
 8002004:	2200      	movs	r2, #0
 8002006:	21cc      	movs	r1, #204	; 0xcc
 8002008:	4828      	ldr	r0, [pc, #160]	; (80020ac <MX_GPIO_Init+0x128>)
 800200a:	f001 fc4d 	bl	80038a8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, EN_Pin|STP_Pin|DIR_Pin|b11_Pin, GPIO_PIN_RESET);
 800200e:	2200      	movs	r2, #0
 8002010:	f640 4103 	movw	r1, #3075	; 0xc03
 8002014:	4826      	ldr	r0, [pc, #152]	; (80020b0 <MX_GPIO_Init+0x12c>)
 8002016:	f001 fc47 	bl	80038a8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, NG_Pin|NP_Pin|PG_Pin|PP_Pin, GPIO_PIN_SET);
 800201a:	2201      	movs	r2, #1
 800201c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002020:	4823      	ldr	r0, [pc, #140]	; (80020b0 <MX_GPIO_Init+0x12c>)
 8002022:	f001 fc41 	bl	80038a8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002026:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800202a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800202c:	2301      	movs	r3, #1
 800202e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002034:	2303      	movs	r3, #3
 8002036:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002038:	f107 0310 	add.w	r3, r7, #16
 800203c:	4619      	mov	r1, r3
 800203e:	481a      	ldr	r0, [pc, #104]	; (80020a8 <MX_GPIO_Init+0x124>)
 8002040:	f001 faae 	bl	80035a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : purple_led1_Pin purple_led2_Pin a6_Pin a7_Pin */
	GPIO_InitStruct.Pin = purple_led1_Pin|purple_led2_Pin|a6_Pin|a7_Pin;
 8002044:	23cc      	movs	r3, #204	; 0xcc
 8002046:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002048:	2301      	movs	r3, #1
 800204a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002050:	2302      	movs	r3, #2
 8002052:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002054:	f107 0310 	add.w	r3, r7, #16
 8002058:	4619      	mov	r1, r3
 800205a:	4814      	ldr	r0, [pc, #80]	; (80020ac <MX_GPIO_Init+0x128>)
 800205c:	f001 faa0 	bl	80035a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : EN_Pin STP_Pin DIR_Pin b11_Pin */
	GPIO_InitStruct.Pin = EN_Pin|STP_Pin|DIR_Pin|b11_Pin;
 8002060:	f640 4303 	movw	r3, #3075	; 0xc03
 8002064:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002066:	2301      	movs	r3, #1
 8002068:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206e:	2302      	movs	r3, #2
 8002070:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002072:	f107 0310 	add.w	r3, r7, #16
 8002076:	4619      	mov	r1, r3
 8002078:	480d      	ldr	r0, [pc, #52]	; (80020b0 <MX_GPIO_Init+0x12c>)
 800207a:	f001 fa91 	bl	80035a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : NG_Pin NP_Pin PG_Pin PP_Pin */
	GPIO_InitStruct.Pin = NG_Pin|NP_Pin|PG_Pin|PP_Pin;
 800207e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002082:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002084:	2301      	movs	r3, #1
 8002086:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800208c:	2303      	movs	r3, #3
 800208e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002090:	f107 0310 	add.w	r3, r7, #16
 8002094:	4619      	mov	r1, r3
 8002096:	4806      	ldr	r0, [pc, #24]	; (80020b0 <MX_GPIO_Init+0x12c>)
 8002098:	f001 fa82 	bl	80035a0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800209c:	bf00      	nop
 800209e:	3720      	adds	r7, #32
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40011000 	.word	0x40011000
 80020ac:	40010800 	.word	0x40010800
 80020b0:	40010c00 	.word	0x40010c00

080020b4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020b8:	b672      	cpsid	i
}
 80020ba:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80020bc:	e7fe      	b.n	80020bc <Error_Handler+0x8>
	...

080020c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020c6:	4b16      	ldr	r3, [pc, #88]	; (8002120 <HAL_MspInit+0x60>)
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	4a15      	ldr	r2, [pc, #84]	; (8002120 <HAL_MspInit+0x60>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	6193      	str	r3, [r2, #24]
 80020d2:	4b13      	ldr	r3, [pc, #76]	; (8002120 <HAL_MspInit+0x60>)
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	60bb      	str	r3, [r7, #8]
 80020dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020de:	4b10      	ldr	r3, [pc, #64]	; (8002120 <HAL_MspInit+0x60>)
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	4a0f      	ldr	r2, [pc, #60]	; (8002120 <HAL_MspInit+0x60>)
 80020e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e8:	61d3      	str	r3, [r2, #28]
 80020ea:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <HAL_MspInit+0x60>)
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f2:	607b      	str	r3, [r7, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80020f6:	2007      	movs	r0, #7
 80020f8:	f001 f95e 	bl	80033b8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020fc:	4b09      	ldr	r3, [pc, #36]	; (8002124 <HAL_MspInit+0x64>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	4a04      	ldr	r2, [pc, #16]	; (8002124 <HAL_MspInit+0x64>)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002118:	bf00      	nop
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40021000 	.word	0x40021000
 8002124:	40010000 	.word	0x40010000

08002128 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	; 0x28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a29      	ldr	r2, [pc, #164]	; (80021e8 <HAL_CAN_MspInit+0xc0>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d14b      	bne.n	80021e0 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002148:	4b28      	ldr	r3, [pc, #160]	; (80021ec <HAL_CAN_MspInit+0xc4>)
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	4a27      	ldr	r2, [pc, #156]	; (80021ec <HAL_CAN_MspInit+0xc4>)
 800214e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002152:	61d3      	str	r3, [r2, #28]
 8002154:	4b25      	ldr	r3, [pc, #148]	; (80021ec <HAL_CAN_MspInit+0xc4>)
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002160:	4b22      	ldr	r3, [pc, #136]	; (80021ec <HAL_CAN_MspInit+0xc4>)
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	4a21      	ldr	r2, [pc, #132]	; (80021ec <HAL_CAN_MspInit+0xc4>)
 8002166:	f043 0308 	orr.w	r3, r3, #8
 800216a:	6193      	str	r3, [r2, #24]
 800216c:	4b1f      	ldr	r3, [pc, #124]	; (80021ec <HAL_CAN_MspInit+0xc4>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002178:	f44f 7380 	mov.w	r3, #256	; 0x100
 800217c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800217e:	2300      	movs	r3, #0
 8002180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002186:	f107 0314 	add.w	r3, r7, #20
 800218a:	4619      	mov	r1, r3
 800218c:	4818      	ldr	r0, [pc, #96]	; (80021f0 <HAL_CAN_MspInit+0xc8>)
 800218e:	f001 fa07 	bl	80035a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002192:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002198:	2302      	movs	r3, #2
 800219a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800219c:	2303      	movs	r3, #3
 800219e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	4619      	mov	r1, r3
 80021a6:	4812      	ldr	r0, [pc, #72]	; (80021f0 <HAL_CAN_MspInit+0xc8>)
 80021a8:	f001 f9fa 	bl	80035a0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <HAL_CAN_MspInit+0xcc>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ca:	4a0a      	ldr	r2, [pc, #40]	; (80021f4 <HAL_CAN_MspInit+0xcc>)
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80021d0:	2200      	movs	r2, #0
 80021d2:	2100      	movs	r1, #0
 80021d4:	2014      	movs	r0, #20
 80021d6:	f001 f8fa 	bl	80033ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80021da:	2014      	movs	r0, #20
 80021dc:	f001 f913 	bl	8003406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80021e0:	bf00      	nop
 80021e2:	3728      	adds	r7, #40	; 0x28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40006400 	.word	0x40006400
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40010c00 	.word	0x40010c00
 80021f4:	40010000 	.word	0x40010000

080021f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a16      	ldr	r2, [pc, #88]	; (8002260 <HAL_TIM_Base_MspInit+0x68>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d114      	bne.n	8002234 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800220a:	4b16      	ldr	r3, [pc, #88]	; (8002264 <HAL_TIM_Base_MspInit+0x6c>)
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	4a15      	ldr	r2, [pc, #84]	; (8002264 <HAL_TIM_Base_MspInit+0x6c>)
 8002210:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002214:	6193      	str	r3, [r2, #24]
 8002216:	4b13      	ldr	r3, [pc, #76]	; (8002264 <HAL_TIM_Base_MspInit+0x6c>)
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002222:	2200      	movs	r2, #0
 8002224:	2100      	movs	r1, #0
 8002226:	2019      	movs	r0, #25
 8002228:	f001 f8d1 	bl	80033ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800222c:	2019      	movs	r0, #25
 800222e:	f001 f8ea 	bl	8003406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002232:	e010      	b.n	8002256 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a0b      	ldr	r2, [pc, #44]	; (8002268 <HAL_TIM_Base_MspInit+0x70>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d10b      	bne.n	8002256 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800223e:	4b09      	ldr	r3, [pc, #36]	; (8002264 <HAL_TIM_Base_MspInit+0x6c>)
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	4a08      	ldr	r2, [pc, #32]	; (8002264 <HAL_TIM_Base_MspInit+0x6c>)
 8002244:	f043 0304 	orr.w	r3, r3, #4
 8002248:	61d3      	str	r3, [r2, #28]
 800224a:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_TIM_Base_MspInit+0x6c>)
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	f003 0304 	and.w	r3, r3, #4
 8002252:	60bb      	str	r3, [r7, #8]
 8002254:	68bb      	ldr	r3, [r7, #8]
}
 8002256:	bf00      	nop
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40012c00 	.word	0x40012c00
 8002264:	40021000 	.word	0x40021000
 8002268:	40000800 	.word	0x40000800

0800226c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 0310 	add.w	r3, r7, #16
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800228a:	d12b      	bne.n	80022e4 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800228c:	4b17      	ldr	r3, [pc, #92]	; (80022ec <HAL_TIM_Encoder_MspInit+0x80>)
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	4a16      	ldr	r2, [pc, #88]	; (80022ec <HAL_TIM_Encoder_MspInit+0x80>)
 8002292:	f043 0301 	orr.w	r3, r3, #1
 8002296:	61d3      	str	r3, [r2, #28]
 8002298:	4b14      	ldr	r3, [pc, #80]	; (80022ec <HAL_TIM_Encoder_MspInit+0x80>)
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a4:	4b11      	ldr	r3, [pc, #68]	; (80022ec <HAL_TIM_Encoder_MspInit+0x80>)
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	4a10      	ldr	r2, [pc, #64]	; (80022ec <HAL_TIM_Encoder_MspInit+0x80>)
 80022aa:	f043 0304 	orr.w	r3, r3, #4
 80022ae:	6193      	str	r3, [r2, #24]
 80022b0:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <HAL_TIM_Encoder_MspInit+0x80>)
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80022bc:	2303      	movs	r3, #3
 80022be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022c4:	2301      	movs	r3, #1
 80022c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c8:	f107 0310 	add.w	r3, r7, #16
 80022cc:	4619      	mov	r1, r3
 80022ce:	4808      	ldr	r0, [pc, #32]	; (80022f0 <HAL_TIM_Encoder_MspInit+0x84>)
 80022d0:	f001 f966 	bl	80035a0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80022d4:	2200      	movs	r2, #0
 80022d6:	2100      	movs	r1, #0
 80022d8:	201c      	movs	r0, #28
 80022da:	f001 f878 	bl	80033ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022de:	201c      	movs	r0, #28
 80022e0:	f001 f891 	bl	8003406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80022e4:	bf00      	nop
 80022e6:	3720      	adds	r7, #32
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40010800 	.word	0x40010800

080022f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fc:	f107 0310 	add.w	r3, r7, #16
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a20      	ldr	r2, [pc, #128]	; (8002390 <HAL_UART_MspInit+0x9c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d139      	bne.n	8002388 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002314:	4b1f      	ldr	r3, [pc, #124]	; (8002394 <HAL_UART_MspInit+0xa0>)
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	4a1e      	ldr	r2, [pc, #120]	; (8002394 <HAL_UART_MspInit+0xa0>)
 800231a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800231e:	6193      	str	r3, [r2, #24]
 8002320:	4b1c      	ldr	r3, [pc, #112]	; (8002394 <HAL_UART_MspInit+0xa0>)
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232c:	4b19      	ldr	r3, [pc, #100]	; (8002394 <HAL_UART_MspInit+0xa0>)
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	4a18      	ldr	r2, [pc, #96]	; (8002394 <HAL_UART_MspInit+0xa0>)
 8002332:	f043 0304 	orr.w	r3, r3, #4
 8002336:	6193      	str	r3, [r2, #24]
 8002338:	4b16      	ldr	r3, [pc, #88]	; (8002394 <HAL_UART_MspInit+0xa0>)
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002344:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002348:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234a:	2302      	movs	r3, #2
 800234c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800234e:	2303      	movs	r3, #3
 8002350:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002352:	f107 0310 	add.w	r3, r7, #16
 8002356:	4619      	mov	r1, r3
 8002358:	480f      	ldr	r0, [pc, #60]	; (8002398 <HAL_UART_MspInit+0xa4>)
 800235a:	f001 f921 	bl	80035a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800235e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002362:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236c:	f107 0310 	add.w	r3, r7, #16
 8002370:	4619      	mov	r1, r3
 8002372:	4809      	ldr	r0, [pc, #36]	; (8002398 <HAL_UART_MspInit+0xa4>)
 8002374:	f001 f914 	bl	80035a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002378:	2200      	movs	r2, #0
 800237a:	2100      	movs	r1, #0
 800237c:	2025      	movs	r0, #37	; 0x25
 800237e:	f001 f826 	bl	80033ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002382:	2025      	movs	r0, #37	; 0x25
 8002384:	f001 f83f 	bl	8003406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002388:	bf00      	nop
 800238a:	3720      	adds	r7, #32
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40013800 	.word	0x40013800
 8002394:	40021000 	.word	0x40021000
 8002398:	40010800 	.word	0x40010800

0800239c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023a0:	e7fe      	b.n	80023a0 <NMI_Handler+0x4>

080023a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023a2:	b480      	push	{r7}
 80023a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023a6:	e7fe      	b.n	80023a6 <HardFault_Handler+0x4>

080023a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023ac:	e7fe      	b.n	80023ac <MemManage_Handler+0x4>

080023ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ae:	b480      	push	{r7}
 80023b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023b2:	e7fe      	b.n	80023b2 <BusFault_Handler+0x4>

080023b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023b8:	e7fe      	b.n	80023b8 <UsageFault_Handler+0x4>

080023ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr

080023c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023c6:	b480      	push	{r7}
 80023c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr

080023d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr

080023de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023e2:	f000 f89d 	bl	8002520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80023f0:	4802      	ldr	r0, [pc, #8]	; (80023fc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80023f2:	f000 fcf2 	bl	8002dda <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000124 	.word	0x20000124

08002400 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002404:	4802      	ldr	r0, [pc, #8]	; (8002410 <TIM1_UP_IRQHandler+0x10>)
 8002406:	f002 f9d9 	bl	80047bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	2000014c 	.word	0x2000014c

08002414 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002418:	4802      	ldr	r0, [pc, #8]	; (8002424 <TIM2_IRQHandler+0x10>)
 800241a:	f002 f9cf 	bl	80047bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000194 	.word	0x20000194

08002428 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800242c:	4802      	ldr	r0, [pc, #8]	; (8002438 <USART1_IRQHandler+0x10>)
 800242e:	f002 fde5 	bl	8004ffc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000224 	.word	0x20000224

0800243c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr

08002448 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002448:	480c      	ldr	r0, [pc, #48]	; (800247c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800244a:	490d      	ldr	r1, [pc, #52]	; (8002480 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800244c:	4a0d      	ldr	r2, [pc, #52]	; (8002484 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800244e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002450:	e002      	b.n	8002458 <LoopCopyDataInit>

08002452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002456:	3304      	adds	r3, #4

08002458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800245a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800245c:	d3f9      	bcc.n	8002452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800245e:	4a0a      	ldr	r2, [pc, #40]	; (8002488 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002460:	4c0a      	ldr	r4, [pc, #40]	; (800248c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002464:	e001      	b.n	800246a <LoopFillZerobss>

08002466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002468:	3204      	adds	r2, #4

0800246a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800246a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800246c:	d3fb      	bcc.n	8002466 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800246e:	f7ff ffe5 	bl	800243c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002472:	f003 fb6f 	bl	8005b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002476:	f7ff fac5 	bl	8001a04 <main>
  bx lr
 800247a:	4770      	bx	lr
  ldr r0, =_sdata
 800247c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002480:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002484:	08005ce8 	.word	0x08005ce8
  ldr r2, =_sbss
 8002488:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800248c:	200003a8 	.word	0x200003a8

08002490 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002490:	e7fe      	b.n	8002490 <ADC1_2_IRQHandler>
	...

08002494 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002498:	4b08      	ldr	r3, [pc, #32]	; (80024bc <HAL_Init+0x28>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a07      	ldr	r2, [pc, #28]	; (80024bc <HAL_Init+0x28>)
 800249e:	f043 0310 	orr.w	r3, r3, #16
 80024a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024a4:	2003      	movs	r0, #3
 80024a6:	f000 ff87 	bl	80033b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024aa:	2000      	movs	r0, #0
 80024ac:	f000 f808 	bl	80024c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024b0:	f7ff fe06 	bl	80020c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40022000 	.word	0x40022000

080024c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024c8:	4b12      	ldr	r3, [pc, #72]	; (8002514 <HAL_InitTick+0x54>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	4b12      	ldr	r3, [pc, #72]	; (8002518 <HAL_InitTick+0x58>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	4619      	mov	r1, r3
 80024d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024da:	fbb2 f3f3 	udiv	r3, r2, r3
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 ff9f 	bl	8003422 <HAL_SYSTICK_Config>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e00e      	b.n	800250c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b0f      	cmp	r3, #15
 80024f2:	d80a      	bhi.n	800250a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024f4:	2200      	movs	r2, #0
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	f04f 30ff 	mov.w	r0, #4294967295
 80024fc:	f000 ff67 	bl	80033ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002500:	4a06      	ldr	r2, [pc, #24]	; (800251c <HAL_InitTick+0x5c>)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002506:	2300      	movs	r3, #0
 8002508:	e000      	b.n	800250c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
}
 800250c:	4618      	mov	r0, r3
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20000010 	.word	0x20000010
 8002518:	20000018 	.word	0x20000018
 800251c:	20000014 	.word	0x20000014

08002520 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002524:	4b05      	ldr	r3, [pc, #20]	; (800253c <HAL_IncTick+0x1c>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	461a      	mov	r2, r3
 800252a:	4b05      	ldr	r3, [pc, #20]	; (8002540 <HAL_IncTick+0x20>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4413      	add	r3, r2
 8002530:	4a03      	ldr	r2, [pc, #12]	; (8002540 <HAL_IncTick+0x20>)
 8002532:	6013      	str	r3, [r2, #0]
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr
 800253c:	20000018 	.word	0x20000018
 8002540:	2000026c 	.word	0x2000026c

08002544 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return uwTick;
 8002548:	4b02      	ldr	r3, [pc, #8]	; (8002554 <HAL_GetTick+0x10>)
 800254a:	681b      	ldr	r3, [r3, #0]
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr
 8002554:	2000026c 	.word	0x2000026c

08002558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002560:	f7ff fff0 	bl	8002544 <HAL_GetTick>
 8002564:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002570:	d005      	beq.n	800257e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002572:	4b0a      	ldr	r3, [pc, #40]	; (800259c <HAL_Delay+0x44>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	461a      	mov	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4413      	add	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800257e:	bf00      	nop
 8002580:	f7ff ffe0 	bl	8002544 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	429a      	cmp	r2, r3
 800258e:	d8f7      	bhi.n	8002580 <HAL_Delay+0x28>
  {
  }
}
 8002590:	bf00      	nop
 8002592:	bf00      	nop
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000018 	.word	0x20000018

080025a0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e0ed      	b.n	800278e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d102      	bne.n	80025c4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7ff fdb2 	bl	8002128 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0201 	orr.w	r2, r2, #1
 80025d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025d4:	f7ff ffb6 	bl	8002544 <HAL_GetTick>
 80025d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025da:	e012      	b.n	8002602 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025dc:	f7ff ffb2 	bl	8002544 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b0a      	cmp	r3, #10
 80025e8:	d90b      	bls.n	8002602 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2205      	movs	r2, #5
 80025fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e0c5      	b.n	800278e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0e5      	beq.n	80025dc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0202 	bic.w	r2, r2, #2
 800261e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002620:	f7ff ff90 	bl	8002544 <HAL_GetTick>
 8002624:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002626:	e012      	b.n	800264e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002628:	f7ff ff8c 	bl	8002544 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b0a      	cmp	r3, #10
 8002634:	d90b      	bls.n	800264e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2205      	movs	r2, #5
 8002646:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e09f      	b.n	800278e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1e5      	bne.n	8002628 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	7e1b      	ldrb	r3, [r3, #24]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d108      	bne.n	8002676 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	e007      	b.n	8002686 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002684:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	7e5b      	ldrb	r3, [r3, #25]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d108      	bne.n	80026a0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	e007      	b.n	80026b0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	7e9b      	ldrb	r3, [r3, #26]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d108      	bne.n	80026ca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f042 0220 	orr.w	r2, r2, #32
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	e007      	b.n	80026da <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0220 	bic.w	r2, r2, #32
 80026d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	7edb      	ldrb	r3, [r3, #27]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d108      	bne.n	80026f4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0210 	bic.w	r2, r2, #16
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	e007      	b.n	8002704 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0210 	orr.w	r2, r2, #16
 8002702:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	7f1b      	ldrb	r3, [r3, #28]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d108      	bne.n	800271e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0208 	orr.w	r2, r2, #8
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	e007      	b.n	800272e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0208 	bic.w	r2, r2, #8
 800272c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	7f5b      	ldrb	r3, [r3, #29]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d108      	bne.n	8002748 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f042 0204 	orr.w	r2, r2, #4
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	e007      	b.n	8002758 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0204 	bic.w	r2, r2, #4
 8002756:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	431a      	orrs	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	ea42 0103 	orr.w	r1, r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	1e5a      	subs	r2, r3, #1
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002796:	b480      	push	{r7}
 8002798:	b087      	sub	sp, #28
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027ac:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80027ae:	7cfb      	ldrb	r3, [r7, #19]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d003      	beq.n	80027bc <HAL_CAN_ConfigFilter+0x26>
 80027b4:	7cfb      	ldrb	r3, [r7, #19]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	f040 80aa 	bne.w	8002910 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027c2:	f043 0201 	orr.w	r2, r3, #1
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	f003 031f 	and.w	r3, r3, #31
 80027d4:	2201      	movs	r2, #1
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	401a      	ands	r2, r3
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d123      	bne.n	800283e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	43db      	mvns	r3, r3
 8002800:	401a      	ands	r2, r3
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002818:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	3248      	adds	r2, #72	; 0x48
 800281e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002832:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002834:	6979      	ldr	r1, [r7, #20]
 8002836:	3348      	adds	r3, #72	; 0x48
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	440b      	add	r3, r1
 800283c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d122      	bne.n	800288c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	431a      	orrs	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002866:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	3248      	adds	r2, #72	; 0x48
 800286c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002880:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002882:	6979      	ldr	r1, [r7, #20]
 8002884:	3348      	adds	r3, #72	; 0x48
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	440b      	add	r3, r1
 800288a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d109      	bne.n	80028a8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	43db      	mvns	r3, r3
 800289e:	401a      	ands	r2, r3
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80028a6:	e007      	b.n	80028b8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	431a      	orrs	r2, r3
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d109      	bne.n	80028d4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	43db      	mvns	r3, r3
 80028ca:	401a      	ands	r2, r3
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80028d2:	e007      	b.n	80028e4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	431a      	orrs	r2, r3
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d107      	bne.n	80028fc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	431a      	orrs	r2, r3
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002902:	f023 0201 	bic.w	r2, r3, #1
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	e006      	b.n	800291e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
  }
}
 800291e:	4618      	mov	r0, r3
 8002920:	371c      	adds	r7, #28
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr

08002928 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b01      	cmp	r3, #1
 800293a:	d12e      	bne.n	800299a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0201 	bic.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002954:	f7ff fdf6 	bl	8002544 <HAL_GetTick>
 8002958:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800295a:	e012      	b.n	8002982 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800295c:	f7ff fdf2 	bl	8002544 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b0a      	cmp	r3, #10
 8002968:	d90b      	bls.n	8002982 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2205      	movs	r2, #5
 800297a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e012      	b.n	80029a8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1e5      	bne.n	800295c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002996:	2300      	movs	r3, #0
 8002998:	e006      	b.n	80029a8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
  }
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b089      	sub	sp, #36	; 0x24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
 80029bc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029c4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80029ce:	7ffb      	ldrb	r3, [r7, #31]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d003      	beq.n	80029dc <HAL_CAN_AddTxMessage+0x2c>
 80029d4:	7ffb      	ldrb	r3, [r7, #31]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	f040 80ad 	bne.w	8002b36 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10a      	bne.n	80029fc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d105      	bne.n	80029fc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 8095 	beq.w	8002b26 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	0e1b      	lsrs	r3, r3, #24
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002a06:	2201      	movs	r2, #1
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10d      	bne.n	8002a34 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a22:	68f9      	ldr	r1, [r7, #12]
 8002a24:	6809      	ldr	r1, [r1, #0]
 8002a26:	431a      	orrs	r2, r3
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	3318      	adds	r3, #24
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	440b      	add	r3, r1
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	e00f      	b.n	8002a54 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a3e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a44:	68f9      	ldr	r1, [r7, #12]
 8002a46:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002a48:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	3318      	adds	r3, #24
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	440b      	add	r3, r1
 8002a52:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6819      	ldr	r1, [r3, #0]
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	3318      	adds	r3, #24
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	440b      	add	r3, r1
 8002a64:	3304      	adds	r3, #4
 8002a66:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	7d1b      	ldrb	r3, [r3, #20]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d111      	bne.n	8002a94 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	3318      	adds	r3, #24
 8002a78:	011b      	lsls	r3, r3, #4
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	6811      	ldr	r1, [r2, #0]
 8002a84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	3318      	adds	r3, #24
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	440b      	add	r3, r1
 8002a90:	3304      	adds	r3, #4
 8002a92:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3307      	adds	r3, #7
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	061a      	lsls	r2, r3, #24
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3306      	adds	r3, #6
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	041b      	lsls	r3, r3, #16
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	3305      	adds	r3, #5
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	021b      	lsls	r3, r3, #8
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	3204      	adds	r2, #4
 8002ab4:	7812      	ldrb	r2, [r2, #0]
 8002ab6:	4610      	mov	r0, r2
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	6811      	ldr	r1, [r2, #0]
 8002abc:	ea43 0200 	orr.w	r2, r3, r0
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	440b      	add	r3, r1
 8002ac6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002aca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3303      	adds	r3, #3
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	061a      	lsls	r2, r3, #24
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3302      	adds	r3, #2
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	041b      	lsls	r3, r3, #16
 8002adc:	431a      	orrs	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	021b      	lsls	r3, r3, #8
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	7812      	ldrb	r2, [r2, #0]
 8002aec:	4610      	mov	r0, r2
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	6811      	ldr	r1, [r2, #0]
 8002af2:	ea43 0200 	orr.w	r2, r3, r0
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	011b      	lsls	r3, r3, #4
 8002afa:	440b      	add	r3, r1
 8002afc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002b00:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	3318      	adds	r3, #24
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	4413      	add	r3, r2
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	6811      	ldr	r1, [r2, #0]
 8002b14:	f043 0201 	orr.w	r2, r3, #1
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	3318      	adds	r3, #24
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	440b      	add	r3, r1
 8002b20:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002b22:	2300      	movs	r3, #0
 8002b24:	e00e      	b.n	8002b44 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e006      	b.n	8002b44 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
  }
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3724      	adds	r7, #36	; 0x24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr

08002b4e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b087      	sub	sp, #28
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	60f8      	str	r0, [r7, #12]
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	607a      	str	r2, [r7, #4]
 8002b5a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b62:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b64:	7dfb      	ldrb	r3, [r7, #23]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d003      	beq.n	8002b72 <HAL_CAN_GetRxMessage+0x24>
 8002b6a:	7dfb      	ldrb	r3, [r7, #23]
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	f040 8103 	bne.w	8002d78 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10e      	bne.n	8002b96 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d116      	bne.n	8002bb4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e0f7      	b.n	8002d86 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	f003 0303 	and.w	r3, r3, #3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d107      	bne.n	8002bb4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0e8      	b.n	8002d86 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	331b      	adds	r3, #27
 8002bbc:	011b      	lsls	r3, r3, #4
 8002bbe:	4413      	add	r3, r2
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0204 	and.w	r2, r3, #4
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10c      	bne.n	8002bec <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	331b      	adds	r3, #27
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	4413      	add	r3, r2
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	0d5b      	lsrs	r3, r3, #21
 8002be2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	e00b      	b.n	8002c04 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	331b      	adds	r3, #27
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	4413      	add	r3, r2
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	08db      	lsrs	r3, r3, #3
 8002bfc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	331b      	adds	r3, #27
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	4413      	add	r3, r2
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0202 	and.w	r2, r3, #2
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	331b      	adds	r3, #27
 8002c22:	011b      	lsls	r3, r3, #4
 8002c24:	4413      	add	r3, r2
 8002c26:	3304      	adds	r3, #4
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2208      	movs	r2, #8
 8002c36:	611a      	str	r2, [r3, #16]
 8002c38:	e00b      	b.n	8002c52 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	331b      	adds	r3, #27
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	4413      	add	r3, r2
 8002c46:	3304      	adds	r3, #4
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 020f 	and.w	r2, r3, #15
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	331b      	adds	r3, #27
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3304      	adds	r3, #4
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	0a1b      	lsrs	r3, r3, #8
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	331b      	adds	r3, #27
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	4413      	add	r3, r2
 8002c76:	3304      	adds	r3, #4
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	0c1b      	lsrs	r3, r3, #16
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	0a1a      	lsrs	r2, r3, #8
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	3301      	adds	r3, #1
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	4413      	add	r3, r2
 8002cbc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	0c1a      	lsrs	r2, r3, #16
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	3302      	adds	r3, #2
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	011b      	lsls	r3, r3, #4
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	0e1a      	lsrs	r2, r3, #24
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	3303      	adds	r3, #3
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	4413      	add	r3, r2
 8002cf0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	4413      	add	r3, r2
 8002d08:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	0a1a      	lsrs	r2, r3, #8
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	3305      	adds	r3, #5
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	4413      	add	r3, r2
 8002d22:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	0c1a      	lsrs	r2, r3, #16
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	3306      	adds	r3, #6
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	0e1a      	lsrs	r2, r3, #24
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	3307      	adds	r3, #7
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d108      	bne.n	8002d64 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68da      	ldr	r2, [r3, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f042 0220 	orr.w	r2, r2, #32
 8002d60:	60da      	str	r2, [r3, #12]
 8002d62:	e007      	b.n	8002d74 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	691a      	ldr	r2, [r3, #16]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0220 	orr.w	r2, r2, #32
 8002d72:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002d74:	2300      	movs	r3, #0
 8002d76:	e006      	b.n	8002d86 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
  }
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	371c      	adds	r7, #28
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr

08002d90 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002da0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d002      	beq.n	8002dae <HAL_CAN_ActivateNotification+0x1e>
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d109      	bne.n	8002dc2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6959      	ldr	r1, [r3, #20]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	e006      	b.n	8002dd0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
  }
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr

08002dda <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b08a      	sub	sp, #40	; 0x28
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002de2:	2300      	movs	r3, #0
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d07c      	beq.n	8002f1a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d023      	beq.n	8002e72 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f983 	bl	8003148 <HAL_CAN_TxMailbox0CompleteCallback>
 8002e42:	e016      	b.n	8002e72 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d004      	beq.n	8002e58 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24
 8002e56:	e00c      	b.n	8002e72 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d004      	beq.n	8002e6c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
 8002e6a:	e002      	b.n	8002e72 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f986 	bl	800317e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d024      	beq.n	8002ec6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e84:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f962 	bl	800315a <HAL_CAN_TxMailbox1CompleteCallback>
 8002e96:	e016      	b.n	8002ec6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d004      	beq.n	8002eac <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eaa:	e00c      	b.n	8002ec6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d004      	beq.n	8002ec0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ebe:	e002      	b.n	8002ec6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f965 	bl	8003190 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d024      	beq.n	8002f1a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ed8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f941 	bl	800316c <HAL_CAN_TxMailbox2CompleteCallback>
 8002eea:	e016      	b.n	8002f1a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d004      	beq.n	8002f00 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002efc:	627b      	str	r3, [r7, #36]	; 0x24
 8002efe:	e00c      	b.n	8002f1a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d004      	beq.n	8002f14 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24
 8002f12:	e002      	b.n	8002f1a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 f944 	bl	80031a2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	f003 0308 	and.w	r3, r3, #8
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00c      	beq.n	8002f3e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f003 0310 	and.w	r3, r3, #16
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d007      	beq.n	8002f3e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f34:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2210      	movs	r2, #16
 8002f3c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00b      	beq.n	8002f60 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d006      	beq.n	8002f60 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2208      	movs	r2, #8
 8002f58:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f92a 	bl	80031b4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d009      	beq.n	8002f7e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f003 0303 	and.w	r3, r3, #3
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d002      	beq.n	8002f7e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7fe fcd3 	bl	8001924 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00c      	beq.n	8002fa2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	f003 0310 	and.w	r3, r3, #16
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d007      	beq.n	8002fa2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f98:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2210      	movs	r2, #16
 8002fa0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	f003 0320 	and.w	r3, r3, #32
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00b      	beq.n	8002fc4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d006      	beq.n	8002fc4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2208      	movs	r2, #8
 8002fbc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f90a 	bl	80031d8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	f003 0310 	and.w	r3, r3, #16
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d009      	beq.n	8002fe2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d002      	beq.n	8002fe2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 f8f2 	bl	80031c6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00b      	beq.n	8003004 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f003 0310 	and.w	r3, r3, #16
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d006      	beq.n	8003004 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2210      	movs	r2, #16
 8002ffc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f8f3 	bl	80031ea <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00b      	beq.n	8003026 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	f003 0308 	and.w	r3, r3, #8
 8003014:	2b00      	cmp	r3, #0
 8003016:	d006      	beq.n	8003026 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2208      	movs	r2, #8
 800301e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f8eb 	bl	80031fc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d07b      	beq.n	8003128 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	2b00      	cmp	r3, #0
 8003038:	d072      	beq.n	8003120 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	f043 0301 	orr.w	r3, r3, #1
 8003054:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	f043 0302 	orr.w	r3, r3, #2
 8003070:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	f043 0304 	orr.w	r3, r3, #4
 800308c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003094:	2b00      	cmp	r3, #0
 8003096:	d043      	beq.n	8003120 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d03e      	beq.n	8003120 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030a8:	2b60      	cmp	r3, #96	; 0x60
 80030aa:	d02b      	beq.n	8003104 <HAL_CAN_IRQHandler+0x32a>
 80030ac:	2b60      	cmp	r3, #96	; 0x60
 80030ae:	d82e      	bhi.n	800310e <HAL_CAN_IRQHandler+0x334>
 80030b0:	2b50      	cmp	r3, #80	; 0x50
 80030b2:	d022      	beq.n	80030fa <HAL_CAN_IRQHandler+0x320>
 80030b4:	2b50      	cmp	r3, #80	; 0x50
 80030b6:	d82a      	bhi.n	800310e <HAL_CAN_IRQHandler+0x334>
 80030b8:	2b40      	cmp	r3, #64	; 0x40
 80030ba:	d019      	beq.n	80030f0 <HAL_CAN_IRQHandler+0x316>
 80030bc:	2b40      	cmp	r3, #64	; 0x40
 80030be:	d826      	bhi.n	800310e <HAL_CAN_IRQHandler+0x334>
 80030c0:	2b30      	cmp	r3, #48	; 0x30
 80030c2:	d010      	beq.n	80030e6 <HAL_CAN_IRQHandler+0x30c>
 80030c4:	2b30      	cmp	r3, #48	; 0x30
 80030c6:	d822      	bhi.n	800310e <HAL_CAN_IRQHandler+0x334>
 80030c8:	2b10      	cmp	r3, #16
 80030ca:	d002      	beq.n	80030d2 <HAL_CAN_IRQHandler+0x2f8>
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	d005      	beq.n	80030dc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80030d0:	e01d      	b.n	800310e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	f043 0308 	orr.w	r3, r3, #8
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030da:	e019      	b.n	8003110 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	f043 0310 	orr.w	r3, r3, #16
 80030e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030e4:	e014      	b.n	8003110 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	f043 0320 	orr.w	r3, r3, #32
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030ee:	e00f      	b.n	8003110 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030f8:	e00a      	b.n	8003110 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003102:	e005      	b.n	8003110 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800310c:	e000      	b.n	8003110 <HAL_CAN_IRQHandler+0x336>
            break;
 800310e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699a      	ldr	r2, [r3, #24]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800311e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2204      	movs	r2, #4
 8003126:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	2b00      	cmp	r3, #0
 800312c:	d008      	beq.n	8003140 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	431a      	orrs	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f867 	bl	800320e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003140:	bf00      	nop
 8003142:	3728      	adds	r7, #40	; 0x28
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr

0800315a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr

0800316c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr

0800317e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr

08003190 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr

080031a2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr

080031b4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr

080031c6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr

080031d8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr

080031ea <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr

080031fc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	bc80      	pop	{r7}
 800320c:	4770      	bx	lr

0800320e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr

08003220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003230:	4b0c      	ldr	r3, [pc, #48]	; (8003264 <__NVIC_SetPriorityGrouping+0x44>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800323c:	4013      	ands	r3, r2
 800323e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800324c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003252:	4a04      	ldr	r2, [pc, #16]	; (8003264 <__NVIC_SetPriorityGrouping+0x44>)
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	60d3      	str	r3, [r2, #12]
}
 8003258:	bf00      	nop
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	bc80      	pop	{r7}
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	e000ed00 	.word	0xe000ed00

08003268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800326c:	4b04      	ldr	r3, [pc, #16]	; (8003280 <__NVIC_GetPriorityGrouping+0x18>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	0a1b      	lsrs	r3, r3, #8
 8003272:	f003 0307 	and.w	r3, r3, #7
}
 8003276:	4618      	mov	r0, r3
 8003278:	46bd      	mov	sp, r7
 800327a:	bc80      	pop	{r7}
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	e000ed00 	.word	0xe000ed00

08003284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800328e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003292:	2b00      	cmp	r3, #0
 8003294:	db0b      	blt.n	80032ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	f003 021f 	and.w	r2, r3, #31
 800329c:	4906      	ldr	r1, [pc, #24]	; (80032b8 <__NVIC_EnableIRQ+0x34>)
 800329e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	2001      	movs	r0, #1
 80032a6:	fa00 f202 	lsl.w	r2, r0, r2
 80032aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr
 80032b8:	e000e100 	.word	0xe000e100

080032bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	4603      	mov	r3, r0
 80032c4:	6039      	str	r1, [r7, #0]
 80032c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	db0a      	blt.n	80032e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	490c      	ldr	r1, [pc, #48]	; (8003308 <__NVIC_SetPriority+0x4c>)
 80032d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032da:	0112      	lsls	r2, r2, #4
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	440b      	add	r3, r1
 80032e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032e4:	e00a      	b.n	80032fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	4908      	ldr	r1, [pc, #32]	; (800330c <__NVIC_SetPriority+0x50>)
 80032ec:	79fb      	ldrb	r3, [r7, #7]
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	3b04      	subs	r3, #4
 80032f4:	0112      	lsls	r2, r2, #4
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	440b      	add	r3, r1
 80032fa:	761a      	strb	r2, [r3, #24]
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	e000e100 	.word	0xe000e100
 800330c:	e000ed00 	.word	0xe000ed00

08003310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003310:	b480      	push	{r7}
 8003312:	b089      	sub	sp, #36	; 0x24
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f1c3 0307 	rsb	r3, r3, #7
 800332a:	2b04      	cmp	r3, #4
 800332c:	bf28      	it	cs
 800332e:	2304      	movcs	r3, #4
 8003330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	3304      	adds	r3, #4
 8003336:	2b06      	cmp	r3, #6
 8003338:	d902      	bls.n	8003340 <NVIC_EncodePriority+0x30>
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	3b03      	subs	r3, #3
 800333e:	e000      	b.n	8003342 <NVIC_EncodePriority+0x32>
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003344:	f04f 32ff 	mov.w	r2, #4294967295
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	43da      	mvns	r2, r3
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	401a      	ands	r2, r3
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003358:	f04f 31ff 	mov.w	r1, #4294967295
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	fa01 f303 	lsl.w	r3, r1, r3
 8003362:	43d9      	mvns	r1, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003368:	4313      	orrs	r3, r2
         );
}
 800336a:	4618      	mov	r0, r3
 800336c:	3724      	adds	r7, #36	; 0x24
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr

08003374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3b01      	subs	r3, #1
 8003380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003384:	d301      	bcc.n	800338a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003386:	2301      	movs	r3, #1
 8003388:	e00f      	b.n	80033aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800338a:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <SysTick_Config+0x40>)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3b01      	subs	r3, #1
 8003390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003392:	210f      	movs	r1, #15
 8003394:	f04f 30ff 	mov.w	r0, #4294967295
 8003398:	f7ff ff90 	bl	80032bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800339c:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <SysTick_Config+0x40>)
 800339e:	2200      	movs	r2, #0
 80033a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033a2:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <SysTick_Config+0x40>)
 80033a4:	2207      	movs	r2, #7
 80033a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	e000e010 	.word	0xe000e010

080033b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff ff2d 	bl	8003220 <__NVIC_SetPriorityGrouping>
}
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b086      	sub	sp, #24
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	4603      	mov	r3, r0
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
 80033da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033e0:	f7ff ff42 	bl	8003268 <__NVIC_GetPriorityGrouping>
 80033e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	6978      	ldr	r0, [r7, #20]
 80033ec:	f7ff ff90 	bl	8003310 <NVIC_EncodePriority>
 80033f0:	4602      	mov	r2, r0
 80033f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033f6:	4611      	mov	r1, r2
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ff5f 	bl	80032bc <__NVIC_SetPriority>
}
 80033fe:	bf00      	nop
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	4603      	mov	r3, r0
 800340e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff ff35 	bl	8003284 <__NVIC_EnableIRQ>
}
 800341a:	bf00      	nop
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b082      	sub	sp, #8
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7ff ffa2 	bl	8003374 <SysTick_Config>
 8003430:	4603      	mov	r3, r0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800343a:	b480      	push	{r7}
 800343c:	b085      	sub	sp, #20
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d008      	beq.n	8003464 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2204      	movs	r2, #4
 8003456:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e020      	b.n	80034a6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 020e 	bic.w	r2, r2, #14
 8003472:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0201 	bic.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348c:	2101      	movs	r1, #1
 800348e:	fa01 f202 	lsl.w	r2, r1, r2
 8003492:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr

080034b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d005      	beq.n	80034d4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2204      	movs	r2, #4
 80034cc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	73fb      	strb	r3, [r7, #15]
 80034d2:	e051      	b.n	8003578 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 020e 	bic.w	r2, r2, #14
 80034e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0201 	bic.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a22      	ldr	r2, [pc, #136]	; (8003584 <HAL_DMA_Abort_IT+0xd4>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d029      	beq.n	8003552 <HAL_DMA_Abort_IT+0xa2>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a21      	ldr	r2, [pc, #132]	; (8003588 <HAL_DMA_Abort_IT+0xd8>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d022      	beq.n	800354e <HAL_DMA_Abort_IT+0x9e>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a1f      	ldr	r2, [pc, #124]	; (800358c <HAL_DMA_Abort_IT+0xdc>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d01a      	beq.n	8003548 <HAL_DMA_Abort_IT+0x98>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a1e      	ldr	r2, [pc, #120]	; (8003590 <HAL_DMA_Abort_IT+0xe0>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d012      	beq.n	8003542 <HAL_DMA_Abort_IT+0x92>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a1c      	ldr	r2, [pc, #112]	; (8003594 <HAL_DMA_Abort_IT+0xe4>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d00a      	beq.n	800353c <HAL_DMA_Abort_IT+0x8c>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a1b      	ldr	r2, [pc, #108]	; (8003598 <HAL_DMA_Abort_IT+0xe8>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d102      	bne.n	8003536 <HAL_DMA_Abort_IT+0x86>
 8003530:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003534:	e00e      	b.n	8003554 <HAL_DMA_Abort_IT+0xa4>
 8003536:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800353a:	e00b      	b.n	8003554 <HAL_DMA_Abort_IT+0xa4>
 800353c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003540:	e008      	b.n	8003554 <HAL_DMA_Abort_IT+0xa4>
 8003542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003546:	e005      	b.n	8003554 <HAL_DMA_Abort_IT+0xa4>
 8003548:	f44f 7380 	mov.w	r3, #256	; 0x100
 800354c:	e002      	b.n	8003554 <HAL_DMA_Abort_IT+0xa4>
 800354e:	2310      	movs	r3, #16
 8003550:	e000      	b.n	8003554 <HAL_DMA_Abort_IT+0xa4>
 8003552:	2301      	movs	r3, #1
 8003554:	4a11      	ldr	r2, [pc, #68]	; (800359c <HAL_DMA_Abort_IT+0xec>)
 8003556:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	4798      	blx	r3
    } 
  }
  return status;
 8003578:	7bfb      	ldrb	r3, [r7, #15]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40020008 	.word	0x40020008
 8003588:	4002001c 	.word	0x4002001c
 800358c:	40020030 	.word	0x40020030
 8003590:	40020044 	.word	0x40020044
 8003594:	40020058 	.word	0x40020058
 8003598:	4002006c 	.word	0x4002006c
 800359c:	40020000 	.word	0x40020000

080035a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b08b      	sub	sp, #44	; 0x2c
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035aa:	2300      	movs	r3, #0
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80035ae:	2300      	movs	r3, #0
 80035b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035b2:	e169      	b.n	8003888 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80035b4:	2201      	movs	r2, #1
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	69fa      	ldr	r2, [r7, #28]
 80035c4:	4013      	ands	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	f040 8158 	bne.w	8003882 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	4a9a      	ldr	r2, [pc, #616]	; (8003840 <HAL_GPIO_Init+0x2a0>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d05e      	beq.n	800369a <HAL_GPIO_Init+0xfa>
 80035dc:	4a98      	ldr	r2, [pc, #608]	; (8003840 <HAL_GPIO_Init+0x2a0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d875      	bhi.n	80036ce <HAL_GPIO_Init+0x12e>
 80035e2:	4a98      	ldr	r2, [pc, #608]	; (8003844 <HAL_GPIO_Init+0x2a4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d058      	beq.n	800369a <HAL_GPIO_Init+0xfa>
 80035e8:	4a96      	ldr	r2, [pc, #600]	; (8003844 <HAL_GPIO_Init+0x2a4>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d86f      	bhi.n	80036ce <HAL_GPIO_Init+0x12e>
 80035ee:	4a96      	ldr	r2, [pc, #600]	; (8003848 <HAL_GPIO_Init+0x2a8>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d052      	beq.n	800369a <HAL_GPIO_Init+0xfa>
 80035f4:	4a94      	ldr	r2, [pc, #592]	; (8003848 <HAL_GPIO_Init+0x2a8>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d869      	bhi.n	80036ce <HAL_GPIO_Init+0x12e>
 80035fa:	4a94      	ldr	r2, [pc, #592]	; (800384c <HAL_GPIO_Init+0x2ac>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d04c      	beq.n	800369a <HAL_GPIO_Init+0xfa>
 8003600:	4a92      	ldr	r2, [pc, #584]	; (800384c <HAL_GPIO_Init+0x2ac>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d863      	bhi.n	80036ce <HAL_GPIO_Init+0x12e>
 8003606:	4a92      	ldr	r2, [pc, #584]	; (8003850 <HAL_GPIO_Init+0x2b0>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d046      	beq.n	800369a <HAL_GPIO_Init+0xfa>
 800360c:	4a90      	ldr	r2, [pc, #576]	; (8003850 <HAL_GPIO_Init+0x2b0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d85d      	bhi.n	80036ce <HAL_GPIO_Init+0x12e>
 8003612:	2b12      	cmp	r3, #18
 8003614:	d82a      	bhi.n	800366c <HAL_GPIO_Init+0xcc>
 8003616:	2b12      	cmp	r3, #18
 8003618:	d859      	bhi.n	80036ce <HAL_GPIO_Init+0x12e>
 800361a:	a201      	add	r2, pc, #4	; (adr r2, 8003620 <HAL_GPIO_Init+0x80>)
 800361c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003620:	0800369b 	.word	0x0800369b
 8003624:	08003675 	.word	0x08003675
 8003628:	08003687 	.word	0x08003687
 800362c:	080036c9 	.word	0x080036c9
 8003630:	080036cf 	.word	0x080036cf
 8003634:	080036cf 	.word	0x080036cf
 8003638:	080036cf 	.word	0x080036cf
 800363c:	080036cf 	.word	0x080036cf
 8003640:	080036cf 	.word	0x080036cf
 8003644:	080036cf 	.word	0x080036cf
 8003648:	080036cf 	.word	0x080036cf
 800364c:	080036cf 	.word	0x080036cf
 8003650:	080036cf 	.word	0x080036cf
 8003654:	080036cf 	.word	0x080036cf
 8003658:	080036cf 	.word	0x080036cf
 800365c:	080036cf 	.word	0x080036cf
 8003660:	080036cf 	.word	0x080036cf
 8003664:	0800367d 	.word	0x0800367d
 8003668:	08003691 	.word	0x08003691
 800366c:	4a79      	ldr	r2, [pc, #484]	; (8003854 <HAL_GPIO_Init+0x2b4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d013      	beq.n	800369a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003672:	e02c      	b.n	80036ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	623b      	str	r3, [r7, #32]
          break;
 800367a:	e029      	b.n	80036d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	3304      	adds	r3, #4
 8003682:	623b      	str	r3, [r7, #32]
          break;
 8003684:	e024      	b.n	80036d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	3308      	adds	r3, #8
 800368c:	623b      	str	r3, [r7, #32]
          break;
 800368e:	e01f      	b.n	80036d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	330c      	adds	r3, #12
 8003696:	623b      	str	r3, [r7, #32]
          break;
 8003698:	e01a      	b.n	80036d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d102      	bne.n	80036a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80036a2:	2304      	movs	r3, #4
 80036a4:	623b      	str	r3, [r7, #32]
          break;
 80036a6:	e013      	b.n	80036d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d105      	bne.n	80036bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036b0:	2308      	movs	r3, #8
 80036b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	69fa      	ldr	r2, [r7, #28]
 80036b8:	611a      	str	r2, [r3, #16]
          break;
 80036ba:	e009      	b.n	80036d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036bc:	2308      	movs	r3, #8
 80036be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69fa      	ldr	r2, [r7, #28]
 80036c4:	615a      	str	r2, [r3, #20]
          break;
 80036c6:	e003      	b.n	80036d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80036c8:	2300      	movs	r3, #0
 80036ca:	623b      	str	r3, [r7, #32]
          break;
 80036cc:	e000      	b.n	80036d0 <HAL_GPIO_Init+0x130>
          break;
 80036ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	2bff      	cmp	r3, #255	; 0xff
 80036d4:	d801      	bhi.n	80036da <HAL_GPIO_Init+0x13a>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	e001      	b.n	80036de <HAL_GPIO_Init+0x13e>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	3304      	adds	r3, #4
 80036de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	2bff      	cmp	r3, #255	; 0xff
 80036e4:	d802      	bhi.n	80036ec <HAL_GPIO_Init+0x14c>
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	e002      	b.n	80036f2 <HAL_GPIO_Init+0x152>
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	3b08      	subs	r3, #8
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	210f      	movs	r1, #15
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003700:	43db      	mvns	r3, r3
 8003702:	401a      	ands	r2, r3
 8003704:	6a39      	ldr	r1, [r7, #32]
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	fa01 f303 	lsl.w	r3, r1, r3
 800370c:	431a      	orrs	r2, r3
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 80b1 	beq.w	8003882 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003720:	4b4d      	ldr	r3, [pc, #308]	; (8003858 <HAL_GPIO_Init+0x2b8>)
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	4a4c      	ldr	r2, [pc, #304]	; (8003858 <HAL_GPIO_Init+0x2b8>)
 8003726:	f043 0301 	orr.w	r3, r3, #1
 800372a:	6193      	str	r3, [r2, #24]
 800372c:	4b4a      	ldr	r3, [pc, #296]	; (8003858 <HAL_GPIO_Init+0x2b8>)
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	60bb      	str	r3, [r7, #8]
 8003736:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003738:	4a48      	ldr	r2, [pc, #288]	; (800385c <HAL_GPIO_Init+0x2bc>)
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	089b      	lsrs	r3, r3, #2
 800373e:	3302      	adds	r3, #2
 8003740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003744:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	f003 0303 	and.w	r3, r3, #3
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	220f      	movs	r2, #15
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	4013      	ands	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a40      	ldr	r2, [pc, #256]	; (8003860 <HAL_GPIO_Init+0x2c0>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d013      	beq.n	800378c <HAL_GPIO_Init+0x1ec>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a3f      	ldr	r2, [pc, #252]	; (8003864 <HAL_GPIO_Init+0x2c4>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d00d      	beq.n	8003788 <HAL_GPIO_Init+0x1e8>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a3e      	ldr	r2, [pc, #248]	; (8003868 <HAL_GPIO_Init+0x2c8>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d007      	beq.n	8003784 <HAL_GPIO_Init+0x1e4>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a3d      	ldr	r2, [pc, #244]	; (800386c <HAL_GPIO_Init+0x2cc>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d101      	bne.n	8003780 <HAL_GPIO_Init+0x1e0>
 800377c:	2303      	movs	r3, #3
 800377e:	e006      	b.n	800378e <HAL_GPIO_Init+0x1ee>
 8003780:	2304      	movs	r3, #4
 8003782:	e004      	b.n	800378e <HAL_GPIO_Init+0x1ee>
 8003784:	2302      	movs	r3, #2
 8003786:	e002      	b.n	800378e <HAL_GPIO_Init+0x1ee>
 8003788:	2301      	movs	r3, #1
 800378a:	e000      	b.n	800378e <HAL_GPIO_Init+0x1ee>
 800378c:	2300      	movs	r3, #0
 800378e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003790:	f002 0203 	and.w	r2, r2, #3
 8003794:	0092      	lsls	r2, r2, #2
 8003796:	4093      	lsls	r3, r2
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800379e:	492f      	ldr	r1, [pc, #188]	; (800385c <HAL_GPIO_Init+0x2bc>)
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	089b      	lsrs	r3, r3, #2
 80037a4:	3302      	adds	r3, #2
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d006      	beq.n	80037c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80037b8:	4b2d      	ldr	r3, [pc, #180]	; (8003870 <HAL_GPIO_Init+0x2d0>)
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	492c      	ldr	r1, [pc, #176]	; (8003870 <HAL_GPIO_Init+0x2d0>)
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	608b      	str	r3, [r1, #8]
 80037c4:	e006      	b.n	80037d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80037c6:	4b2a      	ldr	r3, [pc, #168]	; (8003870 <HAL_GPIO_Init+0x2d0>)
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	43db      	mvns	r3, r3
 80037ce:	4928      	ldr	r1, [pc, #160]	; (8003870 <HAL_GPIO_Init+0x2d0>)
 80037d0:	4013      	ands	r3, r2
 80037d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d006      	beq.n	80037ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80037e0:	4b23      	ldr	r3, [pc, #140]	; (8003870 <HAL_GPIO_Init+0x2d0>)
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	4922      	ldr	r1, [pc, #136]	; (8003870 <HAL_GPIO_Init+0x2d0>)
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60cb      	str	r3, [r1, #12]
 80037ec:	e006      	b.n	80037fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80037ee:	4b20      	ldr	r3, [pc, #128]	; (8003870 <HAL_GPIO_Init+0x2d0>)
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	43db      	mvns	r3, r3
 80037f6:	491e      	ldr	r1, [pc, #120]	; (8003870 <HAL_GPIO_Init+0x2d0>)
 80037f8:	4013      	ands	r3, r2
 80037fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d006      	beq.n	8003816 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003808:	4b19      	ldr	r3, [pc, #100]	; (8003870 <HAL_GPIO_Init+0x2d0>)
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	4918      	ldr	r1, [pc, #96]	; (8003870 <HAL_GPIO_Init+0x2d0>)
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	4313      	orrs	r3, r2
 8003812:	604b      	str	r3, [r1, #4]
 8003814:	e006      	b.n	8003824 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003816:	4b16      	ldr	r3, [pc, #88]	; (8003870 <HAL_GPIO_Init+0x2d0>)
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	43db      	mvns	r3, r3
 800381e:	4914      	ldr	r1, [pc, #80]	; (8003870 <HAL_GPIO_Init+0x2d0>)
 8003820:	4013      	ands	r3, r2
 8003822:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d021      	beq.n	8003874 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003830:	4b0f      	ldr	r3, [pc, #60]	; (8003870 <HAL_GPIO_Init+0x2d0>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	490e      	ldr	r1, [pc, #56]	; (8003870 <HAL_GPIO_Init+0x2d0>)
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	4313      	orrs	r3, r2
 800383a:	600b      	str	r3, [r1, #0]
 800383c:	e021      	b.n	8003882 <HAL_GPIO_Init+0x2e2>
 800383e:	bf00      	nop
 8003840:	10320000 	.word	0x10320000
 8003844:	10310000 	.word	0x10310000
 8003848:	10220000 	.word	0x10220000
 800384c:	10210000 	.word	0x10210000
 8003850:	10120000 	.word	0x10120000
 8003854:	10110000 	.word	0x10110000
 8003858:	40021000 	.word	0x40021000
 800385c:	40010000 	.word	0x40010000
 8003860:	40010800 	.word	0x40010800
 8003864:	40010c00 	.word	0x40010c00
 8003868:	40011000 	.word	0x40011000
 800386c:	40011400 	.word	0x40011400
 8003870:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003874:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <HAL_GPIO_Init+0x304>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	43db      	mvns	r3, r3
 800387c:	4909      	ldr	r1, [pc, #36]	; (80038a4 <HAL_GPIO_Init+0x304>)
 800387e:	4013      	ands	r3, r2
 8003880:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	3301      	adds	r3, #1
 8003886:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	fa22 f303 	lsr.w	r3, r2, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	f47f ae8e 	bne.w	80035b4 <HAL_GPIO_Init+0x14>
  }
}
 8003898:	bf00      	nop
 800389a:	bf00      	nop
 800389c:	372c      	adds	r7, #44	; 0x2c
 800389e:	46bd      	mov	sp, r7
 80038a0:	bc80      	pop	{r7}
 80038a2:	4770      	bx	lr
 80038a4:	40010400 	.word	0x40010400

080038a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	460b      	mov	r3, r1
 80038b2:	807b      	strh	r3, [r7, #2]
 80038b4:	4613      	mov	r3, r2
 80038b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038b8:	787b      	ldrb	r3, [r7, #1]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038be:	887a      	ldrh	r2, [r7, #2]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80038c4:	e003      	b.n	80038ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038c6:	887b      	ldrh	r3, [r7, #2]
 80038c8:	041a      	lsls	r2, r3, #16
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	611a      	str	r2, [r3, #16]
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr

080038d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	460b      	mov	r3, r1
 80038e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038ea:	887a      	ldrh	r2, [r7, #2]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4013      	ands	r3, r2
 80038f0:	041a      	lsls	r2, r3, #16
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	43d9      	mvns	r1, r3
 80038f6:	887b      	ldrh	r3, [r7, #2]
 80038f8:	400b      	ands	r3, r1
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	611a      	str	r2, [r3, #16]
}
 8003900:	bf00      	nop
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	bc80      	pop	{r7}
 8003908:	4770      	bx	lr
	...

0800390c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e272      	b.n	8003e04 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	f000 8087 	beq.w	8003a3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800392c:	4b92      	ldr	r3, [pc, #584]	; (8003b78 <HAL_RCC_OscConfig+0x26c>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f003 030c 	and.w	r3, r3, #12
 8003934:	2b04      	cmp	r3, #4
 8003936:	d00c      	beq.n	8003952 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003938:	4b8f      	ldr	r3, [pc, #572]	; (8003b78 <HAL_RCC_OscConfig+0x26c>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f003 030c 	and.w	r3, r3, #12
 8003940:	2b08      	cmp	r3, #8
 8003942:	d112      	bne.n	800396a <HAL_RCC_OscConfig+0x5e>
 8003944:	4b8c      	ldr	r3, [pc, #560]	; (8003b78 <HAL_RCC_OscConfig+0x26c>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800394c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003950:	d10b      	bne.n	800396a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003952:	4b89      	ldr	r3, [pc, #548]	; (8003b78 <HAL_RCC_OscConfig+0x26c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d06c      	beq.n	8003a38 <HAL_RCC_OscConfig+0x12c>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d168      	bne.n	8003a38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e24c      	b.n	8003e04 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003972:	d106      	bne.n	8003982 <HAL_RCC_OscConfig+0x76>
 8003974:	4b80      	ldr	r3, [pc, #512]	; (8003b78 <HAL_RCC_OscConfig+0x26c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a7f      	ldr	r2, [pc, #508]	; (8003b78 <HAL_RCC_OscConfig+0x26c>)
 800397a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	e02e      	b.n	80039e0 <HAL_RCC_OscConfig+0xd4>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10c      	bne.n	80039a4 <HAL_RCC_OscConfig+0x98>
 800398a:	4b7b      	ldr	r3, [pc, #492]	; (8003b78 <HAL_RCC_OscConfig+0x26c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a7a      	ldr	r2, [pc, #488]	; (8003b78 <HAL_RCC_OscConfig+0x26c>)
 8003990:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	4b78      	ldr	r3, [pc, #480]	; (8003b78 <HAL_RCC_OscConfig+0x26c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a77      	ldr	r2, [pc, #476]	; (8003b78 <HAL_RCC_OscConfig+0x26c>)
 800399c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	e01d      	b.n	80039e0 <HAL_RCC_OscConfig+0xd4>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039ac:	d10c      	bne.n	80039c8 <HAL_RCC_OscConfig+0xbc>
 80039ae:	4b72      	ldr	r3, [pc, #456]	; (8003b78 <HAL_RCC_OscConfig+0x26c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a71      	ldr	r2, [pc, #452]	; (8003b78 <HAL_RCC_OscConfig+0x26c>)
 80039b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	4b6f      	ldr	r3, [pc, #444]	; (8003b78 <HAL_RCC_OscConfig+0x26c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a6e      	ldr	r2, [pc, #440]	; (8003b78 <HAL_RCC_OscConfig+0x26c>)
 80039c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	e00b      	b.n	80039e0 <HAL_RCC_OscConfig+0xd4>
 80039c8:	4b6b      	ldr	r3, [pc, #428]	; (8003b78 <HAL_RCC_OscConfig+0x26c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a6a      	ldr	r2, [pc, #424]	; (8003b78 <HAL_RCC_OscConfig+0x26c>)
 80039ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	4b68      	ldr	r3, [pc, #416]	; (8003b78 <HAL_RCC_OscConfig+0x26c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a67      	ldr	r2, [pc, #412]	; (8003b78 <HAL_RCC_OscConfig+0x26c>)
 80039da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d013      	beq.n	8003a10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e8:	f7fe fdac 	bl	8002544 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f0:	f7fe fda8 	bl	8002544 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b64      	cmp	r3, #100	; 0x64
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e200      	b.n	8003e04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a02:	4b5d      	ldr	r3, [pc, #372]	; (8003b78 <HAL_RCC_OscConfig+0x26c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0f0      	beq.n	80039f0 <HAL_RCC_OscConfig+0xe4>
 8003a0e:	e014      	b.n	8003a3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a10:	f7fe fd98 	bl	8002544 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a18:	f7fe fd94 	bl	8002544 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b64      	cmp	r3, #100	; 0x64
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e1ec      	b.n	8003e04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a2a:	4b53      	ldr	r3, [pc, #332]	; (8003b78 <HAL_RCC_OscConfig+0x26c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1f0      	bne.n	8003a18 <HAL_RCC_OscConfig+0x10c>
 8003a36:	e000      	b.n	8003a3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d063      	beq.n	8003b0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a46:	4b4c      	ldr	r3, [pc, #304]	; (8003b78 <HAL_RCC_OscConfig+0x26c>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f003 030c 	and.w	r3, r3, #12
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00b      	beq.n	8003a6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a52:	4b49      	ldr	r3, [pc, #292]	; (8003b78 <HAL_RCC_OscConfig+0x26c>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f003 030c 	and.w	r3, r3, #12
 8003a5a:	2b08      	cmp	r3, #8
 8003a5c:	d11c      	bne.n	8003a98 <HAL_RCC_OscConfig+0x18c>
 8003a5e:	4b46      	ldr	r3, [pc, #280]	; (8003b78 <HAL_RCC_OscConfig+0x26c>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d116      	bne.n	8003a98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a6a:	4b43      	ldr	r3, [pc, #268]	; (8003b78 <HAL_RCC_OscConfig+0x26c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d005      	beq.n	8003a82 <HAL_RCC_OscConfig+0x176>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d001      	beq.n	8003a82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e1c0      	b.n	8003e04 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a82:	4b3d      	ldr	r3, [pc, #244]	; (8003b78 <HAL_RCC_OscConfig+0x26c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	4939      	ldr	r1, [pc, #228]	; (8003b78 <HAL_RCC_OscConfig+0x26c>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a96:	e03a      	b.n	8003b0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d020      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aa0:	4b36      	ldr	r3, [pc, #216]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa6:	f7fe fd4d 	bl	8002544 <HAL_GetTick>
 8003aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aac:	e008      	b.n	8003ac0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aae:	f7fe fd49 	bl	8002544 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e1a1      	b.n	8003e04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac0:	4b2d      	ldr	r3, [pc, #180]	; (8003b78 <HAL_RCC_OscConfig+0x26c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0f0      	beq.n	8003aae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003acc:	4b2a      	ldr	r3, [pc, #168]	; (8003b78 <HAL_RCC_OscConfig+0x26c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	4927      	ldr	r1, [pc, #156]	; (8003b78 <HAL_RCC_OscConfig+0x26c>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	600b      	str	r3, [r1, #0]
 8003ae0:	e015      	b.n	8003b0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ae2:	4b26      	ldr	r3, [pc, #152]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae8:	f7fe fd2c 	bl	8002544 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003af0:	f7fe fd28 	bl	8002544 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e180      	b.n	8003e04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b02:	4b1d      	ldr	r3, [pc, #116]	; (8003b78 <HAL_RCC_OscConfig+0x26c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1f0      	bne.n	8003af0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0308 	and.w	r3, r3, #8
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d03a      	beq.n	8003b90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d019      	beq.n	8003b56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b22:	4b17      	ldr	r3, [pc, #92]	; (8003b80 <HAL_RCC_OscConfig+0x274>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b28:	f7fe fd0c 	bl	8002544 <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b30:	f7fe fd08 	bl	8002544 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e160      	b.n	8003e04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b42:	4b0d      	ldr	r3, [pc, #52]	; (8003b78 <HAL_RCC_OscConfig+0x26c>)
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0f0      	beq.n	8003b30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b4e:	2001      	movs	r0, #1
 8003b50:	f000 face 	bl	80040f0 <RCC_Delay>
 8003b54:	e01c      	b.n	8003b90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b56:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <HAL_RCC_OscConfig+0x274>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b5c:	f7fe fcf2 	bl	8002544 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b62:	e00f      	b.n	8003b84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b64:	f7fe fcee 	bl	8002544 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d908      	bls.n	8003b84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e146      	b.n	8003e04 <HAL_RCC_OscConfig+0x4f8>
 8003b76:	bf00      	nop
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	42420000 	.word	0x42420000
 8003b80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b84:	4b92      	ldr	r3, [pc, #584]	; (8003dd0 <HAL_RCC_OscConfig+0x4c4>)
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1e9      	bne.n	8003b64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 80a6 	beq.w	8003cea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ba2:	4b8b      	ldr	r3, [pc, #556]	; (8003dd0 <HAL_RCC_OscConfig+0x4c4>)
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10d      	bne.n	8003bca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bae:	4b88      	ldr	r3, [pc, #544]	; (8003dd0 <HAL_RCC_OscConfig+0x4c4>)
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	4a87      	ldr	r2, [pc, #540]	; (8003dd0 <HAL_RCC_OscConfig+0x4c4>)
 8003bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bb8:	61d3      	str	r3, [r2, #28]
 8003bba:	4b85      	ldr	r3, [pc, #532]	; (8003dd0 <HAL_RCC_OscConfig+0x4c4>)
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc2:	60bb      	str	r3, [r7, #8]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bca:	4b82      	ldr	r3, [pc, #520]	; (8003dd4 <HAL_RCC_OscConfig+0x4c8>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d118      	bne.n	8003c08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bd6:	4b7f      	ldr	r3, [pc, #508]	; (8003dd4 <HAL_RCC_OscConfig+0x4c8>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a7e      	ldr	r2, [pc, #504]	; (8003dd4 <HAL_RCC_OscConfig+0x4c8>)
 8003bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003be2:	f7fe fcaf 	bl	8002544 <HAL_GetTick>
 8003be6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be8:	e008      	b.n	8003bfc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bea:	f7fe fcab 	bl	8002544 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b64      	cmp	r3, #100	; 0x64
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e103      	b.n	8003e04 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bfc:	4b75      	ldr	r3, [pc, #468]	; (8003dd4 <HAL_RCC_OscConfig+0x4c8>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0f0      	beq.n	8003bea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d106      	bne.n	8003c1e <HAL_RCC_OscConfig+0x312>
 8003c10:	4b6f      	ldr	r3, [pc, #444]	; (8003dd0 <HAL_RCC_OscConfig+0x4c4>)
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	4a6e      	ldr	r2, [pc, #440]	; (8003dd0 <HAL_RCC_OscConfig+0x4c4>)
 8003c16:	f043 0301 	orr.w	r3, r3, #1
 8003c1a:	6213      	str	r3, [r2, #32]
 8003c1c:	e02d      	b.n	8003c7a <HAL_RCC_OscConfig+0x36e>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10c      	bne.n	8003c40 <HAL_RCC_OscConfig+0x334>
 8003c26:	4b6a      	ldr	r3, [pc, #424]	; (8003dd0 <HAL_RCC_OscConfig+0x4c4>)
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	4a69      	ldr	r2, [pc, #420]	; (8003dd0 <HAL_RCC_OscConfig+0x4c4>)
 8003c2c:	f023 0301 	bic.w	r3, r3, #1
 8003c30:	6213      	str	r3, [r2, #32]
 8003c32:	4b67      	ldr	r3, [pc, #412]	; (8003dd0 <HAL_RCC_OscConfig+0x4c4>)
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	4a66      	ldr	r2, [pc, #408]	; (8003dd0 <HAL_RCC_OscConfig+0x4c4>)
 8003c38:	f023 0304 	bic.w	r3, r3, #4
 8003c3c:	6213      	str	r3, [r2, #32]
 8003c3e:	e01c      	b.n	8003c7a <HAL_RCC_OscConfig+0x36e>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	2b05      	cmp	r3, #5
 8003c46:	d10c      	bne.n	8003c62 <HAL_RCC_OscConfig+0x356>
 8003c48:	4b61      	ldr	r3, [pc, #388]	; (8003dd0 <HAL_RCC_OscConfig+0x4c4>)
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	4a60      	ldr	r2, [pc, #384]	; (8003dd0 <HAL_RCC_OscConfig+0x4c4>)
 8003c4e:	f043 0304 	orr.w	r3, r3, #4
 8003c52:	6213      	str	r3, [r2, #32]
 8003c54:	4b5e      	ldr	r3, [pc, #376]	; (8003dd0 <HAL_RCC_OscConfig+0x4c4>)
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	4a5d      	ldr	r2, [pc, #372]	; (8003dd0 <HAL_RCC_OscConfig+0x4c4>)
 8003c5a:	f043 0301 	orr.w	r3, r3, #1
 8003c5e:	6213      	str	r3, [r2, #32]
 8003c60:	e00b      	b.n	8003c7a <HAL_RCC_OscConfig+0x36e>
 8003c62:	4b5b      	ldr	r3, [pc, #364]	; (8003dd0 <HAL_RCC_OscConfig+0x4c4>)
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	4a5a      	ldr	r2, [pc, #360]	; (8003dd0 <HAL_RCC_OscConfig+0x4c4>)
 8003c68:	f023 0301 	bic.w	r3, r3, #1
 8003c6c:	6213      	str	r3, [r2, #32]
 8003c6e:	4b58      	ldr	r3, [pc, #352]	; (8003dd0 <HAL_RCC_OscConfig+0x4c4>)
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	4a57      	ldr	r2, [pc, #348]	; (8003dd0 <HAL_RCC_OscConfig+0x4c4>)
 8003c74:	f023 0304 	bic.w	r3, r3, #4
 8003c78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d015      	beq.n	8003cae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c82:	f7fe fc5f 	bl	8002544 <HAL_GetTick>
 8003c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c88:	e00a      	b.n	8003ca0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c8a:	f7fe fc5b 	bl	8002544 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e0b1      	b.n	8003e04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca0:	4b4b      	ldr	r3, [pc, #300]	; (8003dd0 <HAL_RCC_OscConfig+0x4c4>)
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0ee      	beq.n	8003c8a <HAL_RCC_OscConfig+0x37e>
 8003cac:	e014      	b.n	8003cd8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cae:	f7fe fc49 	bl	8002544 <HAL_GetTick>
 8003cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cb4:	e00a      	b.n	8003ccc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb6:	f7fe fc45 	bl	8002544 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e09b      	b.n	8003e04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ccc:	4b40      	ldr	r3, [pc, #256]	; (8003dd0 <HAL_RCC_OscConfig+0x4c4>)
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1ee      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cd8:	7dfb      	ldrb	r3, [r7, #23]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d105      	bne.n	8003cea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cde:	4b3c      	ldr	r3, [pc, #240]	; (8003dd0 <HAL_RCC_OscConfig+0x4c4>)
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	4a3b      	ldr	r2, [pc, #236]	; (8003dd0 <HAL_RCC_OscConfig+0x4c4>)
 8003ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f000 8087 	beq.w	8003e02 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cf4:	4b36      	ldr	r3, [pc, #216]	; (8003dd0 <HAL_RCC_OscConfig+0x4c4>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f003 030c 	and.w	r3, r3, #12
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	d061      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d146      	bne.n	8003d96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d08:	4b33      	ldr	r3, [pc, #204]	; (8003dd8 <HAL_RCC_OscConfig+0x4cc>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0e:	f7fe fc19 	bl	8002544 <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d16:	f7fe fc15 	bl	8002544 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e06d      	b.n	8003e04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d28:	4b29      	ldr	r3, [pc, #164]	; (8003dd0 <HAL_RCC_OscConfig+0x4c4>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1f0      	bne.n	8003d16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d3c:	d108      	bne.n	8003d50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d3e:	4b24      	ldr	r3, [pc, #144]	; (8003dd0 <HAL_RCC_OscConfig+0x4c4>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	4921      	ldr	r1, [pc, #132]	; (8003dd0 <HAL_RCC_OscConfig+0x4c4>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d50:	4b1f      	ldr	r3, [pc, #124]	; (8003dd0 <HAL_RCC_OscConfig+0x4c4>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a19      	ldr	r1, [r3, #32]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	430b      	orrs	r3, r1
 8003d62:	491b      	ldr	r1, [pc, #108]	; (8003dd0 <HAL_RCC_OscConfig+0x4c4>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d68:	4b1b      	ldr	r3, [pc, #108]	; (8003dd8 <HAL_RCC_OscConfig+0x4cc>)
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6e:	f7fe fbe9 	bl	8002544 <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d74:	e008      	b.n	8003d88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d76:	f7fe fbe5 	bl	8002544 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e03d      	b.n	8003e04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d88:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <HAL_RCC_OscConfig+0x4c4>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0f0      	beq.n	8003d76 <HAL_RCC_OscConfig+0x46a>
 8003d94:	e035      	b.n	8003e02 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d96:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <HAL_RCC_OscConfig+0x4cc>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9c:	f7fe fbd2 	bl	8002544 <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003da4:	f7fe fbce 	bl	8002544 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e026      	b.n	8003e04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003db6:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <HAL_RCC_OscConfig+0x4c4>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f0      	bne.n	8003da4 <HAL_RCC_OscConfig+0x498>
 8003dc2:	e01e      	b.n	8003e02 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d107      	bne.n	8003ddc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e019      	b.n	8003e04 <HAL_RCC_OscConfig+0x4f8>
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	40007000 	.word	0x40007000
 8003dd8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ddc:	4b0b      	ldr	r3, [pc, #44]	; (8003e0c <HAL_RCC_OscConfig+0x500>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d106      	bne.n	8003dfe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d001      	beq.n	8003e02 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e000      	b.n	8003e04 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3718      	adds	r7, #24
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40021000 	.word	0x40021000

08003e10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e0d0      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e24:	4b6a      	ldr	r3, [pc, #424]	; (8003fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0307 	and.w	r3, r3, #7
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d910      	bls.n	8003e54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e32:	4b67      	ldr	r3, [pc, #412]	; (8003fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f023 0207 	bic.w	r2, r3, #7
 8003e3a:	4965      	ldr	r1, [pc, #404]	; (8003fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e42:	4b63      	ldr	r3, [pc, #396]	; (8003fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0307 	and.w	r3, r3, #7
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d001      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e0b8      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d020      	beq.n	8003ea2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d005      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e6c:	4b59      	ldr	r3, [pc, #356]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	4a58      	ldr	r2, [pc, #352]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0308 	and.w	r3, r3, #8
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d005      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e84:	4b53      	ldr	r3, [pc, #332]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	4a52      	ldr	r2, [pc, #328]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e90:	4b50      	ldr	r3, [pc, #320]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	494d      	ldr	r1, [pc, #308]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d040      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d107      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eb6:	4b47      	ldr	r3, [pc, #284]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d115      	bne.n	8003eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e07f      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d107      	bne.n	8003ede <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ece:	4b41      	ldr	r3, [pc, #260]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d109      	bne.n	8003eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e073      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ede:	4b3d      	ldr	r3, [pc, #244]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e06b      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eee:	4b39      	ldr	r3, [pc, #228]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f023 0203 	bic.w	r2, r3, #3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	4936      	ldr	r1, [pc, #216]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f00:	f7fe fb20 	bl	8002544 <HAL_GetTick>
 8003f04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f06:	e00a      	b.n	8003f1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f08:	f7fe fb1c 	bl	8002544 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e053      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f1e:	4b2d      	ldr	r3, [pc, #180]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f003 020c 	and.w	r2, r3, #12
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d1eb      	bne.n	8003f08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f30:	4b27      	ldr	r3, [pc, #156]	; (8003fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d210      	bcs.n	8003f60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f3e:	4b24      	ldr	r3, [pc, #144]	; (8003fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f023 0207 	bic.w	r2, r3, #7
 8003f46:	4922      	ldr	r1, [pc, #136]	; (8003fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f4e:	4b20      	ldr	r3, [pc, #128]	; (8003fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0307 	and.w	r3, r3, #7
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d001      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e032      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d008      	beq.n	8003f7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f6c:	4b19      	ldr	r3, [pc, #100]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	4916      	ldr	r1, [pc, #88]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d009      	beq.n	8003f9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f8a:	4b12      	ldr	r3, [pc, #72]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	490e      	ldr	r1, [pc, #56]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f9e:	f000 f821 	bl	8003fe4 <HAL_RCC_GetSysClockFreq>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	4b0b      	ldr	r3, [pc, #44]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	091b      	lsrs	r3, r3, #4
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	490a      	ldr	r1, [pc, #40]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003fb0:	5ccb      	ldrb	r3, [r1, r3]
 8003fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb6:	4a09      	ldr	r2, [pc, #36]	; (8003fdc <HAL_RCC_ClockConfig+0x1cc>)
 8003fb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003fba:	4b09      	ldr	r3, [pc, #36]	; (8003fe0 <HAL_RCC_ClockConfig+0x1d0>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fe fa7e 	bl	80024c0 <HAL_InitTick>

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	40022000 	.word	0x40022000
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	08005bb4 	.word	0x08005bb4
 8003fdc:	20000010 	.word	0x20000010
 8003fe0:	20000014 	.word	0x20000014

08003fe4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	60fb      	str	r3, [r7, #12]
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60bb      	str	r3, [r7, #8]
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	617b      	str	r3, [r7, #20]
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ffe:	4b1e      	ldr	r3, [pc, #120]	; (8004078 <HAL_RCC_GetSysClockFreq+0x94>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f003 030c 	and.w	r3, r3, #12
 800400a:	2b04      	cmp	r3, #4
 800400c:	d002      	beq.n	8004014 <HAL_RCC_GetSysClockFreq+0x30>
 800400e:	2b08      	cmp	r3, #8
 8004010:	d003      	beq.n	800401a <HAL_RCC_GetSysClockFreq+0x36>
 8004012:	e027      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004014:	4b19      	ldr	r3, [pc, #100]	; (800407c <HAL_RCC_GetSysClockFreq+0x98>)
 8004016:	613b      	str	r3, [r7, #16]
      break;
 8004018:	e027      	b.n	800406a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	0c9b      	lsrs	r3, r3, #18
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	4a17      	ldr	r2, [pc, #92]	; (8004080 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004024:	5cd3      	ldrb	r3, [r2, r3]
 8004026:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d010      	beq.n	8004054 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004032:	4b11      	ldr	r3, [pc, #68]	; (8004078 <HAL_RCC_GetSysClockFreq+0x94>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	0c5b      	lsrs	r3, r3, #17
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	4a11      	ldr	r2, [pc, #68]	; (8004084 <HAL_RCC_GetSysClockFreq+0xa0>)
 800403e:	5cd3      	ldrb	r3, [r2, r3]
 8004040:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a0d      	ldr	r2, [pc, #52]	; (800407c <HAL_RCC_GetSysClockFreq+0x98>)
 8004046:	fb03 f202 	mul.w	r2, r3, r2
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	e004      	b.n	800405e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a0c      	ldr	r2, [pc, #48]	; (8004088 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004058:	fb02 f303 	mul.w	r3, r2, r3
 800405c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	613b      	str	r3, [r7, #16]
      break;
 8004062:	e002      	b.n	800406a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004064:	4b05      	ldr	r3, [pc, #20]	; (800407c <HAL_RCC_GetSysClockFreq+0x98>)
 8004066:	613b      	str	r3, [r7, #16]
      break;
 8004068:	bf00      	nop
    }
  }
  return sysclockfreq;
 800406a:	693b      	ldr	r3, [r7, #16]
}
 800406c:	4618      	mov	r0, r3
 800406e:	371c      	adds	r7, #28
 8004070:	46bd      	mov	sp, r7
 8004072:	bc80      	pop	{r7}
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	40021000 	.word	0x40021000
 800407c:	007a1200 	.word	0x007a1200
 8004080:	08005bcc 	.word	0x08005bcc
 8004084:	08005bdc 	.word	0x08005bdc
 8004088:	003d0900 	.word	0x003d0900

0800408c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004090:	4b02      	ldr	r3, [pc, #8]	; (800409c <HAL_RCC_GetHCLKFreq+0x10>)
 8004092:	681b      	ldr	r3, [r3, #0]
}
 8004094:	4618      	mov	r0, r3
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr
 800409c:	20000010 	.word	0x20000010

080040a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040a4:	f7ff fff2 	bl	800408c <HAL_RCC_GetHCLKFreq>
 80040a8:	4602      	mov	r2, r0
 80040aa:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	0a1b      	lsrs	r3, r3, #8
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	4903      	ldr	r1, [pc, #12]	; (80040c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040b6:	5ccb      	ldrb	r3, [r1, r3]
 80040b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040bc:	4618      	mov	r0, r3
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40021000 	.word	0x40021000
 80040c4:	08005bc4 	.word	0x08005bc4

080040c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040cc:	f7ff ffde 	bl	800408c <HAL_RCC_GetHCLKFreq>
 80040d0:	4602      	mov	r2, r0
 80040d2:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	0adb      	lsrs	r3, r3, #11
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	4903      	ldr	r1, [pc, #12]	; (80040ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80040de:	5ccb      	ldrb	r3, [r1, r3]
 80040e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40021000 	.word	0x40021000
 80040ec:	08005bc4 	.word	0x08005bc4

080040f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040f8:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <RCC_Delay+0x34>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a0a      	ldr	r2, [pc, #40]	; (8004128 <RCC_Delay+0x38>)
 80040fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004102:	0a5b      	lsrs	r3, r3, #9
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	fb02 f303 	mul.w	r3, r2, r3
 800410a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800410c:	bf00      	nop
  }
  while (Delay --);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	1e5a      	subs	r2, r3, #1
 8004112:	60fa      	str	r2, [r7, #12]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1f9      	bne.n	800410c <RCC_Delay+0x1c>
}
 8004118:	bf00      	nop
 800411a:	bf00      	nop
 800411c:	3714      	adds	r7, #20
 800411e:	46bd      	mov	sp, r7
 8004120:	bc80      	pop	{r7}
 8004122:	4770      	bx	lr
 8004124:	20000010 	.word	0x20000010
 8004128:	10624dd3 	.word	0x10624dd3

0800412c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e041      	b.n	80041c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d106      	bne.n	8004158 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7fe f850 	bl	80021f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3304      	adds	r3, #4
 8004168:	4619      	mov	r1, r3
 800416a:	4610      	mov	r0, r2
 800416c:	f000 fd10 	bl	8004b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
	...

080041cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d001      	beq.n	80041e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e032      	b.n	800424a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2202      	movs	r2, #2
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a18      	ldr	r2, [pc, #96]	; (8004254 <HAL_TIM_Base_Start+0x88>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d00e      	beq.n	8004214 <HAL_TIM_Base_Start+0x48>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041fe:	d009      	beq.n	8004214 <HAL_TIM_Base_Start+0x48>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a14      	ldr	r2, [pc, #80]	; (8004258 <HAL_TIM_Base_Start+0x8c>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d004      	beq.n	8004214 <HAL_TIM_Base_Start+0x48>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a13      	ldr	r2, [pc, #76]	; (800425c <HAL_TIM_Base_Start+0x90>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d111      	bne.n	8004238 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 0307 	and.w	r3, r3, #7
 800421e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2b06      	cmp	r3, #6
 8004224:	d010      	beq.n	8004248 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f042 0201 	orr.w	r2, r2, #1
 8004234:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004236:	e007      	b.n	8004248 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0201 	orr.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr
 8004254:	40012c00 	.word	0x40012c00
 8004258:	40000400 	.word	0x40000400
 800425c:	40000800 	.word	0x40000800

08004260 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b01      	cmp	r3, #1
 8004272:	d001      	beq.n	8004278 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e03a      	b.n	80042ee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0201 	orr.w	r2, r2, #1
 800428e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a18      	ldr	r2, [pc, #96]	; (80042f8 <HAL_TIM_Base_Start_IT+0x98>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d00e      	beq.n	80042b8 <HAL_TIM_Base_Start_IT+0x58>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a2:	d009      	beq.n	80042b8 <HAL_TIM_Base_Start_IT+0x58>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a14      	ldr	r2, [pc, #80]	; (80042fc <HAL_TIM_Base_Start_IT+0x9c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d004      	beq.n	80042b8 <HAL_TIM_Base_Start_IT+0x58>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a13      	ldr	r2, [pc, #76]	; (8004300 <HAL_TIM_Base_Start_IT+0xa0>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d111      	bne.n	80042dc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2b06      	cmp	r3, #6
 80042c8:	d010      	beq.n	80042ec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f042 0201 	orr.w	r2, r2, #1
 80042d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042da:	e007      	b.n	80042ec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0201 	orr.w	r2, r2, #1
 80042ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bc80      	pop	{r7}
 80042f6:	4770      	bx	lr
 80042f8:	40012c00 	.word	0x40012c00
 80042fc:	40000400 	.word	0x40000400
 8004300:	40000800 	.word	0x40000800

08004304 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800430e:	2300      	movs	r3, #0
 8004310:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d104      	bne.n	8004322 <HAL_TIM_IC_Start_IT+0x1e>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800431e:	b2db      	uxtb	r3, r3
 8004320:	e013      	b.n	800434a <HAL_TIM_IC_Start_IT+0x46>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b04      	cmp	r3, #4
 8004326:	d104      	bne.n	8004332 <HAL_TIM_IC_Start_IT+0x2e>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800432e:	b2db      	uxtb	r3, r3
 8004330:	e00b      	b.n	800434a <HAL_TIM_IC_Start_IT+0x46>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b08      	cmp	r3, #8
 8004336:	d104      	bne.n	8004342 <HAL_TIM_IC_Start_IT+0x3e>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800433e:	b2db      	uxtb	r3, r3
 8004340:	e003      	b.n	800434a <HAL_TIM_IC_Start_IT+0x46>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004348:	b2db      	uxtb	r3, r3
 800434a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d104      	bne.n	800435c <HAL_TIM_IC_Start_IT+0x58>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004358:	b2db      	uxtb	r3, r3
 800435a:	e013      	b.n	8004384 <HAL_TIM_IC_Start_IT+0x80>
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	2b04      	cmp	r3, #4
 8004360:	d104      	bne.n	800436c <HAL_TIM_IC_Start_IT+0x68>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004368:	b2db      	uxtb	r3, r3
 800436a:	e00b      	b.n	8004384 <HAL_TIM_IC_Start_IT+0x80>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	2b08      	cmp	r3, #8
 8004370:	d104      	bne.n	800437c <HAL_TIM_IC_Start_IT+0x78>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004378:	b2db      	uxtb	r3, r3
 800437a:	e003      	b.n	8004384 <HAL_TIM_IC_Start_IT+0x80>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004382:	b2db      	uxtb	r3, r3
 8004384:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004386:	7bbb      	ldrb	r3, [r7, #14]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d102      	bne.n	8004392 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800438c:	7b7b      	ldrb	r3, [r7, #13]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d001      	beq.n	8004396 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e0b8      	b.n	8004508 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d104      	bne.n	80043a6 <HAL_TIM_IC_Start_IT+0xa2>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043a4:	e013      	b.n	80043ce <HAL_TIM_IC_Start_IT+0xca>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	d104      	bne.n	80043b6 <HAL_TIM_IC_Start_IT+0xb2>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043b4:	e00b      	b.n	80043ce <HAL_TIM_IC_Start_IT+0xca>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d104      	bne.n	80043c6 <HAL_TIM_IC_Start_IT+0xc2>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2202      	movs	r2, #2
 80043c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043c4:	e003      	b.n	80043ce <HAL_TIM_IC_Start_IT+0xca>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2202      	movs	r2, #2
 80043ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d104      	bne.n	80043de <HAL_TIM_IC_Start_IT+0xda>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2202      	movs	r2, #2
 80043d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043dc:	e013      	b.n	8004406 <HAL_TIM_IC_Start_IT+0x102>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b04      	cmp	r3, #4
 80043e2:	d104      	bne.n	80043ee <HAL_TIM_IC_Start_IT+0xea>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043ec:	e00b      	b.n	8004406 <HAL_TIM_IC_Start_IT+0x102>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	d104      	bne.n	80043fe <HAL_TIM_IC_Start_IT+0xfa>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043fc:	e003      	b.n	8004406 <HAL_TIM_IC_Start_IT+0x102>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2202      	movs	r2, #2
 8004402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b0c      	cmp	r3, #12
 800440a:	d841      	bhi.n	8004490 <HAL_TIM_IC_Start_IT+0x18c>
 800440c:	a201      	add	r2, pc, #4	; (adr r2, 8004414 <HAL_TIM_IC_Start_IT+0x110>)
 800440e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004412:	bf00      	nop
 8004414:	08004449 	.word	0x08004449
 8004418:	08004491 	.word	0x08004491
 800441c:	08004491 	.word	0x08004491
 8004420:	08004491 	.word	0x08004491
 8004424:	0800445b 	.word	0x0800445b
 8004428:	08004491 	.word	0x08004491
 800442c:	08004491 	.word	0x08004491
 8004430:	08004491 	.word	0x08004491
 8004434:	0800446d 	.word	0x0800446d
 8004438:	08004491 	.word	0x08004491
 800443c:	08004491 	.word	0x08004491
 8004440:	08004491 	.word	0x08004491
 8004444:	0800447f 	.word	0x0800447f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f042 0202 	orr.w	r2, r2, #2
 8004456:	60da      	str	r2, [r3, #12]
      break;
 8004458:	e01d      	b.n	8004496 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68da      	ldr	r2, [r3, #12]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f042 0204 	orr.w	r2, r2, #4
 8004468:	60da      	str	r2, [r3, #12]
      break;
 800446a:	e014      	b.n	8004496 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0208 	orr.w	r2, r2, #8
 800447a:	60da      	str	r2, [r3, #12]
      break;
 800447c:	e00b      	b.n	8004496 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0210 	orr.w	r2, r2, #16
 800448c:	60da      	str	r2, [r3, #12]
      break;
 800448e:	e002      	b.n	8004496 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	73fb      	strb	r3, [r7, #15]
      break;
 8004494:	bf00      	nop
  }

  if (status == HAL_OK)
 8004496:	7bfb      	ldrb	r3, [r7, #15]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d134      	bne.n	8004506 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2201      	movs	r2, #1
 80044a2:	6839      	ldr	r1, [r7, #0]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 fc6b 	bl	8004d80 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a18      	ldr	r2, [pc, #96]	; (8004510 <HAL_TIM_IC_Start_IT+0x20c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d00e      	beq.n	80044d2 <HAL_TIM_IC_Start_IT+0x1ce>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044bc:	d009      	beq.n	80044d2 <HAL_TIM_IC_Start_IT+0x1ce>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a14      	ldr	r2, [pc, #80]	; (8004514 <HAL_TIM_IC_Start_IT+0x210>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d004      	beq.n	80044d2 <HAL_TIM_IC_Start_IT+0x1ce>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a12      	ldr	r2, [pc, #72]	; (8004518 <HAL_TIM_IC_Start_IT+0x214>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d111      	bne.n	80044f6 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	2b06      	cmp	r3, #6
 80044e2:	d010      	beq.n	8004506 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 0201 	orr.w	r2, r2, #1
 80044f2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f4:	e007      	b.n	8004506 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f042 0201 	orr.w	r2, r2, #1
 8004504:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004506:	7bfb      	ldrb	r3, [r7, #15]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40012c00 	.word	0x40012c00
 8004514:	40000400 	.word	0x40000400
 8004518:	40000800 	.word	0x40000800

0800451c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e093      	b.n	8004658 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d106      	bne.n	800454a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f7fd fe91 	bl	800226c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2202      	movs	r2, #2
 800454e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	6812      	ldr	r2, [r2, #0]
 800455c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004560:	f023 0307 	bic.w	r3, r3, #7
 8004564:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	3304      	adds	r3, #4
 800456e:	4619      	mov	r1, r3
 8004570:	4610      	mov	r0, r2
 8004572:	f000 fb0d 	bl	8004b90 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	4313      	orrs	r3, r2
 8004596:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800459e:	f023 0303 	bic.w	r3, r3, #3
 80045a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	021b      	lsls	r3, r3, #8
 80045ae:	4313      	orrs	r3, r2
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80045bc:	f023 030c 	bic.w	r3, r3, #12
 80045c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	021b      	lsls	r3, r3, #8
 80045d8:	4313      	orrs	r3, r2
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	011a      	lsls	r2, r3, #4
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	031b      	lsls	r3, r3, #12
 80045ec:	4313      	orrs	r3, r2
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80045fa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	011b      	lsls	r3, r3, #4
 8004606:	4313      	orrs	r3, r2
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	4313      	orrs	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004670:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004678:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004680:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004688:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d110      	bne.n	80046b2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004690:	7bfb      	ldrb	r3, [r7, #15]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d102      	bne.n	800469c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004696:	7b7b      	ldrb	r3, [r7, #13]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d001      	beq.n	80046a0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e089      	b.n	80047b4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046b0:	e031      	b.n	8004716 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b04      	cmp	r3, #4
 80046b6:	d110      	bne.n	80046da <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046b8:	7bbb      	ldrb	r3, [r7, #14]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d102      	bne.n	80046c4 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046be:	7b3b      	ldrb	r3, [r7, #12]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d001      	beq.n	80046c8 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e075      	b.n	80047b4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046d8:	e01d      	b.n	8004716 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046da:	7bfb      	ldrb	r3, [r7, #15]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d108      	bne.n	80046f2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046e0:	7bbb      	ldrb	r3, [r7, #14]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d105      	bne.n	80046f2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046e6:	7b7b      	ldrb	r3, [r7, #13]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d102      	bne.n	80046f2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046ec:	7b3b      	ldrb	r3, [r7, #12]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d001      	beq.n	80046f6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e05e      	b.n	80047b4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2202      	movs	r2, #2
 80046fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2202      	movs	r2, #2
 8004702:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2202      	movs	r2, #2
 800470a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2202      	movs	r2, #2
 8004712:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <HAL_TIM_Encoder_Start_IT+0xc4>
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	2b04      	cmp	r3, #4
 8004720:	d010      	beq.n	8004744 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004722:	e01f      	b.n	8004764 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2201      	movs	r2, #1
 800472a:	2100      	movs	r1, #0
 800472c:	4618      	mov	r0, r3
 800472e:	f000 fb27 	bl	8004d80 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68da      	ldr	r2, [r3, #12]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f042 0202 	orr.w	r2, r2, #2
 8004740:	60da      	str	r2, [r3, #12]
      break;
 8004742:	e02e      	b.n	80047a2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2201      	movs	r2, #1
 800474a:	2104      	movs	r1, #4
 800474c:	4618      	mov	r0, r3
 800474e:	f000 fb17 	bl	8004d80 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68da      	ldr	r2, [r3, #12]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f042 0204 	orr.w	r2, r2, #4
 8004760:	60da      	str	r2, [r3, #12]
      break;
 8004762:	e01e      	b.n	80047a2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2201      	movs	r2, #1
 800476a:	2100      	movs	r1, #0
 800476c:	4618      	mov	r0, r3
 800476e:	f000 fb07 	bl	8004d80 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2201      	movs	r2, #1
 8004778:	2104      	movs	r1, #4
 800477a:	4618      	mov	r0, r3
 800477c:	f000 fb00 	bl	8004d80 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f042 0202 	orr.w	r2, r2, #2
 800478e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68da      	ldr	r2, [r3, #12]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f042 0204 	orr.w	r2, r2, #4
 800479e:	60da      	str	r2, [r3, #12]
      break;
 80047a0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f042 0201 	orr.w	r2, r2, #1
 80047b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d122      	bne.n	8004818 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d11b      	bne.n	8004818 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f06f 0202 	mvn.w	r2, #2
 80047e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	f003 0303 	and.w	r3, r3, #3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7fd f878 	bl	80018f4 <HAL_TIM_IC_CaptureCallback>
 8004804:	e005      	b.n	8004812 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f9a7 	bl	8004b5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f9ad 	bl	8004b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b04      	cmp	r3, #4
 8004824:	d122      	bne.n	800486c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b04      	cmp	r3, #4
 8004832:	d11b      	bne.n	800486c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f06f 0204 	mvn.w	r2, #4
 800483c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2202      	movs	r2, #2
 8004842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7fd f84e 	bl	80018f4 <HAL_TIM_IC_CaptureCallback>
 8004858:	e005      	b.n	8004866 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f97d 	bl	8004b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 f983 	bl	8004b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	2b08      	cmp	r3, #8
 8004878:	d122      	bne.n	80048c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	f003 0308 	and.w	r3, r3, #8
 8004884:	2b08      	cmp	r3, #8
 8004886:	d11b      	bne.n	80048c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f06f 0208 	mvn.w	r2, #8
 8004890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2204      	movs	r2, #4
 8004896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	f003 0303 	and.w	r3, r3, #3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7fd f824 	bl	80018f4 <HAL_TIM_IC_CaptureCallback>
 80048ac:	e005      	b.n	80048ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f953 	bl	8004b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 f959 	bl	8004b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f003 0310 	and.w	r3, r3, #16
 80048ca:	2b10      	cmp	r3, #16
 80048cc:	d122      	bne.n	8004914 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f003 0310 	and.w	r3, r3, #16
 80048d8:	2b10      	cmp	r3, #16
 80048da:	d11b      	bne.n	8004914 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f06f 0210 	mvn.w	r2, #16
 80048e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2208      	movs	r2, #8
 80048ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7fc fffa 	bl	80018f4 <HAL_TIM_IC_CaptureCallback>
 8004900:	e005      	b.n	800490e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f929 	bl	8004b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 f92f 	bl	8004b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b01      	cmp	r3, #1
 8004920:	d10e      	bne.n	8004940 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	2b01      	cmp	r3, #1
 800492e:	d107      	bne.n	8004940 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f06f 0201 	mvn.w	r2, #1
 8004938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7fc ffa2 	bl	8001884 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494a:	2b80      	cmp	r3, #128	; 0x80
 800494c:	d10e      	bne.n	800496c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004958:	2b80      	cmp	r3, #128	; 0x80
 800495a:	d107      	bne.n	800496c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 fa95 	bl	8004e96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004976:	2b40      	cmp	r3, #64	; 0x40
 8004978:	d10e      	bne.n	8004998 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004984:	2b40      	cmp	r3, #64	; 0x40
 8004986:	d107      	bne.n	8004998 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f8f3 	bl	8004b7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	f003 0320 	and.w	r3, r3, #32
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	d10e      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f003 0320 	and.w	r3, r3, #32
 80049b0:	2b20      	cmp	r3, #32
 80049b2:	d107      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f06f 0220 	mvn.w	r2, #32
 80049bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 fa60 	bl	8004e84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049c4:	bf00      	nop
 80049c6:	3708      	adds	r7, #8
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049d6:	2300      	movs	r3, #0
 80049d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d101      	bne.n	80049e8 <HAL_TIM_ConfigClockSource+0x1c>
 80049e4:	2302      	movs	r3, #2
 80049e6:	e0b4      	b.n	8004b52 <HAL_TIM_ConfigClockSource+0x186>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2202      	movs	r2, #2
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a20:	d03e      	beq.n	8004aa0 <HAL_TIM_ConfigClockSource+0xd4>
 8004a22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a26:	f200 8087 	bhi.w	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
 8004a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2e:	f000 8086 	beq.w	8004b3e <HAL_TIM_ConfigClockSource+0x172>
 8004a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a36:	d87f      	bhi.n	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
 8004a38:	2b70      	cmp	r3, #112	; 0x70
 8004a3a:	d01a      	beq.n	8004a72 <HAL_TIM_ConfigClockSource+0xa6>
 8004a3c:	2b70      	cmp	r3, #112	; 0x70
 8004a3e:	d87b      	bhi.n	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
 8004a40:	2b60      	cmp	r3, #96	; 0x60
 8004a42:	d050      	beq.n	8004ae6 <HAL_TIM_ConfigClockSource+0x11a>
 8004a44:	2b60      	cmp	r3, #96	; 0x60
 8004a46:	d877      	bhi.n	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
 8004a48:	2b50      	cmp	r3, #80	; 0x50
 8004a4a:	d03c      	beq.n	8004ac6 <HAL_TIM_ConfigClockSource+0xfa>
 8004a4c:	2b50      	cmp	r3, #80	; 0x50
 8004a4e:	d873      	bhi.n	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
 8004a50:	2b40      	cmp	r3, #64	; 0x40
 8004a52:	d058      	beq.n	8004b06 <HAL_TIM_ConfigClockSource+0x13a>
 8004a54:	2b40      	cmp	r3, #64	; 0x40
 8004a56:	d86f      	bhi.n	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
 8004a58:	2b30      	cmp	r3, #48	; 0x30
 8004a5a:	d064      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0x15a>
 8004a5c:	2b30      	cmp	r3, #48	; 0x30
 8004a5e:	d86b      	bhi.n	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
 8004a60:	2b20      	cmp	r3, #32
 8004a62:	d060      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0x15a>
 8004a64:	2b20      	cmp	r3, #32
 8004a66:	d867      	bhi.n	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d05c      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0x15a>
 8004a6c:	2b10      	cmp	r3, #16
 8004a6e:	d05a      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0x15a>
 8004a70:	e062      	b.n	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a82:	f000 f95e 	bl	8004d42 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	609a      	str	r2, [r3, #8]
      break;
 8004a9e:	e04f      	b.n	8004b40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ab0:	f000 f947 	bl	8004d42 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	689a      	ldr	r2, [r3, #8]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ac2:	609a      	str	r2, [r3, #8]
      break;
 8004ac4:	e03c      	b.n	8004b40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	f000 f8be 	bl	8004c54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2150      	movs	r1, #80	; 0x50
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 f915 	bl	8004d0e <TIM_ITRx_SetConfig>
      break;
 8004ae4:	e02c      	b.n	8004b40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004af2:	461a      	mov	r2, r3
 8004af4:	f000 f8dc 	bl	8004cb0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2160      	movs	r1, #96	; 0x60
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 f905 	bl	8004d0e <TIM_ITRx_SetConfig>
      break;
 8004b04:	e01c      	b.n	8004b40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b12:	461a      	mov	r2, r3
 8004b14:	f000 f89e 	bl	8004c54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2140      	movs	r1, #64	; 0x40
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 f8f5 	bl	8004d0e <TIM_ITRx_SetConfig>
      break;
 8004b24:	e00c      	b.n	8004b40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4619      	mov	r1, r3
 8004b30:	4610      	mov	r0, r2
 8004b32:	f000 f8ec 	bl	8004d0e <TIM_ITRx_SetConfig>
      break;
 8004b36:	e003      	b.n	8004b40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b3c:	e000      	b.n	8004b40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bc80      	pop	{r7}
 8004b6a:	4770      	bx	lr

08004b6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bc80      	pop	{r7}
 8004b7c:	4770      	bx	lr

08004b7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b083      	sub	sp, #12
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b86:	bf00      	nop
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bc80      	pop	{r7}
 8004b8e:	4770      	bx	lr

08004b90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a29      	ldr	r2, [pc, #164]	; (8004c48 <TIM_Base_SetConfig+0xb8>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d00b      	beq.n	8004bc0 <TIM_Base_SetConfig+0x30>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bae:	d007      	beq.n	8004bc0 <TIM_Base_SetConfig+0x30>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a26      	ldr	r2, [pc, #152]	; (8004c4c <TIM_Base_SetConfig+0xbc>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d003      	beq.n	8004bc0 <TIM_Base_SetConfig+0x30>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a25      	ldr	r2, [pc, #148]	; (8004c50 <TIM_Base_SetConfig+0xc0>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d108      	bne.n	8004bd2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a1c      	ldr	r2, [pc, #112]	; (8004c48 <TIM_Base_SetConfig+0xb8>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00b      	beq.n	8004bf2 <TIM_Base_SetConfig+0x62>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be0:	d007      	beq.n	8004bf2 <TIM_Base_SetConfig+0x62>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a19      	ldr	r2, [pc, #100]	; (8004c4c <TIM_Base_SetConfig+0xbc>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d003      	beq.n	8004bf2 <TIM_Base_SetConfig+0x62>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a18      	ldr	r2, [pc, #96]	; (8004c50 <TIM_Base_SetConfig+0xc0>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d108      	bne.n	8004c04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a07      	ldr	r2, [pc, #28]	; (8004c48 <TIM_Base_SetConfig+0xb8>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d103      	bne.n	8004c38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	691a      	ldr	r2, [r3, #16]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	615a      	str	r2, [r3, #20]
}
 8004c3e:	bf00      	nop
 8004c40:	3714      	adds	r7, #20
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bc80      	pop	{r7}
 8004c46:	4770      	bx	lr
 8004c48:	40012c00 	.word	0x40012c00
 8004c4c:	40000400 	.word	0x40000400
 8004c50:	40000800 	.word	0x40000800

08004c54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b087      	sub	sp, #28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	f023 0201 	bic.w	r2, r3, #1
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f023 030a 	bic.w	r3, r3, #10
 8004c90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	621a      	str	r2, [r3, #32]
}
 8004ca6:	bf00      	nop
 8004ca8:	371c      	adds	r7, #28
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bc80      	pop	{r7}
 8004cae:	4770      	bx	lr

08004cb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	f023 0210 	bic.w	r2, r3, #16
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	031b      	lsls	r3, r3, #12
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	011b      	lsls	r3, r3, #4
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	621a      	str	r2, [r3, #32]
}
 8004d04:	bf00      	nop
 8004d06:	371c      	adds	r7, #28
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bc80      	pop	{r7}
 8004d0c:	4770      	bx	lr

08004d0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b085      	sub	sp, #20
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	f043 0307 	orr.w	r3, r3, #7
 8004d30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	609a      	str	r2, [r3, #8]
}
 8004d38:	bf00      	nop
 8004d3a:	3714      	adds	r7, #20
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bc80      	pop	{r7}
 8004d40:	4770      	bx	lr

08004d42 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b087      	sub	sp, #28
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	60f8      	str	r0, [r7, #12]
 8004d4a:	60b9      	str	r1, [r7, #8]
 8004d4c:	607a      	str	r2, [r7, #4]
 8004d4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d5c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	021a      	lsls	r2, r3, #8
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	431a      	orrs	r2, r3
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	609a      	str	r2, [r3, #8]
}
 8004d76:	bf00      	nop
 8004d78:	371c      	adds	r7, #28
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bc80      	pop	{r7}
 8004d7e:	4770      	bx	lr

08004d80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f003 031f 	and.w	r3, r3, #31
 8004d92:	2201      	movs	r2, #1
 8004d94:	fa02 f303 	lsl.w	r3, r2, r3
 8004d98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6a1a      	ldr	r2, [r3, #32]
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	43db      	mvns	r3, r3
 8004da2:	401a      	ands	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6a1a      	ldr	r2, [r3, #32]
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	f003 031f 	and.w	r3, r3, #31
 8004db2:	6879      	ldr	r1, [r7, #4]
 8004db4:	fa01 f303 	lsl.w	r3, r1, r3
 8004db8:	431a      	orrs	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	621a      	str	r2, [r3, #32]
}
 8004dbe:	bf00      	nop
 8004dc0:	371c      	adds	r7, #28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d101      	bne.n	8004de0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	e046      	b.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a16      	ldr	r2, [pc, #88]	; (8004e78 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d00e      	beq.n	8004e42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e2c:	d009      	beq.n	8004e42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a12      	ldr	r2, [pc, #72]	; (8004e7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d004      	beq.n	8004e42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a10      	ldr	r2, [pc, #64]	; (8004e80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d10c      	bne.n	8004e5c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bc80      	pop	{r7}
 8004e76:	4770      	bx	lr
 8004e78:	40012c00 	.word	0x40012c00
 8004e7c:	40000400 	.word	0x40000400
 8004e80:	40000800 	.word	0x40000800

08004e84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bc80      	pop	{r7}
 8004e94:	4770      	bx	lr

08004e96 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e9e:	bf00      	nop
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bc80      	pop	{r7}
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e042      	b.n	8004f40 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d106      	bne.n	8004ed4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7fd fa10 	bl	80022f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2224      	movs	r2, #36	; 0x24
 8004ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68da      	ldr	r2, [r3, #12]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004eea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 fd09 	bl	8005904 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	691a      	ldr	r2, [r3, #16]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	695a      	ldr	r2, [r3, #20]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68da      	ldr	r2, [r3, #12]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3708      	adds	r7, #8
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	4613      	mov	r3, r2
 8004f54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b20      	cmp	r3, #32
 8004f60:	d121      	bne.n	8004fa6 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d002      	beq.n	8004f6e <HAL_UART_Transmit_IT+0x26>
 8004f68:	88fb      	ldrh	r3, [r7, #6]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e01a      	b.n	8004fa8 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	88fa      	ldrh	r2, [r7, #6]
 8004f7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	88fa      	ldrh	r2, [r7, #6]
 8004f82:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2221      	movs	r2, #33	; 0x21
 8004f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68da      	ldr	r2, [r3, #12]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004fa0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	e000      	b.n	8004fa8 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8004fa6:	2302      	movs	r3, #2
  }
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bc80      	pop	{r7}
 8004fb0:	4770      	bx	lr

08004fb2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b084      	sub	sp, #16
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	60f8      	str	r0, [r7, #12]
 8004fba:	60b9      	str	r1, [r7, #8]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b20      	cmp	r3, #32
 8004fca:	d112      	bne.n	8004ff2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d002      	beq.n	8004fd8 <HAL_UART_Receive_IT+0x26>
 8004fd2:	88fb      	ldrh	r3, [r7, #6]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e00b      	b.n	8004ff4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004fe2:	88fb      	ldrh	r3, [r7, #6]
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	68b9      	ldr	r1, [r7, #8]
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f000 fab6 	bl	800555a <UART_Start_Receive_IT>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	e000      	b.n	8004ff4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004ff2:	2302      	movs	r3, #2
  }
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b0ba      	sub	sp, #232	; 0xe8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005022:	2300      	movs	r3, #0
 8005024:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005028:	2300      	movs	r3, #0
 800502a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800502e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005032:	f003 030f 	and.w	r3, r3, #15
 8005036:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800503a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10f      	bne.n	8005062 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005046:	f003 0320 	and.w	r3, r3, #32
 800504a:	2b00      	cmp	r3, #0
 800504c:	d009      	beq.n	8005062 <HAL_UART_IRQHandler+0x66>
 800504e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005052:	f003 0320 	and.w	r3, r3, #32
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 fb93 	bl	8005786 <UART_Receive_IT>
      return;
 8005060:	e25b      	b.n	800551a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005062:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 80de 	beq.w	8005228 <HAL_UART_IRQHandler+0x22c>
 800506c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b00      	cmp	r3, #0
 8005076:	d106      	bne.n	8005086 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800507c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 80d1 	beq.w	8005228 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00b      	beq.n	80050aa <HAL_UART_IRQHandler+0xae>
 8005092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509a:	2b00      	cmp	r3, #0
 800509c:	d005      	beq.n	80050aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a2:	f043 0201 	orr.w	r2, r3, #1
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ae:	f003 0304 	and.w	r3, r3, #4
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00b      	beq.n	80050ce <HAL_UART_IRQHandler+0xd2>
 80050b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d005      	beq.n	80050ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c6:	f043 0202 	orr.w	r2, r3, #2
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00b      	beq.n	80050f2 <HAL_UART_IRQHandler+0xf6>
 80050da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d005      	beq.n	80050f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ea:	f043 0204 	orr.w	r2, r3, #4
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80050f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050f6:	f003 0308 	and.w	r3, r3, #8
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d011      	beq.n	8005122 <HAL_UART_IRQHandler+0x126>
 80050fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005102:	f003 0320 	and.w	r3, r3, #32
 8005106:	2b00      	cmp	r3, #0
 8005108:	d105      	bne.n	8005116 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800510a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d005      	beq.n	8005122 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511a:	f043 0208 	orr.w	r2, r3, #8
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005126:	2b00      	cmp	r3, #0
 8005128:	f000 81f2 	beq.w	8005510 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800512c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005130:	f003 0320 	and.w	r3, r3, #32
 8005134:	2b00      	cmp	r3, #0
 8005136:	d008      	beq.n	800514a <HAL_UART_IRQHandler+0x14e>
 8005138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800513c:	f003 0320 	and.w	r3, r3, #32
 8005140:	2b00      	cmp	r3, #0
 8005142:	d002      	beq.n	800514a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 fb1e 	bl	8005786 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005154:	2b00      	cmp	r3, #0
 8005156:	bf14      	ite	ne
 8005158:	2301      	movne	r3, #1
 800515a:	2300      	moveq	r3, #0
 800515c:	b2db      	uxtb	r3, r3
 800515e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005166:	f003 0308 	and.w	r3, r3, #8
 800516a:	2b00      	cmp	r3, #0
 800516c:	d103      	bne.n	8005176 <HAL_UART_IRQHandler+0x17a>
 800516e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005172:	2b00      	cmp	r3, #0
 8005174:	d04f      	beq.n	8005216 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 fa28 	bl	80055cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005186:	2b00      	cmp	r3, #0
 8005188:	d041      	beq.n	800520e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	3314      	adds	r3, #20
 8005190:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005194:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005198:	e853 3f00 	ldrex	r3, [r3]
 800519c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80051a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	3314      	adds	r3, #20
 80051b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80051b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80051ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80051c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80051c6:	e841 2300 	strex	r3, r2, [r1]
 80051ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80051ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1d9      	bne.n	800518a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d013      	beq.n	8005206 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e2:	4a7e      	ldr	r2, [pc, #504]	; (80053dc <HAL_UART_IRQHandler+0x3e0>)
 80051e4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fe f960 	bl	80034b0 <HAL_DMA_Abort_IT>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d016      	beq.n	8005224 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005200:	4610      	mov	r0, r2
 8005202:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005204:	e00e      	b.n	8005224 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f993 	bl	8005532 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800520c:	e00a      	b.n	8005224 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f98f 	bl	8005532 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005214:	e006      	b.n	8005224 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f98b 	bl	8005532 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005222:	e175      	b.n	8005510 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005224:	bf00      	nop
    return;
 8005226:	e173      	b.n	8005510 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522c:	2b01      	cmp	r3, #1
 800522e:	f040 814f 	bne.w	80054d0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005236:	f003 0310 	and.w	r3, r3, #16
 800523a:	2b00      	cmp	r3, #0
 800523c:	f000 8148 	beq.w	80054d0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005244:	f003 0310 	and.w	r3, r3, #16
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 8141 	beq.w	80054d0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800524e:	2300      	movs	r3, #0
 8005250:	60bb      	str	r3, [r7, #8]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	60bb      	str	r3, [r7, #8]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	60bb      	str	r3, [r7, #8]
 8005262:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 80b6 	beq.w	80053e0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005280:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 8145 	beq.w	8005514 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800528e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005292:	429a      	cmp	r2, r3
 8005294:	f080 813e 	bcs.w	8005514 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800529e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	2b20      	cmp	r3, #32
 80052a8:	f000 8088 	beq.w	80053bc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	330c      	adds	r3, #12
 80052b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052ba:	e853 3f00 	ldrex	r3, [r3]
 80052be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80052c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	330c      	adds	r3, #12
 80052d4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80052d8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80052dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80052e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80052e8:	e841 2300 	strex	r3, r2, [r1]
 80052ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80052f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1d9      	bne.n	80052ac <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	3314      	adds	r3, #20
 80052fe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005300:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005302:	e853 3f00 	ldrex	r3, [r3]
 8005306:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005308:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800530a:	f023 0301 	bic.w	r3, r3, #1
 800530e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3314      	adds	r3, #20
 8005318:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800531c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005320:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005322:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005324:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005328:	e841 2300 	strex	r3, r2, [r1]
 800532c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800532e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1e1      	bne.n	80052f8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	3314      	adds	r3, #20
 800533a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800533e:	e853 3f00 	ldrex	r3, [r3]
 8005342:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005344:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800534a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3314      	adds	r3, #20
 8005354:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005358:	66fa      	str	r2, [r7, #108]	; 0x6c
 800535a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800535e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005360:	e841 2300 	strex	r3, r2, [r1]
 8005364:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005366:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1e3      	bne.n	8005334 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2220      	movs	r2, #32
 8005370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	330c      	adds	r3, #12
 8005380:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005384:	e853 3f00 	ldrex	r3, [r3]
 8005388:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800538a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800538c:	f023 0310 	bic.w	r3, r3, #16
 8005390:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	330c      	adds	r3, #12
 800539a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800539e:	65ba      	str	r2, [r7, #88]	; 0x58
 80053a0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053a6:	e841 2300 	strex	r3, r2, [r1]
 80053aa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80053ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1e3      	bne.n	800537a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7fe f83f 	bl	800343a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2202      	movs	r2, #2
 80053c0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	4619      	mov	r1, r3
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f8b6 	bl	8005544 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053d8:	e09c      	b.n	8005514 <HAL_UART_IRQHandler+0x518>
 80053da:	bf00      	nop
 80053dc:	08005691 	.word	0x08005691
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f000 808e 	beq.w	8005518 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80053fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 8089 	beq.w	8005518 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	330c      	adds	r3, #12
 800540c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005410:	e853 3f00 	ldrex	r3, [r3]
 8005414:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005418:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800541c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	330c      	adds	r3, #12
 8005426:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800542a:	647a      	str	r2, [r7, #68]	; 0x44
 800542c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005430:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005432:	e841 2300 	strex	r3, r2, [r1]
 8005436:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1e3      	bne.n	8005406 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	3314      	adds	r3, #20
 8005444:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	e853 3f00 	ldrex	r3, [r3]
 800544c:	623b      	str	r3, [r7, #32]
   return(result);
 800544e:	6a3b      	ldr	r3, [r7, #32]
 8005450:	f023 0301 	bic.w	r3, r3, #1
 8005454:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	3314      	adds	r3, #20
 800545e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005462:	633a      	str	r2, [r7, #48]	; 0x30
 8005464:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005466:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800546a:	e841 2300 	strex	r3, r2, [r1]
 800546e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1e3      	bne.n	800543e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2220      	movs	r2, #32
 800547a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	330c      	adds	r3, #12
 800548a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	e853 3f00 	ldrex	r3, [r3]
 8005492:	60fb      	str	r3, [r7, #12]
   return(result);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f023 0310 	bic.w	r3, r3, #16
 800549a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	330c      	adds	r3, #12
 80054a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80054a8:	61fa      	str	r2, [r7, #28]
 80054aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ac:	69b9      	ldr	r1, [r7, #24]
 80054ae:	69fa      	ldr	r2, [r7, #28]
 80054b0:	e841 2300 	strex	r3, r2, [r1]
 80054b4:	617b      	str	r3, [r7, #20]
   return(result);
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1e3      	bne.n	8005484 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2202      	movs	r2, #2
 80054c0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054c6:	4619      	mov	r1, r3
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f83b 	bl	8005544 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054ce:	e023      	b.n	8005518 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80054d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d009      	beq.n	80054f0 <HAL_UART_IRQHandler+0x4f4>
 80054dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d003      	beq.n	80054f0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f8e5 	bl	80056b8 <UART_Transmit_IT>
    return;
 80054ee:	e014      	b.n	800551a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80054f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00e      	beq.n	800551a <HAL_UART_IRQHandler+0x51e>
 80054fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005504:	2b00      	cmp	r3, #0
 8005506:	d008      	beq.n	800551a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f924 	bl	8005756 <UART_EndTransmit_IT>
    return;
 800550e:	e004      	b.n	800551a <HAL_UART_IRQHandler+0x51e>
    return;
 8005510:	bf00      	nop
 8005512:	e002      	b.n	800551a <HAL_UART_IRQHandler+0x51e>
      return;
 8005514:	bf00      	nop
 8005516:	e000      	b.n	800551a <HAL_UART_IRQHandler+0x51e>
      return;
 8005518:	bf00      	nop
  }
}
 800551a:	37e8      	adds	r7, #232	; 0xe8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	bc80      	pop	{r7}
 8005530:	4770      	bx	lr

08005532 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005532:	b480      	push	{r7}
 8005534:	b083      	sub	sp, #12
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800553a:	bf00      	nop
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	bc80      	pop	{r7}
 8005542:	4770      	bx	lr

08005544 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	460b      	mov	r3, r1
 800554e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	bc80      	pop	{r7}
 8005558:	4770      	bx	lr

0800555a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800555a:	b480      	push	{r7}
 800555c:	b085      	sub	sp, #20
 800555e:	af00      	add	r7, sp, #0
 8005560:	60f8      	str	r0, [r7, #12]
 8005562:	60b9      	str	r1, [r7, #8]
 8005564:	4613      	mov	r3, r2
 8005566:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	88fa      	ldrh	r2, [r7, #6]
 8005572:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	88fa      	ldrh	r2, [r7, #6]
 8005578:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2222      	movs	r2, #34	; 0x22
 8005584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d007      	beq.n	80055a0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68da      	ldr	r2, [r3, #12]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800559e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695a      	ldr	r2, [r3, #20]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 0201 	orr.w	r2, r2, #1
 80055ae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f042 0220 	orr.w	r2, r2, #32
 80055be:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3714      	adds	r7, #20
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bc80      	pop	{r7}
 80055ca:	4770      	bx	lr

080055cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b095      	sub	sp, #84	; 0x54
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	330c      	adds	r3, #12
 80055da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055de:	e853 3f00 	ldrex	r3, [r3]
 80055e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	330c      	adds	r3, #12
 80055f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055f4:	643a      	str	r2, [r7, #64]	; 0x40
 80055f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055fc:	e841 2300 	strex	r3, r2, [r1]
 8005600:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1e5      	bne.n	80055d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3314      	adds	r3, #20
 800560e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	e853 3f00 	ldrex	r3, [r3]
 8005616:	61fb      	str	r3, [r7, #28]
   return(result);
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	f023 0301 	bic.w	r3, r3, #1
 800561e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3314      	adds	r3, #20
 8005626:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005628:	62fa      	str	r2, [r7, #44]	; 0x2c
 800562a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800562e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005630:	e841 2300 	strex	r3, r2, [r1]
 8005634:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1e5      	bne.n	8005608 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005640:	2b01      	cmp	r3, #1
 8005642:	d119      	bne.n	8005678 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	330c      	adds	r3, #12
 800564a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	e853 3f00 	ldrex	r3, [r3]
 8005652:	60bb      	str	r3, [r7, #8]
   return(result);
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	f023 0310 	bic.w	r3, r3, #16
 800565a:	647b      	str	r3, [r7, #68]	; 0x44
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	330c      	adds	r3, #12
 8005662:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005664:	61ba      	str	r2, [r7, #24]
 8005666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005668:	6979      	ldr	r1, [r7, #20]
 800566a:	69ba      	ldr	r2, [r7, #24]
 800566c:	e841 2300 	strex	r3, r2, [r1]
 8005670:	613b      	str	r3, [r7, #16]
   return(result);
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1e5      	bne.n	8005644 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2220      	movs	r2, #32
 800567c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005686:	bf00      	nop
 8005688:	3754      	adds	r7, #84	; 0x54
 800568a:	46bd      	mov	sp, r7
 800568c:	bc80      	pop	{r7}
 800568e:	4770      	bx	lr

08005690 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f7ff ff41 	bl	8005532 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056b0:	bf00      	nop
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b21      	cmp	r3, #33	; 0x21
 80056ca:	d13e      	bne.n	800574a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d4:	d114      	bne.n	8005700 <UART_Transmit_IT+0x48>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d110      	bne.n	8005700 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	881b      	ldrh	r3, [r3, #0]
 80056e8:	461a      	mov	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056f2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	1c9a      	adds	r2, r3, #2
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	621a      	str	r2, [r3, #32]
 80056fe:	e008      	b.n	8005712 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a1b      	ldr	r3, [r3, #32]
 8005704:	1c59      	adds	r1, r3, #1
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	6211      	str	r1, [r2, #32]
 800570a:	781a      	ldrb	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005716:	b29b      	uxth	r3, r3
 8005718:	3b01      	subs	r3, #1
 800571a:	b29b      	uxth	r3, r3
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	4619      	mov	r1, r3
 8005720:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10f      	bne.n	8005746 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68da      	ldr	r2, [r3, #12]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005734:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68da      	ldr	r2, [r3, #12]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005744:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005746:	2300      	movs	r3, #0
 8005748:	e000      	b.n	800574c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800574a:	2302      	movs	r3, #2
  }
}
 800574c:	4618      	mov	r0, r3
 800574e:	3714      	adds	r7, #20
 8005750:	46bd      	mov	sp, r7
 8005752:	bc80      	pop	{r7}
 8005754:	4770      	bx	lr

08005756 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b082      	sub	sp, #8
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68da      	ldr	r2, [r3, #12]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800576c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2220      	movs	r2, #32
 8005772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7ff fed2 	bl	8005520 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b08c      	sub	sp, #48	; 0x30
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b22      	cmp	r3, #34	; 0x22
 8005798:	f040 80ae 	bne.w	80058f8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057a4:	d117      	bne.n	80057d6 <UART_Receive_IT+0x50>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d113      	bne.n	80057d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80057ae:	2300      	movs	r3, #0
 80057b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	b29b      	uxth	r3, r3
 80057c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ce:	1c9a      	adds	r2, r3, #2
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	629a      	str	r2, [r3, #40]	; 0x28
 80057d4:	e026      	b.n	8005824 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80057dc:	2300      	movs	r3, #0
 80057de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e8:	d007      	beq.n	80057fa <UART_Receive_IT+0x74>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10a      	bne.n	8005808 <UART_Receive_IT+0x82>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d106      	bne.n	8005808 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	b2da      	uxtb	r2, r3
 8005802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005804:	701a      	strb	r2, [r3, #0]
 8005806:	e008      	b.n	800581a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	b2db      	uxtb	r3, r3
 8005810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005814:	b2da      	uxtb	r2, r3
 8005816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005818:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581e:	1c5a      	adds	r2, r3, #1
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005828:	b29b      	uxth	r3, r3
 800582a:	3b01      	subs	r3, #1
 800582c:	b29b      	uxth	r3, r3
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	4619      	mov	r1, r3
 8005832:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005834:	2b00      	cmp	r3, #0
 8005836:	d15d      	bne.n	80058f4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 0220 	bic.w	r2, r2, #32
 8005846:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68da      	ldr	r2, [r3, #12]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005856:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	695a      	ldr	r2, [r3, #20]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 0201 	bic.w	r2, r2, #1
 8005866:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2220      	movs	r2, #32
 800586c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587a:	2b01      	cmp	r3, #1
 800587c:	d135      	bne.n	80058ea <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	330c      	adds	r3, #12
 800588a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	e853 3f00 	ldrex	r3, [r3]
 8005892:	613b      	str	r3, [r7, #16]
   return(result);
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	f023 0310 	bic.w	r3, r3, #16
 800589a:	627b      	str	r3, [r7, #36]	; 0x24
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	330c      	adds	r3, #12
 80058a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a4:	623a      	str	r2, [r7, #32]
 80058a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a8:	69f9      	ldr	r1, [r7, #28]
 80058aa:	6a3a      	ldr	r2, [r7, #32]
 80058ac:	e841 2300 	strex	r3, r2, [r1]
 80058b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1e5      	bne.n	8005884 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0310 	and.w	r3, r3, #16
 80058c2:	2b10      	cmp	r3, #16
 80058c4:	d10a      	bne.n	80058dc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058c6:	2300      	movs	r3, #0
 80058c8:	60fb      	str	r3, [r7, #12]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	60fb      	str	r3, [r7, #12]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	60fb      	str	r3, [r7, #12]
 80058da:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058e0:	4619      	mov	r1, r3
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7ff fe2e 	bl	8005544 <HAL_UARTEx_RxEventCallback>
 80058e8:	e002      	b.n	80058f0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7fb ff74 	bl	80017d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80058f0:	2300      	movs	r3, #0
 80058f2:	e002      	b.n	80058fa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80058f4:	2300      	movs	r3, #0
 80058f6:	e000      	b.n	80058fa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80058f8:	2302      	movs	r3, #2
  }
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3730      	adds	r7, #48	; 0x30
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
	...

08005904 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689a      	ldr	r2, [r3, #8]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	431a      	orrs	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	4313      	orrs	r3, r2
 8005932:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800593e:	f023 030c 	bic.w	r3, r3, #12
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	6812      	ldr	r2, [r2, #0]
 8005946:	68b9      	ldr	r1, [r7, #8]
 8005948:	430b      	orrs	r3, r1
 800594a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	699a      	ldr	r2, [r3, #24]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a2c      	ldr	r2, [pc, #176]	; (8005a18 <UART_SetConfig+0x114>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d103      	bne.n	8005974 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800596c:	f7fe fbac 	bl	80040c8 <HAL_RCC_GetPCLK2Freq>
 8005970:	60f8      	str	r0, [r7, #12]
 8005972:	e002      	b.n	800597a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005974:	f7fe fb94 	bl	80040a0 <HAL_RCC_GetPCLK1Freq>
 8005978:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	4613      	mov	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	009a      	lsls	r2, r3, #2
 8005984:	441a      	add	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005990:	4a22      	ldr	r2, [pc, #136]	; (8005a1c <UART_SetConfig+0x118>)
 8005992:	fba2 2303 	umull	r2, r3, r2, r3
 8005996:	095b      	lsrs	r3, r3, #5
 8005998:	0119      	lsls	r1, r3, #4
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	4613      	mov	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4413      	add	r3, r2
 80059a2:	009a      	lsls	r2, r3, #2
 80059a4:	441a      	add	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80059b0:	4b1a      	ldr	r3, [pc, #104]	; (8005a1c <UART_SetConfig+0x118>)
 80059b2:	fba3 0302 	umull	r0, r3, r3, r2
 80059b6:	095b      	lsrs	r3, r3, #5
 80059b8:	2064      	movs	r0, #100	; 0x64
 80059ba:	fb00 f303 	mul.w	r3, r0, r3
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	011b      	lsls	r3, r3, #4
 80059c2:	3332      	adds	r3, #50	; 0x32
 80059c4:	4a15      	ldr	r2, [pc, #84]	; (8005a1c <UART_SetConfig+0x118>)
 80059c6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ca:	095b      	lsrs	r3, r3, #5
 80059cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059d0:	4419      	add	r1, r3
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	4613      	mov	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4413      	add	r3, r2
 80059da:	009a      	lsls	r2, r3, #2
 80059dc:	441a      	add	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80059e8:	4b0c      	ldr	r3, [pc, #48]	; (8005a1c <UART_SetConfig+0x118>)
 80059ea:	fba3 0302 	umull	r0, r3, r3, r2
 80059ee:	095b      	lsrs	r3, r3, #5
 80059f0:	2064      	movs	r0, #100	; 0x64
 80059f2:	fb00 f303 	mul.w	r3, r0, r3
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	011b      	lsls	r3, r3, #4
 80059fa:	3332      	adds	r3, #50	; 0x32
 80059fc:	4a07      	ldr	r2, [pc, #28]	; (8005a1c <UART_SetConfig+0x118>)
 80059fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005a02:	095b      	lsrs	r3, r3, #5
 8005a04:	f003 020f 	and.w	r2, r3, #15
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	440a      	add	r2, r1
 8005a0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005a10:	bf00      	nop
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	40013800 	.word	0x40013800
 8005a1c:	51eb851f 	.word	0x51eb851f

08005a20 <atoi>:
 8005a20:	220a      	movs	r2, #10
 8005a22:	2100      	movs	r1, #0
 8005a24:	f000 b87e 	b.w	8005b24 <strtol>

08005a28 <_strtol_l.constprop.0>:
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a2e:	4686      	mov	lr, r0
 8005a30:	4690      	mov	r8, r2
 8005a32:	d001      	beq.n	8005a38 <_strtol_l.constprop.0+0x10>
 8005a34:	2b24      	cmp	r3, #36	; 0x24
 8005a36:	d906      	bls.n	8005a46 <_strtol_l.constprop.0+0x1e>
 8005a38:	f000 f886 	bl	8005b48 <__errno>
 8005a3c:	2316      	movs	r3, #22
 8005a3e:	6003      	str	r3, [r0, #0]
 8005a40:	2000      	movs	r0, #0
 8005a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a46:	460d      	mov	r5, r1
 8005a48:	4835      	ldr	r0, [pc, #212]	; (8005b20 <_strtol_l.constprop.0+0xf8>)
 8005a4a:	462a      	mov	r2, r5
 8005a4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a50:	5d06      	ldrb	r6, [r0, r4]
 8005a52:	f016 0608 	ands.w	r6, r6, #8
 8005a56:	d1f8      	bne.n	8005a4a <_strtol_l.constprop.0+0x22>
 8005a58:	2c2d      	cmp	r4, #45	; 0x2d
 8005a5a:	d12e      	bne.n	8005aba <_strtol_l.constprop.0+0x92>
 8005a5c:	2601      	movs	r6, #1
 8005a5e:	782c      	ldrb	r4, [r5, #0]
 8005a60:	1c95      	adds	r5, r2, #2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d057      	beq.n	8005b16 <_strtol_l.constprop.0+0xee>
 8005a66:	2b10      	cmp	r3, #16
 8005a68:	d109      	bne.n	8005a7e <_strtol_l.constprop.0+0x56>
 8005a6a:	2c30      	cmp	r4, #48	; 0x30
 8005a6c:	d107      	bne.n	8005a7e <_strtol_l.constprop.0+0x56>
 8005a6e:	782a      	ldrb	r2, [r5, #0]
 8005a70:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8005a74:	2a58      	cmp	r2, #88	; 0x58
 8005a76:	d149      	bne.n	8005b0c <_strtol_l.constprop.0+0xe4>
 8005a78:	2310      	movs	r3, #16
 8005a7a:	786c      	ldrb	r4, [r5, #1]
 8005a7c:	3502      	adds	r5, #2
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8005a84:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005a88:	fbbc f9f3 	udiv	r9, ip, r3
 8005a8c:	4610      	mov	r0, r2
 8005a8e:	fb03 ca19 	mls	sl, r3, r9, ip
 8005a92:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005a96:	2f09      	cmp	r7, #9
 8005a98:	d814      	bhi.n	8005ac4 <_strtol_l.constprop.0+0x9c>
 8005a9a:	463c      	mov	r4, r7
 8005a9c:	42a3      	cmp	r3, r4
 8005a9e:	dd20      	ble.n	8005ae2 <_strtol_l.constprop.0+0xba>
 8005aa0:	1c57      	adds	r7, r2, #1
 8005aa2:	d007      	beq.n	8005ab4 <_strtol_l.constprop.0+0x8c>
 8005aa4:	4581      	cmp	r9, r0
 8005aa6:	d319      	bcc.n	8005adc <_strtol_l.constprop.0+0xb4>
 8005aa8:	d101      	bne.n	8005aae <_strtol_l.constprop.0+0x86>
 8005aaa:	45a2      	cmp	sl, r4
 8005aac:	db16      	blt.n	8005adc <_strtol_l.constprop.0+0xb4>
 8005aae:	2201      	movs	r2, #1
 8005ab0:	fb00 4003 	mla	r0, r0, r3, r4
 8005ab4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ab8:	e7eb      	b.n	8005a92 <_strtol_l.constprop.0+0x6a>
 8005aba:	2c2b      	cmp	r4, #43	; 0x2b
 8005abc:	bf04      	itt	eq
 8005abe:	782c      	ldrbeq	r4, [r5, #0]
 8005ac0:	1c95      	addeq	r5, r2, #2
 8005ac2:	e7ce      	b.n	8005a62 <_strtol_l.constprop.0+0x3a>
 8005ac4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005ac8:	2f19      	cmp	r7, #25
 8005aca:	d801      	bhi.n	8005ad0 <_strtol_l.constprop.0+0xa8>
 8005acc:	3c37      	subs	r4, #55	; 0x37
 8005ace:	e7e5      	b.n	8005a9c <_strtol_l.constprop.0+0x74>
 8005ad0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005ad4:	2f19      	cmp	r7, #25
 8005ad6:	d804      	bhi.n	8005ae2 <_strtol_l.constprop.0+0xba>
 8005ad8:	3c57      	subs	r4, #87	; 0x57
 8005ada:	e7df      	b.n	8005a9c <_strtol_l.constprop.0+0x74>
 8005adc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ae0:	e7e8      	b.n	8005ab4 <_strtol_l.constprop.0+0x8c>
 8005ae2:	1c53      	adds	r3, r2, #1
 8005ae4:	d108      	bne.n	8005af8 <_strtol_l.constprop.0+0xd0>
 8005ae6:	2322      	movs	r3, #34	; 0x22
 8005ae8:	4660      	mov	r0, ip
 8005aea:	f8ce 3000 	str.w	r3, [lr]
 8005aee:	f1b8 0f00 	cmp.w	r8, #0
 8005af2:	d0a6      	beq.n	8005a42 <_strtol_l.constprop.0+0x1a>
 8005af4:	1e69      	subs	r1, r5, #1
 8005af6:	e006      	b.n	8005b06 <_strtol_l.constprop.0+0xde>
 8005af8:	b106      	cbz	r6, 8005afc <_strtol_l.constprop.0+0xd4>
 8005afa:	4240      	negs	r0, r0
 8005afc:	f1b8 0f00 	cmp.w	r8, #0
 8005b00:	d09f      	beq.n	8005a42 <_strtol_l.constprop.0+0x1a>
 8005b02:	2a00      	cmp	r2, #0
 8005b04:	d1f6      	bne.n	8005af4 <_strtol_l.constprop.0+0xcc>
 8005b06:	f8c8 1000 	str.w	r1, [r8]
 8005b0a:	e79a      	b.n	8005a42 <_strtol_l.constprop.0+0x1a>
 8005b0c:	2430      	movs	r4, #48	; 0x30
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1b5      	bne.n	8005a7e <_strtol_l.constprop.0+0x56>
 8005b12:	2308      	movs	r3, #8
 8005b14:	e7b3      	b.n	8005a7e <_strtol_l.constprop.0+0x56>
 8005b16:	2c30      	cmp	r4, #48	; 0x30
 8005b18:	d0a9      	beq.n	8005a6e <_strtol_l.constprop.0+0x46>
 8005b1a:	230a      	movs	r3, #10
 8005b1c:	e7af      	b.n	8005a7e <_strtol_l.constprop.0+0x56>
 8005b1e:	bf00      	nop
 8005b20:	08005bdf 	.word	0x08005bdf

08005b24 <strtol>:
 8005b24:	4613      	mov	r3, r2
 8005b26:	460a      	mov	r2, r1
 8005b28:	4601      	mov	r1, r0
 8005b2a:	4802      	ldr	r0, [pc, #8]	; (8005b34 <strtol+0x10>)
 8005b2c:	6800      	ldr	r0, [r0, #0]
 8005b2e:	f7ff bf7b 	b.w	8005a28 <_strtol_l.constprop.0>
 8005b32:	bf00      	nop
 8005b34:	20000068 	.word	0x20000068

08005b38 <memset>:
 8005b38:	4603      	mov	r3, r0
 8005b3a:	4402      	add	r2, r0
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d100      	bne.n	8005b42 <memset+0xa>
 8005b40:	4770      	bx	lr
 8005b42:	f803 1b01 	strb.w	r1, [r3], #1
 8005b46:	e7f9      	b.n	8005b3c <memset+0x4>

08005b48 <__errno>:
 8005b48:	4b01      	ldr	r3, [pc, #4]	; (8005b50 <__errno+0x8>)
 8005b4a:	6818      	ldr	r0, [r3, #0]
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	20000068 	.word	0x20000068

08005b54 <__libc_init_array>:
 8005b54:	b570      	push	{r4, r5, r6, lr}
 8005b56:	2600      	movs	r6, #0
 8005b58:	4d0c      	ldr	r5, [pc, #48]	; (8005b8c <__libc_init_array+0x38>)
 8005b5a:	4c0d      	ldr	r4, [pc, #52]	; (8005b90 <__libc_init_array+0x3c>)
 8005b5c:	1b64      	subs	r4, r4, r5
 8005b5e:	10a4      	asrs	r4, r4, #2
 8005b60:	42a6      	cmp	r6, r4
 8005b62:	d109      	bne.n	8005b78 <__libc_init_array+0x24>
 8005b64:	f000 f81a 	bl	8005b9c <_init>
 8005b68:	2600      	movs	r6, #0
 8005b6a:	4d0a      	ldr	r5, [pc, #40]	; (8005b94 <__libc_init_array+0x40>)
 8005b6c:	4c0a      	ldr	r4, [pc, #40]	; (8005b98 <__libc_init_array+0x44>)
 8005b6e:	1b64      	subs	r4, r4, r5
 8005b70:	10a4      	asrs	r4, r4, #2
 8005b72:	42a6      	cmp	r6, r4
 8005b74:	d105      	bne.n	8005b82 <__libc_init_array+0x2e>
 8005b76:	bd70      	pop	{r4, r5, r6, pc}
 8005b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b7c:	4798      	blx	r3
 8005b7e:	3601      	adds	r6, #1
 8005b80:	e7ee      	b.n	8005b60 <__libc_init_array+0xc>
 8005b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b86:	4798      	blx	r3
 8005b88:	3601      	adds	r6, #1
 8005b8a:	e7f2      	b.n	8005b72 <__libc_init_array+0x1e>
 8005b8c:	08005ce0 	.word	0x08005ce0
 8005b90:	08005ce0 	.word	0x08005ce0
 8005b94:	08005ce0 	.word	0x08005ce0
 8005b98:	08005ce4 	.word	0x08005ce4

08005b9c <_init>:
 8005b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b9e:	bf00      	nop
 8005ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ba2:	bc08      	pop	{r3}
 8005ba4:	469e      	mov	lr, r3
 8005ba6:	4770      	bx	lr

08005ba8 <_fini>:
 8005ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005baa:	bf00      	nop
 8005bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bae:	bc08      	pop	{r3}
 8005bb0:	469e      	mov	lr, r3
 8005bb2:	4770      	bx	lr
